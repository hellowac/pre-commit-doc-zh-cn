{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230pre-commmit\u6587\u6863!","text":"<p>\u5b98\u7f51: https://pre-commit.com/</p> <p>\u4ed3\u5e93: https://github.com/pre-commit/pre-commit.com</p> <p>Git \u94a9\u5b50\u811a\u672c\u5728\u63d0\u4ea4\u4ee3\u7801\u5ba1\u67e5\u4e4b\u524d\u8bc6\u522b\u7b80\u5355\u95ee\u9898\u975e\u5e38\u6709\u7528\u3002\u6211\u4eec\u5728\u6bcf\u6b21\u63d0\u4ea4\u65f6\u8fd0\u884c\u94a9\u5b50\uff0c\u81ea\u52a8\u6307\u51fa\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u7f3a\u5c11\u5206\u53f7\u3001\u5c3e\u968f\u7a7a\u683c\u548c\u8c03\u8bd5\u8bed\u53e5\u3002\u5728\u4ee3\u7801\u5ba1\u67e5\u4e4b\u524d\u6307\u51fa\u8fd9\u4e9b\u95ee\u9898\uff0c\u4f7f\u5f97\u4ee3\u7801\u5ba1\u67e5\u8005\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u66f4\u6539\u7684\u67b6\u6784\uff0c\u800c\u4e0d\u6d6a\u8d39\u65f6\u95f4\u5904\u7406\u7410\u788e\u7684\u98ce\u683c\u95ee\u9898\u3002</p> <p>\u968f\u7740\u6211\u4eec\u521b\u5efa\u66f4\u591a\u5e93\u548c\u9879\u76ee\uff0c\u6211\u4eec\u610f\u8bc6\u5230\u5728\u9879\u76ee\u4e4b\u95f4\u5171\u4eab\u9884\u63d0\u4ea4\u94a9\u5b50\u662f\u75db\u82e6\u7684\u3002\u6211\u4eec\u4ece\u4e00\u4e2a\u9879\u76ee\u590d\u5236\u7c98\u8d34\u7b28\u91cd\u7684 Bash \u811a\u672c\uff0c\u5e76\u4e14\u5fc5\u987b\u624b\u52a8\u66f4\u6539\u94a9\u5b50\u4ee5\u9002\u5e94\u4e0d\u540c\u7684\u9879\u76ee\u7ed3\u6784\u3002</p> <p>\u6211\u4eec\u76f8\u4fe1\uff0c\u60a8\u5e94\u8be5\u59cb\u7ec8\u4f7f\u7528\u6700\u4f73\u7684\u884c\u4e1a\u6807\u51c6\u4ee3\u7801\u68c0\u67e5\u5de5\u5177\u3002\u4e00\u4e9b\u6700\u597d\u7684\u4ee3\u7801\u68c0\u67e5\u5de5\u5177\u662f\u7528\u60a8\u5728\u9879\u76ee\u4e2d\u672a\u4f7f\u7528\u6216\u672a\u5b89\u88c5\u7684\u8bed\u8a00\u7f16\u5199\u7684\u3002\u4f8b\u5982\uff0cscss-lint \u662f\u4e00\u4e2a\u4e3a SCSS \u7f16\u5199\u7684 Ruby \u4ee3\u7801\u68c0\u67e5\u5de5\u5177\u3002\u5982\u679c\u60a8\u5728 Node.js \u4e2d\u7f16\u5199\u9879\u76ee\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u5728\u4e0d\u6dfb\u52a0 Gemfile \u6216\u4e86\u89e3\u5982\u4f55\u5b89\u88c5 scss-lint \u7684\u60c5\u51b5\u4e0b\u4f7f\u7528 scss-lint \u4f5c\u4e3a\u9884\u63d0\u4ea4\u94a9\u5b50\u3002</p> <p>\u6211\u4eec\u6784\u5efa\u4e86 pre-commit \u6765\u89e3\u51b3\u94a9\u5b50\u95ee\u9898\u3002\u5b83\u662f\u4e00\u4e2a\u591a\u8bed\u8a00\u7684\u9884\u63d0\u4ea4\u94a9\u5b50\u5305\u7ba1\u7406\u5668\u3002\u60a8\u53ef\u4ee5\u6307\u5b9a\u8981\u4f7f\u7528\u7684\u94a9\u5b50\u5217\u8868\uff0c\u800c pre-commit \u4f1a\u7ba1\u7406\u5728\u6bcf\u6b21\u63d0\u4ea4\u4e4b\u524d\u5b89\u88c5\u548c\u6267\u884c\u4efb\u4f55\u7528\u4efb\u4f55\u8bed\u8a00\u7f16\u5199\u7684\u94a9\u5b50\u3002pre-commit \u8bbe\u8ba1\u65f6\u7279\u522b\u8003\u8651\u5230\u4e0d\u9700\u8981\u6839\u6743\u9650\u3002\u5982\u679c\u60a8\u7684\u5f00\u53d1\u4eba\u5458\u6ca1\u6709\u5b89\u88c5 Node\uff0c\u4f46\u4fee\u6539\u4e86 JavaScript \u6587\u4ef6\uff0cpre-commit \u4f1a\u81ea\u52a8\u5904\u7406\u4e0b\u8f7d\u548c\u6784\u5efa Node\uff0c\u4ee5\u5728\u6ca1\u6709\u6839\u6743\u9650\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c eslint\u3002</p>"},{"location":"advanced/","title":"\u9ad8\u7ea7\u529f\u80fd","text":"<p>Advanced features</p>"},{"location":"advanced/#\u8fc1\u79fb\u6a21\u5f0fmigration\u4e0b\u8fd0\u884c","title":"\u8fc1\u79fb\u6a21\u5f0f(migration)\u4e0b\u8fd0\u884c","text":"<p>Running in migration mode</p> \u4e2d\u6587\u82f1\u6587 <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u60a8\u5df2\u5b58\u5728\u94a9\u5b50\uff0c<code>pre-commit install</code> \u5c06\u4ee5\u8fc1\u79fb\u6a21\u5f0f\u5b89\u88c5\uff0c\u5b83\u4f1a\u540c\u65f6\u8fd0\u884c\u60a8\u73b0\u6709\u7684\u94a9\u5b50\u548c pre-commit \u7684\u94a9\u5b50\u3002</p> <p>\u8981\u7981\u7528\u6b64\u884c\u4e3a\uff0c\u8bf7\u5728 <code>install</code> \u547d\u4ee4\u4e2d\u4f20\u9012 <code>-f</code> / <code>--overwrite</code> \u53c2\u6570\u3002</p> <p>\u5982\u679c\u60a8\u51b3\u5b9a\u4e0d\u4f7f\u7528 pre-commit\uff0c<code>pre-commit uninstall</code> \u5c06\u6062\u590d\u60a8\u7684\u94a9\u5b50\u5230\u5b89\u88c5\u524d\u7684\u72b6\u6001\u3002</p> <p>By default, if you have existing hooks <code>pre-commit install</code> will install in a migration mode which runs both your existing hooks and hooks for pre-commit. To disable this behavior, pass <code>-f</code> / <code>--overwrite</code> to the <code>install</code> command. If you decide not to use pre-commit, <code>pre-commit uninstall</code> will restore your hooks to the state prior to installation.</p>"},{"location":"advanced/#\u6682\u65f6\u5173\u95ed\u94a9\u5b50","title":"\u6682\u65f6\u5173\u95ed\u94a9\u5b50","text":"<p>Temporarily disabling hooks</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0d\u662f\u6240\u6709\u7684\u94a9\u5b50\u90fd\u662f\u5b8c\u7f8e\u7684\uff0c\u6240\u4ee5\u6709\u65f6\u60a8\u53ef\u80fd\u9700\u8981\u8df3\u8fc7\u4e00\u4e2a\u6216\u591a\u4e2a\u94a9\u5b50\u7684\u6267\u884c\u3002pre-commit \u901a\u8fc7\u67e5\u8be2 <code>SKIP</code> \u73af\u5883\u53d8\u91cf\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002<code>SKIP</code> \u73af\u5883\u53d8\u91cf\u662f\u4e00\u4e2a\u7528\u9017\u53f7\u5206\u9694\u7684\u94a9\u5b50 ID \u5217\u8868\u3002\u8fd9\u5141\u8bb8\u60a8\u8df3\u8fc7\u5355\u4e2a\u94a9\u5b50\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 <code>--no-verify</code> \u8df3\u8fc7\u6574\u4e2a\u63d0\u4ea4\u3002</p> <pre><code>$ SKIP=flake8 git commit -m \"foo\"\n</code></pre> <p>Not all hooks are perfect so sometimes you may need to skip execution of one or more hooks. pre-commit solves this by querying a <code>SKIP</code> environment variable. The <code>SKIP</code> environment variable is a comma separated list of hook ids. This allows you to skip a single hook instead of <code>--no-verify</code>ing the entire commit.</p> <pre><code>$ SKIP=flake8 git commit -m \"foo\"\n</code></pre>"},{"location":"advanced/#\u9650\u5236\u94a9\u5b50\u5728\u67d0\u4e9b\u9636\u6bb5\u8fd0\u884c","title":"\u9650\u5236\u94a9\u5b50\u5728\u67d0\u4e9b\u9636\u6bb5\u8fd0\u884c","text":"<p>Confining hooks to run at certain stages</p> \u4e2d\u6587\u82f1\u6587 <p>pre-commit \u652f\u6301\u8bb8\u591a\u4e0d\u540c\u7c7b\u578b\u7684 <code>git</code> \u94a9\u5b50\uff08\u4e0d\u4ec5\u4ec5\u662f <code>pre-commit</code>\uff01\uff09\u3002</p> <p>\u94a9\u5b50\u7684\u63d0\u4f9b\u8005\u53ef\u4ee5\u901a\u8fc7\u5728 <code>.pre-commit-hooks.yaml</code> \u4e2d\u8bbe\u7f6e <code>stages</code> \u5c5e\u6027\u6765\u9009\u62e9\u4ed6\u4eec\u8fd0\u884c\u7684 git \u94a9\u5b50\u7c7b\u578b\u2014\u2014\u8fd9\u4e5f\u53ef\u4ee5\u88ab <code>.pre-commit-config.yaml</code> \u4e2d\u7684 <code>stages</code> \u8986\u76d6\u3002\u5982\u679c\u5728\u8fd9\u4e24\u4e2a\u5730\u65b9\u90fd\u6ca1\u6709\u8bbe\u7f6e <code>stages</code>\uff0c\u90a3\u4e48\u5c06\u4ece\u9876\u7ea7\u7684 <code>default_stages</code> \u9009\u9879\u4e2d\u83b7\u53d6\u9ed8\u8ba4\u503c\uff08\u9ed8\u8ba4\u4e3a\u6240\u6709\u9636\u6bb5\uff09\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5de5\u5177\u4f1a\u4e3a pre-commit \u652f\u6301\u7684\u6bcf\u4e2a\u94a9\u5b50\u7c7b\u578b\u542f\u7528\u3002</p> <p>\u65b0\u529f\u80fd 3.2.0\uff1a<code>stages</code> \u7684\u503c\u4e0e\u94a9\u5b50\u540d\u79f0\u5339\u914d\u3002\u4ee5\u524d\uff0c<code>commit</code>\u3001<code>push</code> \u548c <code>merge-commit</code> \u5206\u522b\u5bf9\u5e94 <code>pre-commit</code>\u3001<code>pre-push</code> \u548c <code>pre-merge-commit</code>\u3002</p> <p>\u901a\u8fc7 <code>stages: [manual]</code> \u8bbe\u7f6e\u7684 <code>manual</code> \u9636\u6bb5\u662f\u4e00\u4e2a\u7279\u6b8a\u9636\u6bb5\uff0c\u5b83\u4e0d\u4f1a\u88ab\u4efb\u4f55 <code>git</code> \u94a9\u5b50\u81ea\u52a8\u89e6\u53d1\u2014\u2014\u8fd9\u5728\u60a8\u60f3\u8981\u6dfb\u52a0\u4e00\u4e2a\u4e0d\u81ea\u52a8\u8fd0\u884c\u7684\u5de5\u5177\u65f6\u5f88\u6709\u7528\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528 <code>pre-commit run --hook-stage manual [hookid]</code> \u6309\u9700\u8fd0\u884c\u3002</p> <p>\u5982\u679c\u60a8\u662f\u5de5\u5177\u7684\u4f5c\u8005\uff0c\u901a\u5e38\u6700\u597d\u63d0\u4f9b\u4e00\u4e2a\u5408\u9002\u7684 <code>stages</code> \u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e00\u4e2a linter \u6216\u4ee3\u7801\u683c\u5f0f\u5316\u5de5\u5177\u6765\u8bf4\uff0c\u5408\u7406\u7684\u8bbe\u7f6e\u53ef\u80fd\u662f <code>stages: [pre-commit, pre-merge-commit, pre-push, manual]</code>\u3002</p> <p>\u8981\u4e3a\u7279\u5b9a\u7684 git \u94a9\u5b50\u5b89\u88c5 <code>pre-commit</code>\uff0c\u8bf7\u5411 <code>pre-commit install</code> \u4f20\u9012 <code>--hook-type</code>\u3002\u8fd9\u53ef\u4ee5\u591a\u6b21\u6307\u5b9a\uff0c\u4f8b\u5982\uff1a</p> <pre><code>$ pre-commit install --hook-type pre-commit --hook-type pre-push\npre-commit installed at .git/hooks/pre-commit\npre-commit installed at .git/hooks/pre-push\n</code></pre> <p>\u6b64\u5916\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u9876\u7ea7\u7684 <code>default_install_hook_types</code> \u6765\u6307\u5b9a\u4e00\u7ec4\u9ed8\u8ba4\u7684 git \u94a9\u5b50\u7c7b\u578b\u8fdb\u884c\u5b89\u88c5\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>default_install_hook_types: [pre-commit, pre-push, commit-msg]\n</code></pre> <pre><code>$ pre-commit  install\npre-commit installed at .git/hooks/pre-commit\npre-commit installed at .git/hooks/pre-push\npre-commit installed at .git/hooks/commit-msg\n</code></pre> <p>pre-commit supports many different types of <code>git</code> hooks (not just <code>pre-commit</code>!).</p> <p>Providers of hooks can select which git hooks they run on by setting the <code>stages</code> property in <code>.pre-commit-hooks.yaml</code> -- this can also be overridden by setting <code>stages</code> in <code>.pre-commit-config.yaml</code>.  If <code>stages</code> is not set in either of those places the default value will be pulled from the top-level <code>default_stages</code> option (which defaults to all stages).  By default, tools are enabled for every hook type that pre-commit supports.</p> <p>new in 3.2.0: The values of <code>stages</code> match the hook names.  Previously, <code>commit</code>, <code>push</code>, and <code>merge-commit</code> matched <code>pre-commit</code>, <code>pre-push</code>, and <code>pre-merge-commit</code> respectively.</p> <p>The <code>manual</code> stage (via <code>stages: [manual]</code>) is a special stage which will not be automatically triggered by any <code>git</code> hook -- this is useful if you want to add a tool which is not automatically run, but is run on demand using <code>pre-commit run --hook-stage manual [hookid]</code>.</p> <p>If you are authoring a tool, it is usually a good idea to provide an appropriate <code>stages</code> property.  For example a reasonable setting for a linter or code formatter would be <code>stages: [pre-commit, pre-merge-commit, pre-push, manual]</code>.</p> <p>To install <code>pre-commit</code> for particular git hooks, pass <code>--hook-type</code> to <code>pre-commit install</code>.  This can be specified multiple times such as:</p> <pre><code>$ pre-commit install --hook-type pre-commit --hook-type pre-push\npre-commit installed at .git/hooks/pre-commit\npre-commit installed at .git/hooks/pre-push\n</code></pre> <p>Additionally, one can specify a default set of git hook types to be installed for by setting the top-level <code>default_install_hook_types</code>.</p> <p>For example:</p> <pre><code>default_install_hook_types: [pre-commit, pre-push, commit-msg]\n</code></pre> <pre><code>$ pre-commit  install\npre-commit installed at .git/hooks/pre-commit\npre-commit installed at .git/hooks/pre-push\npre-commit installed at .git/hooks/commit-msg\n</code></pre>"},{"location":"advanced/#\u652f\u6301\u7684git\u94a9\u5b50","title":"\u652f\u6301\u7684git\u94a9\u5b50","text":"<p>Supported git hooks</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>commit-msg</li> <li>post-checkout</li> <li>post-commit</li> <li>post-merge</li> <li>post-rewrite</li> <li>pre-commit</li> <li>pre-merge-commit</li> <li>pre-push</li> <li>pre-rebase</li> <li>prepare-commit-msg</li> </ul>"},{"location":"advanced/#commit-msg","title":"commit-msg","text":"\u4e2d\u6587\u82f1\u6587 <p>git commit-msg \u6587\u6863 </p> <p><code>commit-msg</code> \u94a9\u5b50\u5c06\u4f20\u9012\u4e00\u4e2a\u6587\u4ef6\u540d\u53c2\u6570\u2014\u2014\u6b64\u6587\u4ef6\u5305\u542b\u8981\u9a8c\u8bc1\u7684\u5f53\u524d\u63d0\u4ea4\u6d88\u606f\u7684\u5185\u5bb9\u3002\u5982\u679c\u9000\u51fa\u7801\u975e\u96f6\uff0c\u63d0\u4ea4\u5c06\u88ab\u4e2d\u6b62\u3002</p> <p>git commit-msg docs</p> <p><code>commit-msg</code> hooks will be passed a single filename -- this file contains the current contents of the commit message to be validated.  The commit will be aborted if there is a nonzero exit code.</p>"},{"location":"advanced/#post-checkout","title":"post-checkout","text":"\u4e2d\u6587\u82f1\u6587 <p>\u65b0\u529f\u80fd 2.2.0</p> <p>git post-checkout \u6587\u6863 </p> <p><code>post-checkout</code> \u94a9\u5b50\u5728 <code>checkout</code> \u64cd\u4f5c\u4e4b\u540e\u8fd0\u884c\uff0c\u53ef\u4ee5\u7528\u6765\u8bbe\u7f6e\u6216\u7ba1\u7406\u4ed3\u5e93\u4e2d\u7684\u72b6\u6001\u3002</p> <p><code>post-checkout</code> \u94a9\u5b50\u4e0d\u64cd\u4f5c\u6587\u4ef6\uff0c\u6240\u4ee5\u5b83\u4eec\u5fc5\u987b\u8bbe\u7f6e\u4e3a <code>always_run: true</code>\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u603b\u662f\u88ab\u8df3\u8fc7\u3002</p> <p>\u73af\u5883\u53d8\u91cf\uff1a</p> <ul> <li><code>PRE_COMMIT_FROM_REF</code>: <code>post-checkout</code> git \u94a9\u5b50\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570</li> <li><code>PRE_COMMIT_TO_REF</code>: <code>post-checkout</code> git \u94a9\u5b50\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570</li> <li><code>PRE_COMMIT_CHECKOUT_TYPE</code>: <code>post-checkout</code> git \u94a9\u5b50\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570</li> </ul> <p>new in 2.2.0</p> <p>git post-checkout docs</p> <p>post-checkout hooks run after a <code>checkout</code> has occurred and can be used to set up or manage state in the repository.</p> <p><code>post-checkout</code> hooks do not operate on files so they must be set as <code>always_run: true</code> or they will always be skipped.</p> <p>environment variables: - <code>PRE_COMMIT_FROM_REF</code>: the first argument to the <code>post-checkout</code> git hook - <code>PRE_COMMIT_TO_REF</code>:  the second argument to the <code>post-checkout</code> git hook - <code>PRE_COMMIT_CHECKOUT_TYPE</code>: the third argument to the <code>post-checkout</code> git hook</p>"},{"location":"advanced/#post-commit","title":"post-commit","text":"\u4e2d\u6587\u82f1\u6587 <p>\u65b0\u529f\u80fd 2.4.0</p> <p>git post-commit \u6587\u6863 </p> <p><code>post-commit</code> \u94a9\u5b50\u5728\u63d0\u4ea4\u5df2\u7ecf\u6210\u529f\u4e4b\u540e\u8fd0\u884c\uff0c\u56e0\u6b64\u5b83\u4e0d\u80fd\u7528\u6765\u963b\u6b62\u63d0\u4ea4\u53d1\u751f\u3002</p> <p><code>post-commit</code> \u94a9\u5b50\u4e0d\u64cd\u4f5c\u6587\u4ef6\uff0c\u6240\u4ee5\u5b83\u4eec\u5fc5\u987b\u8bbe\u7f6e\u4e3a <code>always_run: true</code>\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u603b\u662f\u88ab\u8df3\u8fc7\u3002</p> <p>new in 2.4.0</p> <p>git post-commit docs</p> <p><code>post-commit</code> runs after the commit has already succeeded so it cannot be used to prevent the commit from happening.</p> <p><code>post-commit</code> hooks do not operate on files so they must be set as <code>always_run: true</code> or they will always be skipped.</p>"},{"location":"advanced/#post-merge","title":"post-merge","text":"\u4e2d\u6587\u82f1\u6587 <p>\u65b0\u529f\u80fd 2.11.0</p> <p>git post-merge \u6587\u6863 </p> <p><code>post-merge</code> \u5728 <code>git merge</code> \u64cd\u4f5c\u6210\u529f\u4e4b\u540e\u8fd0\u884c\u3002</p> <p><code>post-merge</code> \u94a9\u5b50\u4e0d\u64cd\u4f5c\u6587\u4ef6\uff0c\u6240\u4ee5\u5b83\u4eec\u5fc5\u987b\u8bbe\u7f6e\u4e3a <code>always_run: true</code>\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u603b\u662f\u88ab\u8df3\u8fc7\u3002</p> <p>\u73af\u5883\u53d8\u91cf\uff1a</p> <ul> <li><code>PRE_COMMIT_IS_SQUASH_MERGE</code>: <code>post-merge</code> git \u94a9\u5b50\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002</li> </ul> <p>new in 2.11.0</p> <p>git post-merge docs</p> <p><code>post-merge</code> runs after a successful <code>git merge</code>.</p> <p><code>post-merge</code> hooks do not operate on files so they must be set as <code>always_run: true</code> or they will always be skipped.</p> <p>environment variables: - <code>PRE_COMMIT_IS_SQUASH_MERGE</code>: the first argument to the <code>post-merge</code> git hook.</p>"},{"location":"advanced/#post-rewrite","title":"post-rewrite","text":"\u4e2d\u6587\u82f1\u6587 <p>new in 2.15.0</p> <p>git post-rewrite \u6587\u6863 </p> <p><code>post-rewrite</code> \u5728\u50cf <code>git commit --amend</code> \u6216 <code>git rebase</code> \u8fd9\u6837\u4fee\u6539\u5386\u53f2\u8bb0\u5f55\u7684 git \u547d\u4ee4\u4e4b\u540e\u8fd0\u884c\u3002</p> <p><code>post-rewrite</code> \u94a9\u5b50\u4e0d\u4f1a\u64cd\u4f5c\u6587\u4ef6\uff0c\u6240\u4ee5\u5b83\u4eec\u5fc5\u987b\u8bbe\u7f6e\u4e3a <code>always_run: true</code>\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u603b\u662f\u88ab\u8df3\u8fc7\u3002</p> <p>\u73af\u5883\u53d8\u91cf\uff1a</p> <ul> <li><code>PRE_COMMIT_REWRITE_COMMAND</code>: <code>post-rewrite</code> git \u94a9\u5b50\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002</li> </ul> <p>new in 2.15.0</p> <p>git post-rewrite docs</p> <p><code>post-rewrite</code> runs after a git command which modifies history such as <code>git commit --amend</code> or <code>git rebase</code>.</p> <p><code>post-rewrite</code> hooks do not operate on files so they must be set as <code>always_run: true</code> or they will always be skipped.</p> <p>environment variables:</p> <ul> <li><code>PRE_COMMIT_REWRITE_COMMAND</code>: the first argument to the <code>post-rewrite</code> git hook.</li> </ul>"},{"location":"advanced/#pre-commit","title":"pre-commit","text":"\u4e2d\u6587\u82f1\u6587 <p>git pre-commit \u6587\u6863 </p> <p><code>pre-commit</code> \u5728\u63d0\u4ea4\u6700\u7ec8\u786e\u5b9a\u4e4b\u524d\u88ab\u89e6\u53d1\uff0c\u4ee5\u5141\u8bb8\u5bf9\u6b63\u5728\u63d0\u4ea4\u7684\u4ee3\u7801\u8fdb\u884c\u68c0\u67e5\u3002\u5982\u679c\u5728\u63d0\u4ea4\u8fc7\u7a0b\u4e2d\u5bf9\u672a\u6682\u5b58\u7684\u66f4\u6539\u8fd0\u884c\u94a9\u5b50\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u63d0\u4ea4\u671f\u95f4\u51fa\u73b0\u8bef\u62a5\u548c\u6f0f\u62a5\u3002pre-commit \u4ec5\u5728\u6682\u5b58\u7684\u6587\u4ef6\u5185\u5bb9\u4e0a\u8fd0\u884c\uff0c\u901a\u8fc7\u5728\u8fd0\u884c\u94a9\u5b50\u65f6\u4e34\u65f6\u5b58\u50a8\u672a\u6682\u5b58\u7684\u66f4\u6539\u3002</p> <p>git pre-commit docs</p> <p><code>pre-commit</code> is triggered before the commit is finalized to allow checks on the code being committed.  Running hooks on unstaged changes can lead to both false-positives and false-negatives during committing.  pre-commit only runs on the staged contents of files by temporarily stashing the unstaged changes while running hooks.</p>"},{"location":"advanced/#pre-merge-commit","title":"pre-merge-commit","text":"\u4e2d\u6587\u82f1\u6587 <p>git pre-merge-commit \u6587\u6863 </p> <p><code>pre-merge-commit</code> \u5728\u5408\u5e76\u6210\u529f\u540e\u4f46\u521b\u5efa\u5408\u5e76\u63d0\u4ea4\u4e4b\u524d\u89e6\u53d1\u3002\u8fd9\u4e2a\u94a9\u5b50\u5728\u5408\u5e76\u7684\u6240\u6709\u6682\u5b58\u6587\u4ef6\u4e0a\u8fd0\u884c\u3002</p> <p>\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u81f3\u5c11 git 2.24 \u7248\u672c\u624d\u80fd\u4f7f\u7528\u8fd9\u4e2a\u94a9\u5b50\u3002</p> <p>git pre-merge-commit docs</p> <p><code>pre-merge-commit</code> fires after a merge succeeds but before the merge commit is created.  This hook runs on all staged files from the merge.</p> <p>Note that you need to be using at least git 2.24 for this hook.</p>"},{"location":"advanced/#pre-push","title":"pre-push","text":"\u4e2d\u6587\u82f1\u6587 <p>git pre-push \u6587\u6863 </p> <p><code>pre-push</code> \u5728\u6267\u884c <code>git push</code> \u65f6\u88ab\u89e6\u53d1\u3002</p> <p>\u73af\u5883\u53d8\u91cf\uff1a - <code>PRE_COMMIT_FROM_REF</code>: \u6b63\u5728\u88ab\u63a8\u9001\u5230\u7684\u4fee\u8ba2\u7248\u3002 - <code>PRE_COMMIT_TO_REF</code>: \u6b63\u5728\u88ab\u63a8\u9001\u5230\u8fdc\u7a0b\u7684\u672c\u5730\u4fee\u8ba2\u7248\u3002 - <code>PRE_COMMIT_REMOTE_NAME</code>: \u6b63\u5728\u63a8\u9001\u5230\u7684\u8fdc\u7a0b\u540d\u79f0\uff08\u4f8b\u5982 <code>origin</code>\uff09\u3002 - <code>PRE_COMMIT_REMOTE_URL</code>: \u6b63\u5728\u63a8\u9001\u5230\u7684\u8fdc\u7a0b\u7684 URL\uff08\u4f8b\u5982 <code>git@github.com:pre-commit/pre-commit</code>\uff09\u3002 - <code>PRE_COMMIT_REMOTE_BRANCH</code>: \u6211\u4eec\u6b63\u5728\u63a8\u9001\u5230\u7684\u8fdc\u7a0b\u5206\u652f\u7684\u540d\u79f0\uff08\u4f8b\u5982 <code>refs/heads/target-branch</code>\uff09\u3002 - <code>PRE_COMMIT_LOCAL_BRANCH</code>: \u6b63\u5728\u63a8\u9001\u5230\u8fdc\u7a0b\u7684\u672c\u5730\u5206\u652f\u7684\u540d\u79f0\uff08\u4f8b\u5982 <code>HEAD</code>\uff09\u3002</p> <p>git pre-push docs</p> <p><code>pre-push</code> is triggered on <code>git push</code>.</p> <p>environment variables: - <code>PRE_COMMIT_FROM_REF</code>: the revision that is being pushed to. - <code>PRE_COMMIT_TO_REF</code>: the local revision that is being pushed to the remote. - <code>PRE_COMMIT_REMOTE_NAME</code>: which remote is being pushed to (for example <code>origin</code>) - <code>PRE_COMMIT_REMOTE_URL</code>: the url of the remote that is being pushed to (for   example <code>git@github.com:pre-commit/pre-commit</code>) - <code>PRE_COMMIT_REMOTE_BRANCH</code>: the name of the remote branch to which we are    pushing (for example <code>refs/heads/target-branch</code>) - <code>PRE_COMMIT_LOCAL_BRANCH</code>: the name of the local branch that is being pushed   to the remote (for example <code>HEAD</code>)</p>"},{"location":"advanced/#pre-rebase","title":"pre-rebase","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5728\u7248\u672c 3.2.0 \u4e2d\u5f15\u5165\u7684\u65b0\u7279\u6027\uff1a</p> <p>git pre-rebase \u6587\u6863 </p> <p><code>pre-rebase</code> \u94a9\u5b50\u5728\u6267\u884c\u53d8\u57fa\u64cd\u4f5c\u4e4b\u524d\u88ab\u89e6\u53d1\u3002\u5982\u679c\u94a9\u5b50\u6267\u884c\u5931\u8d25\uff0c\u53ef\u4ee5\u53d6\u6d88\u53d8\u57fa\u64cd\u4f5c\u3002</p> <p><code>pre-rebase</code> \u94a9\u5b50\u4e0d\u64cd\u4f5c\u6587\u4ef6\uff0c\u56e0\u6b64\u5b83\u4eec\u5fc5\u987b\u8bbe\u7f6e\u4e3a <code>always_run: true</code>\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u603b\u662f\u88ab\u8df3\u8fc7\u3002</p> <p>\u73af\u5883\u53d8\u91cf\uff1a - <code>PRE_COMMIT_PRE_REBASE_UPSTREAM</code>\uff1a<code>pre-rebase</code> Git \u94a9\u5b50\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 - <code>PRE_COMMIT_PRE_REBASE_BRANCH</code>\uff1a<code>pre-rebase</code> Git \u94a9\u5b50\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002</p> <p>new in 3.2.0</p> <p>git pre-rebase docs</p> <p><code>pre-rebase</code> is triggered before a rebase occurs.  A hook failure can cancel a rebase from occurring.</p> <p><code>pre-rebase</code> hooks do not operate on files so they must be set as <code>always_run: true</code> or they will always be skipped.</p> <p>environment variables: - <code>PRE_COMMIT_PRE_REBASE_UPSTREAM</code>: the first argument to the <code>pre-rebase</code> git hook - <code>PRE_COMMIT_PRE_REBASE_BRANCH</code>: the second argument to the <code>pre-rebase</code> git hook.</p>"},{"location":"advanced/#prepare-commit-msg","title":"prepare-commit-msg","text":"\u4e2d\u6587\u82f1\u6587 <p><code>prepare-commit-msg</code> \u94a9\u5b50\u5728\u63d0\u4ea4\u4fe1\u606f\u7f16\u8f91\u5668\u542f\u52a8\u4e4b\u524d\u88ab\u8c03\u7528\uff0c\u5b83\u5c06\u63a5\u6536\u4e00\u4e2a\u6587\u4ef6\u540d\u53c2\u6570\u2014\u2014\u8fd9\u4e2a\u6587\u4ef6\u53ef\u80fd\u662f\u7a7a\u7684\uff0c\u6216\u8005\u5b83\u53ef\u80fd\u5305\u542b\u6765\u81ea <code>-m</code> \u53c2\u6570\u6216\u5176\u4ed6\u6a21\u677f\u7684\u63d0\u4ea4\u4fe1\u606f\u3002<code>prepare-commit-msg</code> \u94a9\u5b50\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u6539\u53d8\u5c06\u8981\u63d0\u4ea4\u7684\u5185\u5bb9\u3002\u94a9\u5b50\u53ef\u80fd\u9700\u8981\u68c0\u67e5 <code>GIT_EDITOR=:</code>\uff0c\u56e0\u4e3a\u8fd9\u8868\u793a\u4e0d\u4f1a\u542f\u52a8\u7f16\u8f91\u5668\u3002\u5982\u679c\u94a9\u5b50\u4ee5\u975e\u96f6\u72b6\u6001\u9000\u51fa\uff0c\u5219\u4f1a\u4e2d\u6b62\u63d0\u4ea4\u3002</p> <p>\u73af\u5883\u53d8\u91cf\uff1a</p> <ul> <li><code>PRE_COMMIT_COMMIT_MSG_SOURCE</code>\uff1a<code>prepare-commit-msg</code> Git \u94a9\u5b50\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570</li> <li><code>PRE_COMMIT_COMMIT_OBJECT_NAME</code>\uff1a<code>prepare-commit-msg</code> Git \u94a9\u5b50\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570</li> </ul> <p>git prepare-commit-msg docs</p> <p><code>prepare-commit-msg</code> hooks will be passed a single filename -- this file may be empty or it could contain the commit message from <code>-m</code> or from other templates.  <code>prepare-commit-msg</code> hooks can modify the contents of this file to change what will be committed.  A hook may want to check for <code>GIT_EDITOR=:</code> as this indicates that no editor will be launched.  If a hook exits nonzero, the commit will be aborted.</p> <p>environment variables: - <code>PRE_COMMIT_COMMIT_MSG_SOURCE</code>: the second argument to the   <code>prepare-commit-msg</code> git hook - <code>PRE_COMMIT_COMMIT_OBJECT_NAME</code>: the third argument to the   <code>prepare-commit-msg</code> git hook</p>"},{"location":"advanced/#\u7ed9\u94a9\u5b50\u4f20\u9012\u53c2\u6570","title":"\u7ed9\u94a9\u5b50\u4f20\u9012\u53c2\u6570","text":"<p>Passing arguments to hooks</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u94a9\u5b50\uff08hooks\uff09\u9700\u8981\u53c2\u6570\u624d\u80fd\u6b63\u786e\u8fd0\u884c\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 <code>.pre-commit-config.yaml</code> \u6587\u4ef6\u4e2d\u7684 <code>args</code> \u5c5e\u6027\u91cc\u6307\u5b9a\u53c2\u6570\u6765\u4f20\u9012\u9759\u6001\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>-   repo: https://github.com/PyCQA/flake8 \n    rev: 4.0.1\n    hooks:\n    -   id: flake8\n        args: [--max-line-length=131]\n</code></pre> <p>\u8fd9\u5c06\u4f1a\u628a <code>--max-line-length=131</code> \u53c2\u6570\u4f20\u9012\u7ed9 <code>flake8</code> \u5de5\u5177\u3002</p> <p>Sometimes hooks require arguments to run correctly. You can pass static arguments by specifying the <code>args</code> property in your <code>.pre-commit-config.yaml</code> as follows:</p> <pre><code>-   repo: https://github.com/PyCQA/flake8\n    rev: 4.0.1\n    hooks:\n    -   id: flake8\n        args: [--max-line-length=131]\n</code></pre> <p>This will pass <code>--max-line-length=131</code> to <code>flake8</code>.</p>"},{"location":"advanced/#\u94a9\u5b50\u4e2d\u7684\u53c2\u6570\u6a21\u5f0f","title":"\u94a9\u5b50\u4e2d\u7684\u53c2\u6570\u6a21\u5f0f","text":"<p>Arguments pattern in hooks</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u6b63\u5728\u7f16\u5199\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u94a9\u5b50\uff0c\u5219\u60a8\u7684\u94a9\u5b50\u5e94\u8be5\u9884\u671f\u63a5\u6536 <code>args</code> \u53c2\u6570\u503c\uff0c\u7136\u540e\u662f\u4e00\u7ec4\u5df2\u6682\u5b58\u7684\u6587\u4ef6\u5217\u8868\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a <code>.pre-commit-config.yaml</code> \u6587\u4ef6\uff1a</p> <pre><code>-   repo: https://github.com/path/to/your/hook/repo \n    rev: badf00ddeadbeef\n    hooks:\n    -   id: my-hook-script-id\n        args: [--myarg1=1, --myarg1=2]\n</code></pre> <p>\u5f53\u60a8\u4e0b\u6b21\u8fd0\u884c <code>pre-commit</code> \u65f6\uff0c\u5c06\u8c03\u7528\u60a8\u7684\u811a\u672c\uff1a</p> <pre><code>path/to/script-or-system-exe --myarg1=1 --myarg1=2 dir/file1 dir/file2 file3\n</code></pre> <p>\u5982\u679c <code>args</code> \u5c5e\u6027\u4e3a\u7a7a\u6216\u672a\u5b9a\u4e49\uff0c\u5c06\u8c03\u7528\u60a8\u7684\u811a\u672c\uff1a</p> <pre><code>path/to/script-or-system-exe dir/file1 dir/file2 file3\n</code></pre> <p>\u5728\u521b\u5efa\u672c\u5730\u94a9\u5b50\u65f6\uff0c\u6ca1\u6709\u5fc5\u8981\u5c06\u547d\u4ee4\u53c2\u6570\u653e\u5165 <code>args</code> \u4e2d\uff0c\u56e0\u4e3a\u6ca1\u6709\u4ec0\u4e48\u4e1c\u897f\u53ef\u4ee5\u8986\u76d6\u5b83\u4eec\u2014\u2014\u76f8\u53cd\uff0c\u76f4\u63a5\u628a\u53c2\u6570\u76f4\u63a5\u653e\u5165\u94a9\u5b50\u7684 <code>entry</code> \u4e2d\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>-   repo: local\n    hooks:\n    -   id: check-requirements\n        name: \u68c0\u67e5\u9700\u6c42\u6587\u4ef6\n        language: system\n        entry: python -m scripts.check_requirements --compare\n        files: ^requirements.*\\.txt$\n</code></pre> <p>If you are writing your own custom hook, your hook should expect to receive the <code>args</code> value and then a list of staged files.</p> <p>For example, assuming a <code>.pre-commit-config.yaml</code>:</p> <pre><code>-   repo: https://github.com/path/to/your/hook/repo\n    rev: badf00ddeadbeef\n    hooks:\n    -   id: my-hook-script-id\n        args: [--myarg1=1, --myarg1=2]\n</code></pre> <p>When you next run <code>pre-commit</code>, your script will be called:</p> <pre><code>path/to/script-or-system-exe --myarg1=1 --myarg1=2 dir/file1 dir/file2 file3\n</code></pre> <p>If the <code>args</code> property is empty or not defined, your script will be called:</p> <pre><code>path/to/script-or-system-exe dir/file1 dir/file2 file3\n</code></pre> <p>When creating local hooks, there's no reason to put command arguments into <code>args</code> as there is nothing which can override them -- instead put your arguments directly in the hook <code>entry</code>.</p> <p>For example:</p> <pre><code>-   repo: local\n    hooks:\n    -   id: check-requirements\n        name: check requirements files\n        language: system\n        entry: python -m scripts.check_requirements --compare\n        files: ^requirements.*\\.txt$\n</code></pre>"},{"location":"advanced/#\u672c\u5730\u4ed3\u5e93\u94a9\u5b50","title":"\u672c\u5730\u4ed3\u5e93\u94a9\u5b50","text":"<p>Repository local hooks</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ed3\u5e93\u672c\u5730\u94a9\u5b50\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u5f88\u6709\u7528\uff1a</p> <ul> <li>\u5f53\u811a\u672c\u4e0e\u4ed3\u5e93\u7d27\u5bc6\u76f8\u5173\uff0c\u5e76\u4e14\u5c06\u94a9\u5b50\u811a\u672c\u4e0e\u4ed3\u5e93\u4e00\u8d77\u5206\u53d1\u662f\u6709\u610f\u4e49\u7684\u3002</li> <li>\u94a9\u5b50\u9700\u8981\u7684\u72b6\u6001\u4ec5\u5b58\u5728\u4e8e\u4ed3\u5e93\u6784\u5efa\u4ea7\u7269\u4e2d\uff08\u4f8b\u5982\uff0c\u7528\u4e8e pylint \u7684\u5e94\u7528\u865a\u62df\u73af\u5883\uff09\u3002</li> <li>\u67d0\u4e2a linter \u7684\u5b98\u65b9\u4ed3\u5e93\u6ca1\u6709 pre-commit \u5143\u6570\u636e\u3002</li> </ul> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a <code>repo</code> \u4e3a\u54e8\u5175\u503c <code>local</code> \u6765\u914d\u7f6e\u4ed3\u5e93\u672c\u5730\u94a9\u5b50\u3002</p> <p>\u672c\u5730\u94a9\u5b50\u53ef\u4ee5\u4f7f\u7528\u652f\u6301 <code>additional_dependencies</code> \u7684\u4efb\u4f55\u8bed\u8a00\uff0c\u6216\u8005\u4f7f\u7528 <code>docker_image</code> / <code>fail</code> / <code>pygrep</code> / <code>script</code> / <code>system</code>\u3002 \u8fd9\u4f7f\u60a8\u80fd\u591f\u5b89\u88c5\u4ee5\u524d\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u955c\u50cf\u4ed3\u5e93\u7684\u4e1c\u897f\u3002</p> <p>\u4e00\u4e2a <code>local</code> \u94a9\u5b50\u5fc5\u987b\u5b9a\u4e49 <code>id</code>, <code>name</code>, <code>language</code>, <code>entry</code>, \u548c <code>files</code> / <code>types</code> \u5982\u5728 \u521b\u5efa\u65b0\u94a9\u5b50 \u4e0b\u6240\u6307\u5b9a\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u5e26\u6709\u4e00\u4e9b <code>local</code> \u94a9\u5b50\u7684\u793a\u4f8b\u914d\u7f6e\uff1a</p> <pre><code>-   repo: local\n    hooks:\n    -   id: pylint\n        name: pylint\n        entry: pylint\n        language: system\n        types: [python]\n        require_serial: true\n    -   id: check-x\n        name: \u68c0\u67e5 X\n        entry: ./bin/check-x.sh\n        language: script\n        files: \\.x$\n    -   id: scss-lint\n        name: scss-lint\n        entry: scss-lint\n        language: ruby\n        language_version: 2.1.5\n        types: [scss]\n        additional_dependencies: ['scss_lint:0.52.0']\n</code></pre> <p>Repository-local hooks are useful when:</p> <ul> <li>The scripts are tightly coupled to the repository and it makes sense to   distribute the hook scripts with the repository.</li> <li>Hooks require state that is only present in a built artifact of your   repository (such as your app's virtualenv for pylint).</li> <li>The official repository for a linter doesn't have the pre-commit metadata.</li> </ul> <p>You can configure repository-local hooks by specifying the <code>repo</code> as the sentinel <code>local</code>.</p> <p>local hooks can use any language which supports <code>additional_dependencies</code> or <code>docker_image</code> / <code>fail</code> / <code>pygrep</code> / <code>script</code> / <code>system</code>. This enables you to install things which previously would require a trivial mirror repository.</p> <p>A <code>local</code> hook must define <code>id</code>, <code>name</code>, <code>language</code>, <code>entry</code>, and <code>files</code> / <code>types</code> as specified under Creating new hooks.</p> <p>Here's an example configuration with a few <code>local</code> hooks:</p> <pre><code>-   repo: local\n    hooks:\n    -   id: pylint\n        name: pylint\n        entry: pylint\n        language: system\n        types: [python]\n        require_serial: true\n    -   id: check-x\n        name: Check X\n        entry: ./bin/check-x.sh\n        language: script\n        files: \\.x$\n    -   id: scss-lint\n        name: scss-lint\n        entry: scss-lint\n        language: ruby\n        language_version: 2.1.5\n        types: [scss]\n        additional_dependencies: ['scss_lint:0.52.0']\n</code></pre>"},{"location":"advanced/#\u5185\u7f6e\u94a9\u5b50","title":"\u5185\u7f6e\u94a9\u5b50","text":"<p>meta hooks</p> \u4e2d\u6587\u82f1\u6587 <p><code>pre-commit</code> \u63d0\u4f9b\u4e86\u51e0\u4e2a\u94a9\u5b50\uff0c\u8fd9\u4e9b\u94a9\u5b50\u5bf9\u4e8e\u68c0\u67e5 pre-commit \u914d\u7f6e\u672c\u8eab\u975e\u5e38\u6709\u7528\u3002\u8fd9\u4e9b\u94a9\u5b50\u53ef\u4ee5\u4f7f\u7528 <code>repo: meta</code> \u6765\u542f\u7528\u3002</p> <pre><code>-   repo: meta\n    hooks:\n    -   id: ...\n</code></pre> <p>\u5f53\u524d\u53ef\u7528\u7684 <code>meta</code> \u94a9\u5b50\uff1a</p> \u914d\u7f6e\u9879 \u63cf\u8ff0 <code>check-hooks-apply</code> \u786e\u4fdd\u914d\u7f6e\u7684\u94a9\u5b50\u81f3\u5c11\u9002\u7528\u4e8e\u4ed3\u5e93\u4e2d\u7684\u4e00\u4e2a\u6587\u4ef6\u3002 <code>check-useless-excludes</code> \u786e\u4fdd <code>exclude</code> \u6307\u4ee4\u9002\u7528\u4e8e\u4ed3\u5e93\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u6587\u4ef6\u3002 <code>identity</code> \u4e00\u4e2a\u7b80\u5355\u7684\u94a9\u5b50\uff0c\u5b83\u6253\u5370\u4f20\u7ed9\u5b83\u7684\u6240\u6709\u53c2\u6570\uff0c\u5bf9\u8c03\u8bd5\u5f88\u6709\u7528\u3002 <p><code>pre-commit</code> provides several hooks which are useful for checking the pre-commit configuration itself.  These can be enabled using <code>repo: meta</code>.</p> <pre><code>-   repo: meta\n    hooks:\n    -   id: ...\n</code></pre> <p>The currently available <code>meta</code> hooks:</p> <pre><code>=r=\n    =c= [`check-hooks-apply`](_#meta-check_hooks_apply)\n    =c= ensures that the configured hooks apply to at least one file in the\n        repository.\n=r=\n    =c= [`check-useless-excludes`](_#meta-check_useless_excludes)\n    =c= ensures that `exclude` directives apply to _any_ file in the\n        repository.\n=r=\n    =c= [`identity`](_#meta-identity)\n    =c= a simple hook which prints all arguments passed to it, useful for\n        debugging.\n</code></pre>"},{"location":"advanced/#\u81ea\u52a8\u542f\u7528\u5b58\u50a8\u5e93\u7684\u9884\u63d0\u4ea4","title":"\u81ea\u52a8\u542f\u7528\u5b58\u50a8\u5e93\u7684\u9884\u63d0\u4ea4","text":"<p>automatically enabling pre-commit on repositories</p> \u4e2d\u6587\u82f1\u6587 <p><code>pre-commit init-templatedir</code> \u53ef\u7528\u4e8e\u8bbe\u7f6e <code>git</code> \u7684 <code>init.templateDir</code> \u9009\u9879\u7684\u9aa8\u67b6\u3002\u8fd9\u610f\u5473\u7740\u4efb\u4f55\u65b0\u514b\u9686\u7684\u4ed3\u5e93\u5c06\u81ea\u52a8\u8bbe\u7f6e\u94a9\u5b50\uff0c\u65e0\u9700\u8fd0\u884c <code>pre-commit install</code>\u3002</p> <p>\u8981\u914d\u7f6e\uff0c\u8bf7\u9996\u5148\u8bbe\u7f6e <code>git</code> \u7684 <code>init.templateDir</code>\u2014\u2014\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4f7f\u7528 <code>~/.git-template</code> \u4f5c\u4e3a\u6211\u7684\u6a21\u677f\u76ee\u5f55\u3002</p> <pre><code>$ git config --global init.templateDir ~/.git-template\n$ pre-commit init-templatedir ~/.git-template\npre-commit installed at /home/asottile/.git-template/hooks/pre-commit\n</code></pre> <p>\u73b0\u5728\uff0c\u6bcf\u5f53\u60a8\u514b\u9686\u4e00\u4e2a\u542f\u7528\u4e86 pre-commit \u7684\u4ed3\u5e93\u65f6\uff0c\u94a9\u5b50\u5df2\u7ecf\u88ab\u8bbe\u7f6e\u597d\u4e86\uff01</p> <pre><code>$ git clone -q git@github.com:asottile/pyupgrade\n$ cd pyupgrade\n$ git commit --allow-empty -m 'Hello world!'\nCheck docstring is first.............................(no files to check)Skipped\nCheck Yaml...........................................(no files to check)Skipped\nDebug Statements (Python)............................(no files to check)Skipped\n...\n</code></pre> <p><code>init-templatedir</code> \u4f7f\u7528\u4e86 <code>pre-commit install</code> \u7684 <code>--allow-missing-config</code> \u9009\u9879\uff0c\u56e0\u6b64\u6ca1\u6709\u914d\u7f6e\u7684\u4ed3\u5e93\u5c06\u88ab\u8df3\u8fc7\uff1a</p> <pre><code>$ git init sample\nInitialized empty Git repository in /tmp/sample/.git/\n$ cd sample\n$ git commit --allow-empty -m 'Initial commit'\n`.pre-commit-config.yaml` config file not found. Skipping `pre-commit`.\n[main (root-commit) d1b39c1] Initial commit\n</code></pre> <p>\u8981\u4ecd\u7136\u9700\u8981\u9009\u62e9\u52a0\u5165\uff0c\u4f46\u63d0\u793a\u7528\u6237\u8bbe\u7f6e pre-commit\uff0c\u4f7f\u7528\u5982\u4e0b\u7684\u6a21\u677f\u94a9\u5b50\uff08\u4f8b\u5982\u5728 <code>~/.git-template/hooks/pre-commit</code> \u4e2d\uff09\u3002</p> <pre><code>#!/usr/bin/env bash\nif [ -f .pre-commit-config.yaml ]; then\n    echo 'pre-commit configuration detected, but `pre-commit install` was never run' 1&gt;&amp;2\n    exit 1\nfi\n</code></pre> <p>\u8fd9\u6837\uff0c\u5982\u679c\u5fd8\u8bb0\u8fd0\u884c <code>pre-commit install</code>\uff0c\u5728\u63d0\u4ea4\u65f6\u4f1a\u4ea7\u751f\u9519\u8bef\uff1a</p> <pre><code>$ git clone -q https://github.com/asottile/pyupgrade \n$ cd pyupgrade/\n$ git commit -m 'foo'\npre-commit configuration detected, but `pre-commit install` was never run\n</code></pre> <p><code>pre-commit init-templatedir</code> can be used to set up a skeleton for <code>git</code>'s <code>init.templateDir</code> option.  This means that any newly cloned repository will automatically have the hooks set up without the need to run <code>pre-commit install</code>.</p> <p>To configure, first set <code>git</code>'s <code>init.templateDir</code> -- in this example I'm using <code>~/.git-template</code> as my template directory.</p> <pre><code>$ git config --global init.templateDir ~/.git-template\n$ pre-commit init-templatedir ~/.git-template\npre-commit installed at /home/asottile/.git-template/hooks/pre-commit\n</code></pre> <p>Now whenever you clone a pre-commit enabled repo, the hooks will already be set up!</p> <pre><code>$ git clone -q git@github.com:asottile/pyupgrade\n$ cd pyupgrade\n$ git commit --allow-empty -m 'Hello world!'\nCheck docstring is first.............................(no files to check)Skipped\nCheck Yaml...........................................(no files to check)Skipped\nDebug Statements (Python)............................(no files to check)Skipped\n...\n</code></pre> <p><code>init-templatedir</code> uses the <code>--allow-missing-config</code> option from <code>pre-commit install</code> so repos without a config will be skipped:</p> <pre><code>$ git init sample\nInitialized empty Git repository in /tmp/sample/.git/\n$ cd sample\n$ git commit --allow-empty -m 'Initial commit'\n`.pre-commit-config.yaml` config file not found. Skipping `pre-commit`.\n[main (root-commit) d1b39c1] Initial commit\n</code></pre> <p>To still require opt-in, but prompt the user to set up pre-commit use a template hook as follows (for example in <code>~/.git-template/hooks/pre-commit</code>).</p> <pre><code>#!/usr/bin/env bash\nif [ -f .pre-commit-config.yaml ]; then\n    echo 'pre-commit configuration detected, but `pre-commit install` was never run' 1&gt;&amp;2\n    exit 1\nfi\n</code></pre> <p>With this, a forgotten <code>pre-commit install</code> produces an error on commit:</p> <pre><code>$ git clone -q https://github.com/asottile/pyupgrade\n$ cd pyupgrade/\n$ git commit -m 'foo'\npre-commit configuration detected, but `pre-commit install` was never run\n</code></pre>"},{"location":"advanced/#\u6839\u636e\u6587\u4ef6\u7c7b\u578b\u8fc7\u6ee4","title":"\u6839\u636e\u6587\u4ef6\u7c7b\u578b\u8fc7\u6ee4","text":"<p>Filtering files with types</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f7f\u7528 <code>types</code> \u8fdb\u884c\u8fc7\u6ee4\u76f8\u6bd4\u4f20\u7edf\u7684\u4f7f\u7528 <code>files</code> \u8fc7\u6ee4\u6709\u591a\u4e2a\u4f18\u52bf\uff1a</p> <ul> <li>\u4e0d\u9700\u8981\u5bb9\u6613\u51fa\u9519\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002</li> <li>\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u7684 shebang\uff08\u5373\u4f7f\u662f\u6ca1\u6709\u6269\u5c55\u540d\u7684\u6587\u4ef6\uff09\u8fdb\u884c\u5339\u914d\u3002</li> <li>\u53ef\u4ee5\u8f7b\u677e\u5ffd\u7565\u7b26\u53f7\u94fe\u63a5/\u5b50\u6a21\u5757\u3002</li> </ul> <p><code>types</code> \u662f\u6309\u94a9\u5b50\u6307\u5b9a\u4e3a\u6807\u7b7e\u6570\u7ec4\u3002\u8fd9\u4e9b\u6807\u7b7e\u662f\u901a\u8fc7 identify \u5e93\u7684\u4e00\u7ec4\u542f\u53d1\u5f0f\u65b9\u6cd5\u53d1\u73b0\u7684\u3002\u9009\u62e9 <code>identify</code> \u662f\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u5c0f\u578b\u7684\u3001\u53ef\u79fb\u690d\u7684\u3001\u7eaf Python \u5e93\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e9b <code>identify</code> \u5e38\u89c1\u7684\u6807\u7b7e\uff1a</p> <ul> <li><code>file</code></li> <li><code>symlink</code></li> <li><code>directory</code> - \u5728 pre-commit \u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u8fd9\u5c06\u662f\u5b50\u6a21\u5757</li> <li><code>executable</code> - \u6587\u4ef6\u662f\u5426\u8bbe\u7f6e\u4e86\u53ef\u6267\u884c\u4f4d</li> <li><code>text</code> - \u6587\u4ef6\u662f\u5426\u770b\u8d77\u6765\u50cf\u6587\u672c\u6587\u4ef6</li> <li><code>binary</code> - \u6587\u4ef6\u662f\u5426\u770b\u8d77\u6765\u50cf\u4e8c\u8fdb\u5236\u6587\u4ef6</li> <li>\u6309\u6269\u5c55\u540d/\u547d\u540d\u7ea6\u5b9a\u7684\u6807\u7b7e</li> <li>\u6309 shebang (<code>#!</code>) \u7684\u6807\u7b7e</li> </ul> <p>\u8981\u53d1\u73b0\u4efb\u4f55\u6587\u4ef6\u5728\u78c1\u76d8\u4e0a\u7684\u7c7b\u578b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>identify</code> \u7684\u547d\u4ee4\u884c\u754c\u9762\uff1a</p> <pre><code>$ identify-cli setup.py\n[\"file\", \"non-executable\", \"python\", \"text\"]\n$ identify-cli some-random-file\n[\"file\", \"non-executable\", \"text\"]\n$ identify-cli --filename-only some-random-file; echo $?\n1\n</code></pre> <p>\u5982\u679c\u60a8\u4f7f\u7528\u7684\u6587\u4ef6\u6269\u5c55\u540d\u4e0d\u53d7\u652f\u6301\uff0c\u8bf7\u63d0\u4ea4\u4e00\u4e2a\u62c9\u53d6\u8bf7\u6c42\uff01</p> <p><code>types</code>\u3001<code>types_or</code> \u548c <code>files</code> \u5728\u8fc7\u6ee4\u65f6\u4f1a\u4e0e <code>AND</code> \u4e00\u8d77\u8bc4\u4f30\u3002<code>types</code> \u5185\u7684\u6807\u7b7e\u4e5f\u4f7f\u7528 <code>AND</code> \u8bc4\u4f30\u3002</p> <p>2.9.0 \u7248\u672c\u65b0\u529f\u80fd\uff1a<code>types_or</code> \u5185\u7684\u6807\u7b7e\u4f7f\u7528 <code>OR</code> \u8bc4\u4f30\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>    files: ^foo/\n    types: [file, python]\n</code></pre> <p>\u5c06\u5339\u914d\u6587\u4ef6 <code>foo/1.py</code>\uff0c\u4f46\u4e0d\u4f1a\u5339\u914d <code>setup.py</code>\u3002</p> <p>\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>    files: ^foo/\n    types_or: [javascript, jsx, ts, tsx]\n</code></pre> <p>\u5c06\u5339\u914d <code>foo/bar.js</code> / <code>foo/bar.jsx</code> / <code>foo/bar.ts</code> / <code>foo/bar.tsx</code> \u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u4f46\u4e0d\u4f1a\u5339\u914d <code>baz.js</code>\u3002</p> <p>\u5982\u679c\u60a8\u60f3\u5339\u914d\u5728\u4f7f\u7528\u73b0\u6709\u94a9\u5b50\u65f6\u672a\u5305\u542b\u5728 <code>type</code> \u4e2d\u7684\u6587\u4ef6\u8def\u5f84\uff0c\u5219\u9700\u8981\u56de\u9000\u5230\u4ec5\u4f7f\u7528 <code>files</code> \u5339\u914d\uff0c\u901a\u8fc7\u8986\u76d6 <code>types</code> \u8bbe\u7f6e\u3002\u4ee5\u4e0b\u662f\u4f7f\u7528 <code>check-json</code> \u5bf9\u975e JSON \u6587\u4ef6\u8fdb\u884c\u5339\u914d\u7684\u793a\u4f8b\uff1a</p> <pre><code>    -   id: check-json\n        types: [file]  # \u8986\u76d6 `types: [json]`\n        files: \\.(json|myext)$\n</code></pre> <p>\u6587\u4ef6\u4e5f\u53ef\u4ee5\u901a\u8fc7 shebang \u5339\u914d\u3002\u4f7f\u7528 <code>types: python</code> \u65f6\uff0c\u4ee5 <code>#!/usr/bin/env python3</code> \u5f00\u59cb\u7684 <code>exe</code> \u4e5f\u5c06\u88ab\u5339\u914d\u3002</p> <p>\u4e0e <code>files</code> \u548c <code>exclude</code> \u4e00\u6837\uff0c\u5982\u679c\u9700\u8981\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>exclude_types</code> \u6392\u9664\u7c7b\u578b\u3002</p> <p>Filtering with <code>types</code> provides several advantages over traditional filtering with <code>files</code>.</p> <ul> <li>no error-prone regular expressions</li> <li>files can be matched by their shebang (even when extensionless)</li> <li>symlinks / submodules can be easily ignored</li> </ul> <p><code>types</code> is specified per hook as an array of tags.  The tags are discovered through a set of heuristics by the identify library.  <code>identify</code> was chosen as it is a small portable pure python library.</p> <p>Some of the common tags you'll find from identify:</p> <ul> <li><code>file</code></li> <li><code>symlink</code></li> <li><code>directory</code> - in the context of pre-commit this will be a submodule</li> <li><code>executable</code> - whether the file has the executable bit set</li> <li><code>text</code> - whether the file looks like a text file</li> <li><code>binary</code> - whether the file looks like a binary file</li> <li>tags by extension / naming convention</li> <li>tags by shebang (<code>#!</code>)</li> </ul> <p>To discover the type of any file on disk, you can use <code>identify</code>'s cli:</p> <pre><code>$ identify-cli setup.py\n[\"file\", \"non-executable\", \"python\", \"text\"]\n$ identify-cli some-random-file\n[\"file\", \"non-executable\", \"text\"]\n$ identify-cli --filename-only some-random-file; echo $?\n1\n</code></pre> <p>If a file extension you use is not supported, please submit a pull request!</p> <p><code>types</code>, <code>types_or</code>, and <code>files</code> are evaluated together with <code>AND</code> when filtering.  Tags within <code>types</code> are also evaluated using <code>AND</code>.</p> <p>new in 2.9.0: Tags within <code>types_or</code> are evaluated using <code>OR</code>.</p> <p>For example:</p> <pre><code>    files: ^foo/\n    types: [file, python]\n</code></pre> <p>will match a file <code>foo/1.py</code> but will not match <code>setup.py</code>.</p> <p>Another example:</p> <pre><code>    files: ^foo/\n    types_or: [javascript, jsx, ts, tsx]\n</code></pre> <p>will match any of <code>foo/bar.js</code> / <code>foo/bar.jsx</code> / <code>foo/bar.ts</code> / <code>foo/bar.tsx</code> but not <code>baz.js</code>.</p> <p>If you want to match a file path that isn't included in a <code>type</code> when using an existing hook you'll need to revert back to <code>files</code> only matching by overriding the <code>types</code> setting.  Here's an example of using <code>check-json</code> against non-json files:</p> <pre><code>    -   id: check-json\n        types: [file]  # override `types: [json]`\n        files: \\.(json|myext)$\n</code></pre> <p>Files can also be matched by shebang.  With <code>types: python</code>, an <code>exe</code> starting with <code>#!/usr/bin/env python3</code> will also be matched.</p> <p>As with <code>files</code> and <code>exclude</code>, you can also exclude types if necessary using <code>exclude_types</code>.</p>"},{"location":"advanced/#\u6b63\u5219\u8868\u8fbe\u5f0f","title":"\u6b63\u5219\u8868\u8fbe\u5f0f","text":"<p>Regular expressions</p> \u4e2d\u6587\u82f1\u6587 <p>\u6a21\u5f0f <code>files</code> \u548c <code>exclude</code> \u4f7f\u7528\u7684\u662f Python \u7684 \u6b63\u5219\u8868\u8fbe\u5f0f\uff0c \u5e76\u901a\u8fc7 <code>re.search</code> \u8fdb\u884c\u5339\u914d\u3002</p> <p>\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Python \u6b63\u5219\u8868\u8fbe\u5f0f\u652f\u6301\u7684\u4efb\u4f55\u7279\u6027\u3002</p> <p>\u5982\u679c\u60a8\u53d1\u73b0\u7531\u4e8e\u6392\u9664/\u5305\u542b\u7684\u9879\u8fc7\u591a\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u53d8\u5f97\u590d\u6742\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 \u8be6\u7ec6\u6a21\u5f0f\u3002\u53ef\u4ee5\u901a\u8fc7 YAML \u7684\u591a\u884c\u5b57\u9762\u91cf\u548c <code>(?x)</code> \u6b63\u5219\u6807\u5fd7\u6765\u542f\u7528\u6b64\u6a21\u5f0f\u3002</p> <pre><code># ...\n    -   id: my-hook\n        exclude: |\n            (?x)^(\n                path/to/file1.py|\n                path/to/file2.py|\n                path/to/file3.py\n            )$\n</code></pre> <p>The patterns for <code>files</code> and <code>exclude</code> are python regular expressions and are matched with <code>re.search</code>.</p> <p>As such, you can use any of the features that python regexes support.</p> <p>If you find that your regular expression is becoming unwieldy due to a long list of excluded / included things, you may find a verbose regular expression useful.  One can enable this with yaml's multiline literals and the <code>(?x)</code> regex flag.</p> <pre><code># ...\n    -   id: my-hook\n        exclude: |\n            (?x)^(\n                path/to/file1.py|\n                path/to/file2.py|\n                path/to/file3.py\n            )$\n</code></pre>"},{"location":"advanced/#\u8986\u76d6\u8bed\u8a00\u7248\u672c","title":"\u8986\u76d6\u8bed\u8a00\u7248\u672c","text":"<p>Overriding language version</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u65f6\u60a8\u53ea\u60f3\u5728\u7279\u5b9a\u7248\u672c\u7684\u8bed\u8a00\u4e0a\u8fd0\u884c\u94a9\u5b50\u3002\u5bf9\u4e8e\u6bcf\u79cd\u8bed\u8a00\uff0c\u5b83\u4eec\u9ed8\u8ba4\u4f7f\u7528\u7cfb\u7edf\u5b89\u88c5\u7684\u8bed\u8a00\uff08\u4f8b\u5982\uff0c\u5982\u679c\u6211\u6b63\u5728\u8fd0\u884c <code>python3.7</code> \u4e14\u94a9\u5b50\u6307\u5b9a <code>python</code>\uff0c\u5219 pre-commit \u4f1a\u4f7f\u7528 <code>python3.7</code> \u8fd0\u884c\u94a9\u5b50\uff09\u3002\u6709\u65f6\u60a8\u53ef\u80fd\u4e0d\u60f3\u4f7f\u7528\u9ed8\u8ba4\u7684\u7cfb\u7edf\u5b89\u88c5\u7248\u672c\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e <code>language_version</code> \u9010\u94a9\u5b50\u8986\u76d6\u6b64\u8bbe\u7f6e\u3002</p> <pre><code>-   repo: https://github.com/pre-commit/mirrors-scss-lint\n    rev: v0.54.0\n    hooks:\n    -   id: scss-lint\n        language_version: 2.1.5\n</code></pre> <p>\u8fd9\u544a\u8bc9 pre-commit \u4f7f\u7528 Ruby <code>2.1.5</code> \u6765\u8fd0\u884c <code>scss-lint</code> \u94a9\u5b50\u3002</p> <p>\u4ee5\u4e0b\u662f\u7279\u5b9a\u8bed\u8a00\u7684\u6709\u6548\u503c\uff1a</p> <ul> <li>python: \u4f7f\u7528\u60a8\u7cfb\u7edf\u4e2d\u5b89\u88c5\u7684\u4efb\u4f55 Python \u89e3\u91ca\u5668\u3002\u8be5\u53c2\u6570\u7684\u503c\u4f5c\u4e3a <code>-p</code> \u4f20\u9012\u7ed9 <code>virtualenv</code>\u3002<ul> <li>\u5728 Windows \u4e0a\uff0c   pep394 \u540d\u79f0\u5c06\u88ab\u8f6c\u6362\u4e3a py \u542f\u52a8\u5668\u8c03\u7528\u4ee5\u5b9e\u73b0\u53ef\u79fb\u690d\u6027\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u5728 Windows \u4e0a\uff0c\u4e5f\u5e94\u7ee7\u7eed\u4f7f\u7528 <code>python3</code> (<code>py -3</code>) \u6216 <code>python3.6</code> (<code>py -3.6</code>)\u3002</li> </ul> </li> <li>node: \u53c2\u89c1 nodeenv\u3002</li> <li>ruby: \u53c2\u89c1 ruby-build\u3002</li> <li>\u5728 2.21.0 \u4e2d\u65b0\u589e rust: <code>language_version</code> \u88ab\u4f20\u9012\u7ed9 <code>rustup</code>\u3002</li> <li>\u5728 3.0.0 \u4e2d\u65b0\u589e golang: \u4f7f\u7528 go.dev/dl \u4e0a\u7684\u7248\u672c\uff0c\u4f8b\u5982 <code>1.19.5</code>\u3002</li> </ul> <p>\u60a8\u53ef\u4ee5\u5728\u914d\u7f6e\u7684 \u9876\u5c42 \u8bbe\u7f6e <code>default_language_version</code> \u6765\u63a7\u5236\u6240\u6709\u94a9\u5b50\u7684\u8bed\u8a00\u9ed8\u8ba4\u7248\u672c\u3002</p> <pre><code>default_language_version:\n    # \u5f3a\u5236\u6240\u6709\u672a\u6307\u5b9a\u7684 Python \u94a9\u5b50\u8fd0\u884c python3\n    python: python3\n    # \u5f3a\u5236\u6240\u6709\u672a\u6307\u5b9a\u7684 Ruby \u94a9\u5b50\u8fd0\u884c Ruby 2.1.5\n    ruby: 2.1.5\n</code></pre> <p>Sometimes you only want to run the hooks on a specific version of the language. For each language, they default to using the system installed language (So for example if I\u2019m running <code>python3.7</code> and a hook specifies <code>python</code>, pre-commit will run the hook using <code>python3.7</code>). Sometimes you don\u2019t want the default system installed version so you can override this on a per-hook basis by setting the <code>language_version</code>.</p> <pre><code>-   repo: https://github.com/pre-commit/mirrors-scss-lint\n    rev: v0.54.0\n    hooks:\n    -   id: scss-lint\n        language_version: 2.1.5\n</code></pre> <p>This tells pre-commit to use ruby <code>2.1.5</code> to run the <code>scss-lint</code> hook.</p> <p>Valid values for specific languages are listed below: - python: Whatever system installed python interpreters you have. The value of   this argument is passed as the <code>-p</code> to <code>virtualenv</code>.     - on windows the       pep394 name will be       translated into a py launcher call for portability.  So continue to use       names like <code>python3</code> (<code>py -3</code>) or <code>python3.6</code> (<code>py -3.6</code>) even on       windows. - node: See nodeenv. - ruby: See ruby-build. - new in 2.21.0 rust: <code>language_version</code> is passed to <code>rustup</code> - new in 3.0.0 golang: use the versions on go.dev/dl such as <code>1.19.5</code></p> <p>you can set <code>default_language_version</code> at the top level in your configuration to control the default versions across all hooks of a language.</p> <pre><code>default_language_version:\n    # force all unspecified python hooks to run python3\n    python: python3\n    # force all unspecified ruby hooks to run ruby 2.1.5\n    ruby: 2.1.5\n</code></pre>"},{"location":"advanced/#\u6807\u8bb0\u4f60\u7684\u5b58\u50a8\u5e93","title":"\u6807\u8bb0\u4f60\u7684\u5b58\u50a8\u5e93","text":"<p>badging your repository</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u4ee5\u5728\u60a8\u7684\u4ed3\u5e93\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5fbd\u7ae0\uff0c\u5411\u8d21\u732e\u8005/\u7528\u6237\u5c55\u793a\u60a8\u4f7f\u7528 pre-commit\uff01</p> <p></p> <ul> <li>Markdown:</li> </ul> <pre><code>[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit)](https://github.com/pre-commit/pre-commit)\n</code></pre> <ul> <li>HTML:</li> </ul> <pre><code>&lt;a href=\"https://github.com/pre-commit/pre-commit\"&gt;&lt;img src=\"https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit\" alt=\"pre-commit\" style=\"max-width:100%;\"&gt;&lt;/a&gt;\n</code></pre> <ul> <li>reStructuredText:</li> </ul> <pre><code>.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n</code></pre> <ul> <li>AsciiDoc:</li> </ul> <pre><code>image:https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit[pre-commit, link=https://github.com/pre-commit/pre-commit]\n</code></pre> <p>you can add a badge to your repository to show your contributors / users that you use pre-commit!</p> <p></p> <ul> <li>Markdown:</li> </ul> <pre><code>[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit)](https://github.com/pre-commit/pre-commit)\n</code></pre> <ul> <li>HTML:</li> </ul> <pre><code>&lt;a href=\"https://github.com/pre-commit/pre-commit\"&gt;&lt;img src=\"https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit\" alt=\"pre-commit\" style=\"max-width:100%;\"&gt;&lt;/a&gt;\n</code></pre> <ul> <li>reStructuredText:</li> </ul> <pre><code>.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n</code></pre> <ul> <li>AsciiDoc:</li> </ul> <pre><code>image:https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit[pre-commit, link=https://github.com/pre-commit/pre-commit]\n</code></pre>"},{"location":"advanced/#\u5728\u6301\u7eed\u96c6\u6210\u4e2d\u7684\u4f7f\u7528","title":"\u5728\u6301\u7eed\u96c6\u6210\u4e2d\u7684\u4f7f\u7528","text":"<p>Usage in continuous integration</p> \u4e2d\u6587\u82f1\u6587 <p>pre-commit \u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u6301\u7eed\u96c6\u6210\u7684\u5de5\u5177\u3002\u4f8b\u5982\uff0c\u5c06 <code>pre-commit run --all-files</code> \u6dfb\u52a0\u4e3a CI \u6b65\u9aa4\u53ef\u4ee5\u786e\u4fdd\u6240\u6709\u5185\u5bb9\u4fdd\u6301\u6700\u4f73\u72b6\u6001\u3002\u8981\u4ec5\u68c0\u67e5\u5df2\u66f4\u6539\u7684\u6587\u4ef6\uff08\u8fd9\u53ef\u80fd\u66f4\u5feb\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e8e <code>pre-commit run --from-ref origin/HEAD --to-ref HEAD</code> \u7684\u547d\u4ee4\u3002</p> <p>pre-commit can also be used as a tool for continuous integration.  For instance, adding <code>pre-commit run --all-files</code> as a CI step will ensure everything stays in tip-top shape.  To check only files which have changed, which may be faster, use something like <code>pre-commit run --from-ref origin/HEAD --to-ref HEAD</code></p>"},{"location":"advanced/#\u7ba1\u7406-ci-\u7f13\u5b58","title":"\u7ba1\u7406 CI \u7f13\u5b58","text":"<p>Managing CI Caches</p> \u4e2d\u6587\u82f1\u6587 <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>pre-commit</code> \u5c06\u5176\u4ed3\u5e93\u5b58\u50a8\u5728 <code>~/.cache/pre-commit</code> \u4e2d\u2014\u2014\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e\uff1a</p> <ul> <li><code>PRE_COMMIT_HOME</code>\uff1a\u5982\u679c\u8bbe\u7f6e\u4e86\u8be5\u73af\u5883\u53d8\u91cf\uff0cpre-commit \u5c06\u4f7f\u7528\u8be5\u4f4d\u7f6e\u3002</li> <li><code>XDG_CACHE_HOME</code>\uff1a\u5982\u679c\u8bbe\u7f6e\u4e86\u8be5\u73af\u5883\u53d8\u91cf\uff0cpre-commit \u5c06\u4f7f\u7528 <code>$XDG_CACHE_HOME/pre-commit</code>\uff0c\u9075\u5faa XDG \u57fa\u7840\u76ee\u5f55\u89c4\u8303\u3002</li> </ul> <p><code>pre-commit</code> by default places its repository store in <code>~/.cache/pre-commit</code> -- this can be configured in two ways:</p> <ul> <li><code>PRE_COMMIT_HOME</code>: if set, pre-commit will use that location instead.</li> <li><code>XDG_CACHE_HOME</code>: if set, pre-commit will use <code>$XDG_CACHE_HOME/pre-commit</code>   following the XDG Base Directory Specification.</li> </ul>"},{"location":"advanced/#pre-commitci-\u6837\u4f8b","title":"pre-commit.ci \u6837\u4f8b","text":"<p>pre-commit.ci example</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728 pre-commit.ci \u4e2d\u8fd0\u884c\u65e0\u9700\u989d\u5916\u914d\u7f6e\uff01</p> <p>pre-commit.ci \u8fd8\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a</p> <ul> <li>\u5b83\u6bd4\u5176\u4ed6\u514d\u8d39\u7684 CI \u89e3\u51b3\u65b9\u6848\u66f4\u5feb</li> <li>\u5b83\u4f1a\u81ea\u52a8\u4fee\u590d\u62c9\u53d6\u8bf7\u6c42</li> <li>\u5b83\u4f1a\u5b9a\u671f\u81ea\u52a8\u66f4\u65b0\u60a8\u7684\u914d\u7f6e</li> </ul> <p></p> <p>no additional configuration is needed to run in pre-commit.ci!</p> <p>pre-commit.ci also has the following benefits:</p> <ul> <li>it's faster than other free CI solutions</li> <li>it will autofix pull requests</li> <li>it will periodically autoupdate your configuration</li> </ul> <p></p>"},{"location":"advanced/#appveyor-\u6837\u4f8b","title":"appveyor \u6837\u4f8b","text":"<p>appveyor example</p> \u4e2d\u6587\u82f1\u6587 <pre><code>cache:\n- '%USERPROFILE%\\.cache\\pre-commit'\n</code></pre> <pre><code>cache:\n- '%USERPROFILE%\\.cache\\pre-commit'\n</code></pre>"},{"location":"advanced/#azure-pipelines-\u6837\u4f8b","title":"azure pipelines \u6837\u4f8b","text":"<p>azure pipelines example</p> \u4e2d\u6587\u82f1\u6587 <p>\u6ce8\u610f\uff1aAzure Pipelines \u4f7f\u7528\u4e0d\u53ef\u53d8\u7f13\u5b58\uff0c\u56e0\u6b64 Python \u7248\u672c\u548c <code>.pre-commit-config.yaml</code> \u54c8\u5e0c\u5fc5\u987b\u5305\u542b\u5728\u7f13\u5b58\u952e\u4e2d\u3002\u6709\u5173\u4ed3\u5e93\u6a21\u677f\uff0c\u8bf7\u53c2\u89c1 asottile@job--pre-commit.yml\u3002</p> <pre><code>jobs:\n- job: precommit\n\n  # ...\n\n  variables:\n    PRE_COMMIT_HOME: $(Pipeline.Workspace)/pre-commit-cache\n\n  steps:\n\n  # ...\n\n  - script: echo \"##vso[task.setvariable variable=PY]$(python -VV)\"\n  - task: CacheBeta@0\n    inputs:\n      key: pre-commit | .pre-commit-config.yaml | \"$(PY)\"\n      path: $(PRE_COMMIT_HOME)\n</code></pre> <p>note: azure pipelines uses immutable caches so the python version and <code>.pre-commit-config.yaml</code> hash must be included in the cache key.  for a repository template, see asottile@job--pre-commit.yml.</p> <pre><code>jobs:\n- job: precommit\n\n  # ...\n\n  variables:\n    PRE_COMMIT_HOME: $(Pipeline.Workspace)/pre-commit-cache\n\n  steps:\n\n  # ...\n\n  - script: echo \"##vso[task.setvariable variable=PY]$(python -VV)\"\n  - task: CacheBeta@0\n    inputs:\n      key: pre-commit | .pre-commit-config.yaml | \"$(PY)\"\n      path: $(PRE_COMMIT_HOME)\n</code></pre>"},{"location":"advanced/#circleci-\u6837\u4f8b","title":"circleci \u6837\u4f8b","text":"<p>circleci example</p> \u4e2d\u6587\u82f1\u6587 <p>\u50cf Azure Pipelines \u4e00\u6837\uff0cCircleCI \u4e5f\u4f7f\u7528\u4e0d\u53ef\u53d8\u7f13\u5b58\uff1a</p> <pre><code>  steps:\n  - run:\n    command: |\n      cp .pre-commit-config.yaml pre-commit-cache-key.txt\n      python --version --version &gt;&gt; pre-commit-cache-key.txt\n  - restore_cache:\n    keys:\n    - v1-pc-cache-{{ checksum \"pre-commit-cache-key.txt\" }}\n\n  # ...\n\n  - save_cache:\n    key: v1-pc-cache-{{ checksum \"pre-commit-cache-key.txt\" }}\n    paths:\n      - ~/.cache/pre-commit\n</code></pre> <p>\uff08\u6765\u6e90\uff1a@chriselion\uff09</p> <p>like azure pipelines, circleci also uses immutable caches:</p> <pre><code>  steps:\n  - run:\n    command: |\n      cp .pre-commit-config.yaml pre-commit-cache-key.txt\n      python --version --version &gt;&gt; pre-commit-cache-key.txt\n  - restore_cache:\n    keys:\n    - v1-pc-cache-{{ checksum \"pre-commit-cache-key.txt\" }}\n\n  # ...\n\n  - save_cache:\n    key: v1-pc-cache-{{ checksum \"pre-commit-cache-key.txt\" }}\n    paths:\n      - ~/.cache/pre-commit\n</code></pre> <p>(source: @chriselion)</p>"},{"location":"advanced/#github-actions-\u6837\u4f8b","title":"github actions \u6837\u4f8b","text":"<p>github actions example</p> \u4e2d\u6587\u82f1\u6587 <p>\u67e5\u770b \u5b98\u65b9 pre-commit GitHub \u52a8\u4f5c</p> <p>\u4e0e Azure Pipelines \u7c7b\u4f3c\uff0cGitHub Actions \u4e5f\u4f7f\u7528\u4e0d\u53ef\u53d8\u7f13\u5b58\uff1a</p> <pre><code>    - name: set PY\n      run: echo \"PY=$(python -VV | sha256sum | cut -d' ' -f1)\" &gt;&gt; $GITHUB_ENV\n    - uses: actions/cache@v3\n      with:\n        path: ~/.cache/pre-commit\n        key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}\n</code></pre> <p>see the official pre-commit github action</p> <p>like azure pipelines, github actions also uses immutable caches:</p> <pre><code>    - name: set PY\n      run: echo \"PY=$(python -VV | sha256sum | cut -d' ' -f1)\" &gt;&gt; $GITHUB_ENV\n    - uses: actions/cache@v3\n      with:\n        path: ~/.cache/pre-commit\n        key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}\n</code></pre>"},{"location":"advanced/#gitlab-ci-\u6837\u4f8b","title":"gitlab CI \u6837\u4f8b","text":"<p>gitlab CI example</p> \u4e2d\u6587\u82f1\u6587 <p>\u67e5\u770b GitLab \u7f13\u5b58\u6700\u4f73\u5b9e\u8df5 \u4ee5\u4f18\u5316\u7f13\u5b58\u8303\u56f4\u3002</p> <pre><code>my_job:\n  variables:\n    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit\n  cache:\n    paths:\n      - ${PRE_COMMIT_HOME}\n</code></pre> <p>pre-commit \u7684\u7f13\u5b58\u9700\u8981\u5728\u4e0d\u540c\u6784\u5efa\u4e4b\u95f4\u4fdd\u6301\u5728\u4e00\u4e2a\u56fa\u5b9a\u4f4d\u7f6e\u3002\u5f53\u5728 GitLab \u4e0a\u4f7f\u7528 k8s \u8fd0\u884c\u5668\u65f6\uff0c\u8fd9\u5e76\u4e0d\u662f\u9ed8\u8ba4\u8bbe\u7f6e\u3002\u5982\u679c\u9047\u5230\u9519\u8bef <code>InvalidManifestError</code>\uff0c\u8bf7\u5728 <code>[[runner]]</code> \u914d\u7f6e\u4e2d\u5c06 <code>builds_dir</code> \u8bbe\u7f6e\u4e3a\u67d0\u4e2a\u9759\u6001\u503c\uff0c\u4f8b\u5982 <code>builds_dir = \"/builds\"</code>\u3002</p> <p>See the Gitlab caching best practices to fine tune the cache scope.</p> <pre><code>my_job:\n  variables:\n    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit\n  cache:\n    paths:\n      - ${PRE_COMMIT_HOME}\n</code></pre> <p>pre-commit's cache requires to be served from a constant location between the different builds. This isn't the default when using k8s runners on GitLab. In case you face the error <code>InvalidManifestError</code>, set <code>builds_dir</code> to something static e.g <code>builds_dir = \"/builds\"</code> in your <code>[[runner]]</code> config</p>"},{"location":"advanced/#travis-ci-\u6837\u4f8b","title":"travis-ci \u6837\u4f8b","text":"<p>travis-ci example</p> \u4e2d\u6587\u82f1\u6587 <pre><code>cache:\n  directories:\n  - $HOME/.cache/pre-commit\n</code></pre> <pre><code>cache:\n  directories:\n  - $HOME/.cache/pre-commit\n</code></pre>"},{"location":"advanced/#\u4e0e-tox-\u4e00\u8d77\u4f7f\u7528","title":"\u4e0e tox \u4e00\u8d77\u4f7f\u7528","text":"<p>Usage with tox</p> \u4e2d\u6587\u82f1\u6587 <p>tox \u5bf9\u4e8e\u914d\u7f6e\u6d4b\u8bd5/CI \u5de5\u5177\uff08\u5982 pre-commit\uff09\u975e\u5e38\u6709\u7528\u3002<code>tox&gt;=2</code> \u7684\u4e00\u4e2a\u7279\u70b9\u662f\u5b83\u4f1a\u6e05\u9664\u73af\u5883\u53d8\u91cf\uff0c\u4ece\u800c\u4f7f\u6d4b\u8bd5\u66f4\u52a0\u53ef\u91cd\u590d\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0cpre-commit \u9700\u8981\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\uff0c\u56e0\u6b64\u5fc5\u987b\u5141\u8bb8\u5b83\u4eec\u901a\u8fc7\u3002</p> <p>\u5728\u901a\u8fc7 SSH \u514b\u9686\u4ed3\u5e93\u65f6\uff08<code>repo: git@github.com:...</code>\uff09\uff0c<code>git</code> \u9700\u8981 <code>SSH_AUTH_SOCK</code> \u53d8\u91cf\uff0c\u5426\u5219\u4f1a\u5931\u8d25\uff1a</p> <pre><code>[INFO] \u6b63\u5728\u4e3a git@github.com:pre-commit/pre-commit-hooks \u521d\u59cb\u5316\u73af\u5883\u3002\n\u53d1\u751f\u610f\u5916\u9519\u8bef\uff1aCalledProcessError: command: ('/usr/bin/git', 'fetch', 'origin', '--tags')\n\u8fd4\u56de\u4ee3\u7801\uff1a128\n\u9884\u671f\u8fd4\u56de\u4ee3\u7801\uff1a0\n\u6807\u51c6\u8f93\u51fa\uff1a\uff08\u65e0\uff09\n\u6807\u51c6\u9519\u8bef\uff1a\n    git@github.com: \u6743\u9650\u88ab\u62d2\u7edd\uff08\u516c\u94a5\uff09\u3002\n    fatal: \u65e0\u6cd5\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u8bfb\u53d6\u3002\n\n    \u8bf7\u786e\u4fdd\u60a8\u62e5\u6709\u6b63\u786e\u7684\u8bbf\u95ee\u6743\u9650\n    \u5e76\u4e14\u4ed3\u5e93\u5b58\u5728\u3002\n\n\u8bf7\u67e5\u770b\u4f4d\u4e8e /home/asottile/.cache/pre-commit/pre-commit.log \u7684\u65e5\u5fd7\u3002\n</code></pre> <p>\u5728\u60a8\u7684 tox \u6d4b\u8bd5\u73af\u5883\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <pre><code>[testenv]\npassenv = SSH_AUTH_SOCK\n</code></pre> <p>\u540c\u6837\uff0c\u5728\u901a\u8fc7 HTTP/HTTPS \u514b\u9686\u4ed3\u5e93\u65f6\uff08<code>repo: https://github.com:...</code>\uff09\uff0c\u60a8\u53ef\u80fd\u5728\u516c\u53f8 HTTP(S) \u4ee3\u7406\u670d\u52a1\u5668\u540e\u9762\uff0c\u6b64\u65f6 <code>git</code> \u9700\u8981\u8bbe\u7f6e <code>http_proxy</code>\u3001<code>https_proxy</code> \u548c <code>no_proxy</code> \u53d8\u91cf\uff0c\u5426\u5219\u514b\u9686\u53ef\u80fd\u4f1a\u5931\u8d25\uff1a</p> <pre><code>[testenv]\npassenv = http_proxy https_proxy no_proxy\n</code></pre> <p>tox is useful for configuring test / CI tools such as pre-commit.  One feature of <code>tox&gt;=2</code> is it will clear environment variables such that tests are more reproducible.  Under some conditions, pre-commit requires a few environment variables and so they must be allowed to be passed through.</p> <p>When cloning repos over ssh (<code>repo: git@github.com:...</code>), <code>git</code> requires the <code>SSH_AUTH_SOCK</code> variable and will otherwise fail:</p> <pre><code>[INFO] Initializing environment for git@github.com:pre-commit/pre-commit-hooks.\nAn unexpected error has occurred: CalledProcessError: command: ('/usr/bin/git', 'fetch', 'origin', '--tags')\nreturn code: 128\nexpected return code: 0\nstdout: (none)\nstderr:\n    git@github.com: Permission denied (publickey).\n    fatal: Could not read from remote repository.\n\n    Please make sure you have the correct access rights\n    and the repository exists.\n\nCheck the log at /home/asottile/.cache/pre-commit/pre-commit.log\n</code></pre> <p>Add the following to your tox testenv:</p> <pre><code>[testenv]\npassenv = SSH_AUTH_SOCK\n</code></pre> <p>Likewise, when cloning repos over http / https (<code>repo: https://github.com:...</code>), you might be working behind a corporate http(s) proxy server, in which case <code>git</code> requires the <code>http_proxy</code>, <code>https_proxy</code> and <code>no_proxy</code> variables to be set, or the clone may fail:</p> <pre><code>[testenv]\npassenv = http_proxy https_proxy no_proxy\n</code></pre>"},{"location":"advanced/#\u4f7f\u7528\u5b58\u50a8\u5e93\u7684\u6700\u65b0\u7248\u672c","title":"\u4f7f\u7528\u5b58\u50a8\u5e93\u7684\u6700\u65b0\u7248\u672c","text":"<p>Using the latest version for a repository</p> \u4e2d\u6587\u82f1\u6587 <p><code>pre-commit</code> \u914d\u7f6e\u65e8\u5728\u63d0\u4f9b\u53ef\u91cd\u590d\u548c\u5feb\u901f\u7684\u4f53\u9a8c\uff0c\u56e0\u6b64\u6545\u610f\u4e0d\u4e3a\u94a9\u5b50\u4ed3\u5e93\u63d0\u4f9b\u201c\u672a\u9501\u5b9a\u7684\u6700\u65b0\u7248\u672c\u201d\u529f\u80fd\u3002</p> <p>\u76f8\u53cd\uff0c<code>pre-commit</code> \u63d0\u4f9b\u5de5\u5177\uff0c\u4f7f\u60a8\u80fd\u591f\u8f7b\u677e\u5347\u7ea7\u5230\u6700\u65b0\u7248\u672c\uff0c\u4f7f\u7528 <code>pre-commit autoupdate</code>\u3002\u5982\u679c\u60a8\u9700\u8981\u94a9\u5b50\u7684\u7edd\u5bf9\u6700\u65b0\u7248\u672c\uff08\u800c\u4e0d\u662f\u6700\u65b0\u7684\u6807\u7b7e\u7248\u672c\uff09\uff0c\u8bf7\u5c06 <code>--bleeding-edge</code> \u53c2\u6570\u4f20\u9012\u7ed9 <code>autoupdate</code>\u3002</p> <p><code>pre-commit</code> \u5047\u8bbe <code>rev</code> \u7684\u503c\u662f\u4e0d\u53ef\u53d8\u7684\u5f15\u7528\uff08\u5982\u6807\u7b7e\u6216 SHA\uff09\uff0c\u5e76\u5c06\u57fa\u4e8e\u6b64\u8fdb\u884c\u7f13\u5b58\u3002\u4e0d\u652f\u6301\u5c06\u5206\u652f\u540d\u79f0\uff08\u6216 <code>HEAD</code>\uff09\u7528\u4f5c <code>rev</code> \u7684\u503c\uff0c\u8fd9\u4ec5\u8868\u793a\u5728\u94a9\u5b50\u5b89\u88c5\u65f6\u8be5\u53ef\u53d8\u5f15\u7528\u7684\u72b6\u6001\uff08\u5e76\u4e14 \u4e0d\u4f1a \u81ea\u52a8\u66f4\u65b0\uff09\u3002</p> <p><code>pre-commit</code> configuration aims to give a repeatable and fast experience and therefore intentionally doesn't provide facilities for \"unpinned latest version\" for hook repositories.</p> <p>Instead, <code>pre-commit</code> provides tools to make it easy to upgrade to the latest versions with <code>pre-commit autoupdate</code>.  If you need the absolute latest version of a hook (instead of the latest tagged version), pass the <code>--bleeding-edge</code> parameter to <code>autoupdate</code>.</p> <p><code>pre-commit</code> assumes that the value of <code>rev</code> is an immutable ref (such as a tag or SHA) and will cache based on that.  Using a branch name (or <code>HEAD</code>) for the value of <code>rev</code> is not supported and will only represent the state of that mutable ref at the time of hook installation (and will NOT update automatically).</p>"},{"location":"cli/","title":"\u547d\u4ee4\u884c\u63a5\u53e3","text":"<p>Command line interface</p> \u4e2d\u6587\u82f1\u6587 <p>\u6240\u6709 pre-commit \u547d\u4ee4\u90fd\u63a5\u53d7\u4ee5\u4e0b\u9009\u9879\uff1a</p> <ul> <li><code>--color {auto,always,never}</code>\uff1a\u662f\u5426\u5728\u8f93\u51fa\u4e2d\u4f7f\u7528\u989c\u8272\u3002\u9ed8\u8ba4\u4e3a <code>auto</code>\u3002\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 <code>PRE_COMMIT_COLOR={auto,always,never}</code> \u8986\u76d6\uff0c\u6216\u8005\u901a\u8fc7\u4f7f\u7528 <code>TERM=dumb</code> \u7981\u7528\u989c\u8272\u3002</li> <li><code>-c CONFIG</code>, <code>--config CONFIG</code>\uff1a\u6307\u5411\u66ff\u4ee3\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>-h</code>, <code>--help</code>\uff1a\u663e\u793a\u5e2e\u52a9\u548c\u53ef\u7528\u9009\u9879\u3002</li> </ul> <p>\u65b0\u7279\u6027 2.8.0\uff1a<code>pre-commit</code> \u73b0\u5728\u4f7f\u7528\u66f4\u5177\u4f53\u7684\u9000\u51fa\u4ee3\u7801\uff1a - <code>1</code>\uff1a\u68c0\u6d4b\u5230\u7684/\u9884\u671f\u7684\u9519\u8bef - <code>3</code>\uff1a\u610f\u5916\u7684\u9519\u8bef - <code>130</code>\uff1a\u8fdb\u7a0b\u88ab <code>^C</code> \u4e2d\u65ad</p> <p>All pre-commit commands take the following options:</p> <ul> <li><code>--color {auto,always,never}</code>: whether to use color in output.   Defaults to <code>auto</code>.  can be overridden by using   <code>PRE_COMMIT_COLOR={auto,always,never}</code> or disabled using <code>TERM=dumb</code>.</li> <li><code>-c CONFIG</code>, <code>--config CONFIG</code>: path to alternate config file</li> <li><code>-h</code>, <code>--help</code>: show help and available options.</li> </ul> <p>new in 2.8.0: <code>pre-commit</code> now exits with more specific codes: - <code>1</code>: a detected / expected error - <code>3</code>: an unexpected error - <code>130</code>: the process was interrupted by <code>^C</code></p>"},{"location":"cli/#pre-commit-autoupdate-options","title":"pre-commit autoupdate [options]","text":"\u4e2d\u6587\u82f1\u6587 <p>\u81ea\u52a8\u66f4\u65b0 pre-commit \u914d\u7f6e\u5230\u4ed3\u5e93\u7684\u6700\u65b0\u7248\u672c\u3002</p> <p>\u9009\u9879\uff1a</p> <ul> <li><code>--bleeding-edge</code>\uff1a\u66f4\u65b0\u5230\u9ed8\u8ba4\u5206\u652f\u7684\u6700\u65b0\u5f00\u53d1\u7248\u672c\uff0c\u800c\u4e0d\u662f\u6700\u65b0\u7684\u5df2\u6807\u8bb0\u7248\u672c\uff08\u9ed8\u8ba4\u884c\u4e3a\uff09\u3002</li> <li><code>--freeze</code>\uff1a\u5728 <code>rev</code> \u4e2d\u5b58\u50a8\u201c\u51bb\u7ed3\u201d\u7684\u54c8\u5e0c\u503c\uff0c\u800c\u4e0d\u662f\u6807\u7b7e\u540d\u79f0\u3002</li> <li><code>--repo REPO</code>\uff1a\u53ea\u66f4\u65b0\u8fd9\u4e2a\u4ed3\u5e93\u3002\u8fd9\u4e2a\u9009\u9879\u53ef\u4ee5\u591a\u6b21\u6307\u5b9a\u3002</li> <li><code>-j</code> / <code>--jobs</code>\uff1a3.3.0 \u7248\u672c\u65b0\u589e \u8981\u4f7f\u7528\u7684\u7ebf\u7a0b\u6570\u91cf\uff08\u9ed8\u8ba4\uff1a1\uff09\u3002</li> </ul> <p>\u4ee5\u4e0b\u662f\u4f7f\u7528 <code>.pre-commit-config.yaml</code> \u7684\u4e00\u4e9b\u793a\u4f8b\u8c03\u7528\uff1a</p> <pre><code>repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks \n    rev: v2.1.0\n    hooks:\n    -   id: trailing-whitespace\n-   repo: https://github.com/asottile/pyupgrade \n    rev: v1.25.0\n    hooks:\n    -   id: pyupgrade\n        args: [--py36-plus]\n</code></pre> <pre><code>$ : \u9ed8\u8ba4\uff1a\u66f4\u65b0\u5230\u9ed8\u8ba4\u5206\u652f\u7684\u6700\u65b0\u6807\u7b7e\n$ pre-commit autoupdate  # \u9ed8\u8ba4\uff1a\u9009\u62e9\u6807\u7b7e\nUpdating https://github.com/pre-commit/pre-commit-hooks  ... updating v2.1.0 -&gt; v2.4.0.\nUpdating https://github.com/asottile/pyupgrade  ... updating v1.25.0 -&gt; v1.25.2.\n$ grep rev: .pre-commit-config.yaml\n    rev: v2.4.0\n    rev: v1.25.2\n</code></pre> <pre><code>$ : \u66f4\u65b0\u7279\u5b9a\u4ed3\u5e93\u5230\u9ed8\u8ba4\u5206\u652f\u7684\u6700\u65b0\u4fee\u8ba2\u7248\n$ pre-commit autoupdate --bleeding-edge --repo https://github.com/pre-commit/pre-commit-hooks \nUpdating https://github.com/pre-commit/pre-commit-hooks  ... updating v2.1.0 -&gt; 5df1a4bf6f04a1ed3a643167b38d502575e29aef.\n$ grep rev: .pre-commit-config.yaml\n    rev: 5df1a4bf6f04a1ed3a643167b38d502575e29aef\n    rev: v1.25.0\n</code></pre> <pre><code>$ : \u66f4\u65b0\u5230\u51bb\u7ed3\u7248\u672c\n$ pre-commit autoupdate --freeze\nUpdating https://github.com/pre-commit/pre-commit-hooks  ... updating v2.1.0 -&gt; v2.4.0 (frozen).\nUpdating https://github.com/asottile/pyupgrade  ... updating v1.25.0 -&gt; v1.25.2 (frozen).\n$ grep rev: .pre-commit-config.yaml\n    rev: 0161422b4e09b47536ea13f49e786eb3616fe0d7  # \u51bb\u7ed3\uff1av2.4.0\n    rev: 34a269fd7650d264e4de7603157c10d0a9bb8211  # \u51bb\u7ed3\uff1av1.25.2\n</code></pre> <p>\u65b0\u7279\u6027 2.18.0\uff1a\u5982\u679c\u5b58\u5728\u5e76\u5217\u60c5\u51b5\uff0cpre-commit \u5c06\u4f18\u5148\u9009\u62e9\u5305\u542b <code>.</code> \u7684\u6807\u7b7e\u3002</p> <p>Auto-update pre-commit config to the latest repos' versions.</p> <p>Options:</p> <ul> <li><code>--bleeding-edge</code>: update to the bleeding edge of the default branch instead   of the latest tagged version (the default behaviour).</li> <li><code>--freeze</code>: Store \"frozen\" hashes in <code>rev</code> instead of tag names.</li> <li><code>--repo REPO</code>: Only update this repository. This option may be specified   multiple times.</li> <li><code>-j</code> / <code>--jobs</code>: new in 3.3.0 Number of threads to use (default: 1).</li> </ul> <p>Here are some sample invocations using this <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.1.0\n    hooks:\n    -   id: trailing-whitespace\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v1.25.0\n    hooks:\n    -   id: pyupgrade\n        args: [--py36-plus]\n</code></pre> <pre><code>$ : default: update to latest tag on default branch\n$ pre-commit autoupdate  # by default: pick tags\nUpdating https://github.com/pre-commit/pre-commit-hooks ... updating v2.1.0 -&gt; v2.4.0.\nUpdating https://github.com/asottile/pyupgrade ... updating v1.25.0 -&gt; v1.25.2.\n$ grep rev: .pre-commit-config.yaml\n    rev: v2.4.0\n    rev: v1.25.2\n</code></pre> <pre><code>$ : update a specific repository to the latest revision of the default branch\n$ pre-commit autoupdate --bleeding-edge --repo https://github.com/pre-commit/pre-commit-hooks\nUpdating https://github.com/pre-commit/pre-commit-hooks ... updating v2.1.0 -&gt; 5df1a4bf6f04a1ed3a643167b38d502575e29aef.\n$ grep rev: .pre-commit-config.yaml\n    rev: 5df1a4bf6f04a1ed3a643167b38d502575e29aef\n    rev: v1.25.0\n</code></pre> <pre><code>$ : update to frozen versions\n$ pre-commit autoupdate --freeze\nUpdating https://github.com/pre-commit/pre-commit-hooks ... updating v2.1.0 -&gt; v2.4.0 (frozen).\nUpdating https://github.com/asottile/pyupgrade ... updating v1.25.0 -&gt; v1.25.2 (frozen).\n$ grep rev: .pre-commit-config.yaml\n    rev: 0161422b4e09b47536ea13f49e786eb3616fe0d7  # frozen: v2.4.0\n    rev: 34a269fd7650d264e4de7603157c10d0a9bb8211  # frozen: v1.25.2\n</code></pre> <p>new in 2.18.0: pre-commit will preferentially pick tags containing a <code>.</code> if there are ties.</p>"},{"location":"cli/#pre-commit-clean-options","title":"pre-commit clean [options]","text":"\u4e2d\u6587\u82f1\u6587 <p>\u6e05\u7406\u7f13\u5b58\u7684 pre-commit \u6587\u4ef6\u3002</p> <p>\u9009\u9879\uff1a\uff08\u65e0\u5176\u4ed6\u9009\u9879\uff09</p> <p>Clean out cached pre-commit files.</p> <p>Options: (no additional options)</p>"},{"location":"cli/#pre-commit-gc-options","title":"pre-commit gc [options]","text":"\u4e2d\u6587\u82f1\u6587 <p>\u6e05\u7406\u672a\u4f7f\u7528\u7684\u7f13\u5b58\u4ed3\u5e93\u3002</p> <p><code>pre-commit</code> \u4f1a\u4fdd\u7559\u5df2\u5b89\u88c5\u94a9\u5b50\u4ed3\u5e93\u7684\u7f13\u5b58\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u8fd9\u4e2a\u7f13\u5b58\u4f1a\u4e0d\u65ad\u589e\u957f\u3002\u53ef\u4ee5\u5b9a\u671f\u8fd0\u884c\u6b64\u547d\u4ee4\u4ee5\u6e05\u7406\u7f13\u5b58\u76ee\u5f55\u4e2d\u672a\u4f7f\u7528\u7684\u4ed3\u5e93\u3002</p> <p>\u9009\u9879\uff1a\uff08\u65e0\u5176\u4ed6\u9009\u9879\uff09</p> <p>Clean unused cached repos.</p> <p><code>pre-commit</code> keeps a cache of installed hook repositories which grows over time.  This command can be run periodically to clean out unused repos from the cache directory.</p> <p>Options: (no additional options)</p>"},{"location":"cli/#pre-commit-init-templatedir-directory-options","title":"pre-commit init-templatedir DIRECTORY [options]","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5728\u7528\u4e8e\u4e0e <code>git config init.templateDir</code> \u4e00\u8d77\u4f7f\u7528\u7684\u76ee\u5f55\u4e2d\u5b89\u88c5\u94a9\u5b50\u811a\u672c\u3002</p> <p>\u9009\u9879\uff1a</p> <ul> <li><code>-t HOOK_TYPE, --hook-type HOOK_TYPE</code>\uff1a\u8981\u5b89\u88c5\u7684\u94a9\u5b50\u7c7b\u578b\u3002</li> </ul> <p>\u4e00\u4e9b\u793a\u4f8b\u8c03\u7528\uff1a</p> <pre><code>git config --global init.templateDir ~/.git-template\npre-commit init-templatedir ~/.git-template\n</code></pre> <p>\u5bf9\u4e8e Windows cmd.exe \u4f7f\u7528 <code>%HOMEPATH%</code> \u800c\u4e0d\u662f <code>~</code>\uff1a</p> <pre><code>pre-commit init-templatedir %HOMEPATH%\\.git-template\n</code></pre> <p>\u5bf9\u4e8e Windows PowerShell \u4f7f\u7528 <code>$HOME</code> \u800c\u4e0d\u662f <code>~</code>\uff1a</p> <pre><code>pre-commit init-templatedir $HOME\\.git-template\n</code></pre> <p>\u73b0\u5728\uff0c\u65e0\u8bba\u4f55\u65f6\u514b\u9686\u6216\u521b\u5efa\u4ed3\u5e93\uff0c\u5b83\u90fd\u4f1a\u9884\u5148\u8bbe\u7f6e\u597d\u94a9\u5b50\uff01</p> <p>Install hook script in a directory intended for use with <code>git config init.templateDir</code>.</p> <p>Options:</p> <ul> <li><code>-t HOOK_TYPE, --hook-type HOOK_TYPE</code>:   which hook type to install.</li> </ul> <p>Some example useful invocations:</p> <pre><code>git config --global init.templateDir ~/.git-template\npre-commit init-templatedir ~/.git-template\n</code></pre> <p>For Windows cmd.exe use <code>%HOMEPATH%</code> instead of <code>~</code>:</p> <pre><code>pre-commit init-templatedir %HOMEPATH%\\.git-template\n</code></pre> <p>For Windows PowerShell use <code>$HOME</code> instead of <code>~</code>:</p> <pre><code>pre-commit init-templatedir $HOME\\.git-template\n</code></pre> <p>Now whenever a repository is cloned or created, it will have the hooks set up already!</p>"},{"location":"cli/#pre-commit-install-options","title":"pre-commit install [options]","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5b89\u88c5 pre-commit \u811a\u672c\u3002</p> <p>\u9009\u9879\uff1a</p> <ul> <li><code>-f</code>, <code>--overwrite</code>\uff1a\u7528 pre-commit \u811a\u672c\u66ff\u6362\u4efb\u4f55\u73b0\u6709\u7684 git \u94a9\u5b50\u3002</li> <li><code>--install-hooks</code>\uff1a\u73b0\u5728\u5c31\u5b89\u88c5\u6240\u6709\u53ef\u7528\u94a9\u5b50\u7684\u73af\u5883\uff08\u800c\u4e0d\u662f\u5728\u5b83\u4eec\u7b2c\u4e00\u6b21\u6267\u884c\u65f6\uff09\u3002\u53c2\u89c1 <code>pre-commit install-hooks</code>\u3002</li> <li><code>-t HOOK_TYPE, --hook-type HOOK_TYPE</code>\uff1a\u6307\u5b9a\u8981\u5b89\u88c5\u7684\u94a9\u5b50\u7c7b\u578b\u3002</li> <li><code>--allow-missing-config</code>\uff1a\u5982\u679c\u914d\u7f6e\u6587\u4ef6\u7f3a\u5931\uff0c\u94a9\u5b50\u811a\u672c\u5c06\u5141\u8bb8\u8fd9\u79cd\u60c5\u51b5\u3002</li> </ul> <p>\u4e00\u4e9b\u793a\u4f8b\u8c03\u7528\uff1a</p> <ul> <li><code>pre-commit install</code>\uff1a\u9ed8\u8ba4\u8c03\u7528\u3002\u5728\u4efb\u4f55\u73b0\u6709\u7684 git \u94a9\u5b50\u65c1\u5b89\u88c5\u94a9\u5b50\u811a\u672c\u3002</li> <li><code>pre-commit install --install-hooks --overwrite</code>\uff1a\u7528 pre-commit \u66ff\u6362\u73b0\u6709\u7684 git \u94a9\u5b50\u811a\u672c\uff0c\u5e76\u4e14\u5b89\u88c5\u94a9\u5b50\u73af\u5883\u3002</li> </ul> <p>\u65b0\u7279\u6027 2.18.0\uff1a\u5982\u679c\u547d\u4ee4\u884c\u4e0a\u6ca1\u6709\u6307\u5b9a <code>--hook-type</code>\uff0c<code>pre-commit install</code> \u73b0\u5728\u5c06\u4ece <code>default_install_hook_types</code> \u5b89\u88c5\u94a9\u5b50\u3002</p> <p>Install the pre-commit script.</p> <p>Options:</p> <ul> <li><code>-f</code>, <code>--overwrite</code>: Replace any existing git hooks with the pre-commit   script.</li> <li><code>--install-hooks</code>: Also install environments for all available hooks now   (rather than when they are first executed). See <code>pre-commit   install-hooks</code>.</li> <li><code>-t HOOK_TYPE, --hook-type HOOK_TYPE</code>:   Specify which hook type to install.</li> <li><code>--allow-missing-config</code>: Hook scripts will permit a missing configuration   file.</li> </ul> <p>Some example useful invocations:</p> <ul> <li><code>pre-commit install</code>: Default invocation. Installs the hook scripts    alongside any existing git hooks.</li> <li><code>pre-commit install --install-hooks --overwrite</code>: Idempotently replaces    existing git hook scripts with pre-commit, and also installs hook    environments.</li> </ul> <p>new in 2.18.0: <code>pre-commit install</code> will now install hooks from <code>default_install_hook_types</code> if <code>--hook-type</code> is not specified on the command line.</p>"},{"location":"cli/#pre-commit-install-hooks-options","title":"pre-commit install-hooks [options]","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5b89\u88c5\u6240\u6709\u53ef\u7528\u94a9\u5b50\u7684\u7f3a\u5931\u73af\u5883\u3002\u9664\u975e\u6267\u884c\u4e86\u6b64\u547d\u4ee4\u6216 <code>install --install-hooks</code>\uff0c\u5426\u5219\u6bcf\u4e2a\u94a9\u5b50\u7684\u73af\u5883\u5c06\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u94a9\u5b50\u65f6\u521b\u5efa\u3002</p> <p>\u6bcf\u4e2a\u94a9\u5b50\u90fd\u5728\u9002\u5408\u5176\u7f16\u5199\u8bed\u8a00\u7684\u72ec\u7acb\u73af\u5883\u4e2d\u521d\u59cb\u5316\u3002\u53c2\u89c1 \u652f\u6301\u7684\u8bed\u8a00\u3002</p> <p>\u6b64\u547d\u4ee4\u4e0d\u4f1a\u5b89\u88c5 pre-commit \u811a\u672c\u3002\u8981\u5728\u4e00\u4e2a\u547d\u4ee4\u4e2d\u5b89\u88c5\u811a\u672c\u548c\u94a9\u5b50\u73af\u5883\uff0c\u8bf7\u4f7f\u7528 <code>pre-commit install --install-hooks</code>\u3002</p> <p>\u9009\u9879\uff1a\uff08\u65e0\u5176\u4ed6\u9009\u9879\uff09</p> <p>Install all missing environments for the available hooks. Unless this command or <code>install --install-hooks</code> is executed, each hook's environment is created the first time the hook is called.</p> <p>Each hook is initialized in a separate environment appropriate to the language the hook is written in. See supported languages.</p> <p>This command does not install the pre-commit script. To install the script along with the hook environments in one command, use <code>pre-commit install --install-hooks</code>.</p> <p>Options: (no additional options)</p>"},{"location":"cli/#pre-commit-migrate-config-options","title":"pre-commit migrate-config [options]","text":"\u4e2d\u6587\u82f1\u6587 <p>\u8fc1\u79fb\u5217\u8868\u914d\u7f6e\u5230\u65b0\u7684\u6620\u5c04\u914d\u7f6e\u683c\u5f0f\u3002</p> <p>\u9009\u9879\uff1a\uff08\u65e0\u5176\u4ed6\u9009\u9879\uff09</p> <p>Migrate list configuration to the new map configuration format.</p> <p>Options: (no additional options)</p>"},{"location":"cli/#pre-commit-run-hook-id","title":"pre-commit run hook-id","text":"\u4e2d\u6587\u82f1\u6587 <p>\u8fd0\u884c\u94a9\u5b50\u3002</p> <p>\u9009\u9879\uff1a</p> <ul> <li><code>[hook-id]</code>\uff1a\u6307\u5b9a\u5355\u4e2a hook-id\uff0c\u53ea\u8fd0\u884c\u8be5\u94a9\u5b50\u3002</li> <li><code>-a</code>, <code>--all-files</code>\uff1a\u5728\u4ed3\u5e93\u4e2d\u7684\u6240\u6709\u6587\u4ef6\u4e0a\u8fd0\u884c\u3002</li> <li><code>--files [FILES [FILES ...]]</code>\uff1a\u7279\u5b9a\u7684\u6587\u4ef6\u540d\u6765\u8fd0\u884c\u94a9\u5b50\u3002</li> <li><code>--from-ref FROM_REF</code> + <code>--to-ref TO_REF</code>\uff1a\u5728 git \u4e2d <code>FROM_REF...TO_REF</code> \u4e4b\u95f4\u66f4\u6539\u7684\u6587\u4ef6\u4e0a\u8fd0\u884c\u3002</li> <li>2.2.0 \u7248\u672c\u65b0\u589e\uff1a\u5728 2.2.0 \u7248\u672c\u4e4b\u524d\u53c2\u6570\u4e3a <code>--source</code> \u548c <code>--origin</code>\u3002</li> <li><code>--hook-stage STAGE</code>\uff1a\u9009\u62e9\u8981\u8fd0\u884c\u7684 <code>\u9636\u6bb5</code>\u3002</li> <li><code>--show-diff-on-failure</code>\uff1a\u5f53\u94a9\u5b50\u5931\u8d25\u65f6\uff0c\u7acb\u5373\u8fd0\u884c <code>git diff</code>\u3002</li> <li><code>-v</code>, <code>--verbose</code>\uff1a\u65e0\u8bba\u6210\u529f\u4e0e\u5426\u90fd\u4ea7\u751f\u94a9\u5b50\u8f93\u51fa\u3002\u5728\u8f93\u51fa\u4e2d\u5305\u542b\u94a9\u5b50 id\u3002</li> </ul> <p>\u4e00\u4e9b\u793a\u4f8b\u8c03\u7528\uff1a - <code>pre-commit run</code>\uff1a\u8fd9\u662f\u63d0\u4ea4\u65f6 pre-commit \u9ed8\u8ba4\u8fd0\u884c\u7684\u64cd\u4f5c\u3002\u8fd9\u5c06\u5bf9\u5f53\u524d\u6682\u5b58\u7684\u6587\u4ef6\u8fd0\u884c\u6240\u6709\u94a9\u5b50\u3002 - <code>pre-commit run --all-files</code>\uff1a\u5bf9\u6240\u6709\u6587\u4ef6\u8fd0\u884c\u6240\u6709\u94a9\u5b50\u3002\u5982\u679c\u60a8\u5728 CI \u4e2d\u4f7f\u7528 pre-commit\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u7528\u7684\u8c03\u7528\u3002 - <code>pre-commit run flake8</code>\uff1a\u5bf9\u6240\u6709\u6682\u5b58\u7684\u6587\u4ef6\u8fd0\u884c <code>flake8</code> \u94a9\u5b50\u3002 - <code>git ls-files -- '*.py' | xargs pre-commit run --files</code>\uff1a\u5bf9\u4ed3\u5e93\u4e2d\u6240\u6709\u7684 <code>*.py</code> \u6587\u4ef6\u8fd0\u884c\u6240\u6709\u94a9\u5b50\u3002 - <code>pre-commit run --from-ref HEAD^^^ --to-ref HEAD</code>\uff1a\u5bf9 <code>HEAD^^^</code> \u548c <code>HEAD</code> \u4e4b\u95f4\u66f4\u6539\u7684\u6587\u4ef6\u8fd0\u884c\u3002\u5f53\u5728 pre-receive \u94a9\u5b50\u4e2d\u4f7f\u7528\u65f6\uff0c\u8fd9\u79cd\u5f62\u5f0f\u5f88\u6709\u7528\u3002</p> <p>Run hooks.</p> <p>Options:</p> <ul> <li><code>[hook-id]</code>: specify a single hook-id to run only that hook.</li> <li><code>-a</code>, <code>--all-files</code>: run on all the files in the repo.</li> <li><code>--files [FILES [FILES ...]]</code>: specific filenames to run hooks on.</li> <li><code>--from-ref FROM_REF</code> + <code>--to-ref TO_REF</code>: run against the files changed   between <code>FROM_REF...TO_REF</code> in git.<ul> <li>new in 2.2.0: prior to 2.2.0 the arguments were <code>--source</code> and   <code>--origin</code>.</li> </ul> </li> <li><code>--hook-stage STAGE</code>: select a <code>stage</code> to run.</li> <li><code>--show-diff-on-failure</code>: when hooks fail, run <code>git diff</code> directly afterward.</li> <li><code>-v</code>, <code>--verbose</code>: produce hook output independent of success.  Include hook   ids in output.</li> </ul> <p>Some example useful invocations: - <code>pre-commit run</code>: this is what pre-commit runs by default when committing.   This will run all hooks against currently staged files. - <code>pre-commit run --all-files</code>: run all the hooks against all the files.  This   is a useful invocation if you are using pre-commit in CI. - <code>pre-commit run flake8</code>: run the <code>flake8</code> hook against all staged files. - <code>git ls-files -- '*.py' | xargs pre-commit run --files</code>: run all hooks   against all <code>*.py</code> files in the repository. - <code>pre-commit run --from-ref HEAD^^^ --to-ref HEAD</code>: run against the files that   have changed between <code>HEAD^^^</code> and <code>HEAD</code>.  This form is useful when   leveraged in a pre-receive hook.</p>"},{"location":"cli/#pre-commit-sample-config-options","title":"pre-commit sample-config [options]","text":"\u4e2d\u6587\u82f1\u6587 <p>\u751f\u6210\u4e00\u4e2a\u793a\u4f8b <code>.pre-commit-config.yaml</code>\u3002</p> <p>\u9009\u9879\uff1a\uff08\u65e0\u5176\u4ed6\u9009\u9879\uff09</p> <p>\u4ee5\u4e0b\u662f <code>.pre-commit-config.yaml</code> \u7684\u4e00\u4e2a\u793a\u4f8b\uff1a</p> <pre><code>repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.3.0\n    hooks:\n    -   id: check-yaml\n    -   id: end-of-file-fixer\n    -   id: trailing-whitespace-fixer\n-   repo: https://github.com/psf/black\n    rev: 22.10.0\n    hooks:\n    -   id: black\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v2.29.0\n    hooks:\n    -   id: pyupgrade\n        args: [--py36-plus]\n-   repo: https://github.com/pre-commit/mirrors-prettier\n    rev: v2.7.0\n    hooks:\n    -   id: prettier\n-   repo: local\n    hooks:\n    -   id: pylint\n        name: pylint\n        entry: pylint --rcfile=.pylintrc $(git ls-files '*.py')\n        language: script\n        types: [python]\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v0.931\n    hooks:\n    -   id: mypy\n        additional_dependencies: [types-pkg_resources]\n-   repo: https://github.com/hadolint/hadolint\n    rev: v2.8.0\n    hooks:\n    -   id: hadolint-docker\n-   repo: https://github.com/shellcheck-py/shellcheck-py\n    rev: v0.7.2.1\n    hooks:\n    -   id: shellcheck\n-   repo: https://github.com/pre-commit/mirrors-eslint\n    rev: v8.10.0\n    hooks:\n    -   id: eslint\n        additional_dependencies:\n          - eslint@7.32.0\n          - eslint-plugin-react@7.28.0\n          - eslint-plugin-import@2.25.2\n          - eslint-config-airbnb@18.2.1\n          - eslint-config-prettier@8.3.0\n</code></pre> <p>\u8fd9\u4e2a\u793a\u4f8b\u914d\u7f6e\u5305\u62ec\u4e86\u591a\u4e2a\u6d41\u884c\u7684\u94a9\u5b50\u4ed3\u5e93\uff0c\u7528\u4e8e\u6267\u884c\u8bf8\u5982\u683c\u5f0f\u5316\u4ee3\u7801\u3001\u68c0\u67e5\u6587\u4ef6\u7ed3\u5c3e\u3001\u4fee\u590d\u5c3e\u968f\u7a7a\u683c\u3001\u8fd0\u884c <code>black</code> \u4ee3\u7801\u683c\u5f0f\u5316\u7a0b\u5e8f\u3001\u5347\u7ea7 Python \u5305\u3001\u8fd0\u884c <code>prettier</code> \u4ee3\u7801\u683c\u5f0f\u5316\u7a0b\u5e8f\u3001\u8fd0\u884c <code>mypy</code> \u9759\u6001\u7c7b\u578b\u68c0\u67e5\u5668\u3001\u68c0\u67e5 Dockerfile \u7684 <code>hadolint</code>\u3001\u68c0\u67e5 shell \u811a\u672c\u7684 <code>shellcheck</code> \u4ee5\u53ca\u8fd0\u884c <code>eslint</code> \u4ee3\u7801\u68c0\u67e5\u5668\u7b49\u4efb\u52a1\u3002\u6b64\u5916\uff0c\u8fd8\u5c55\u793a\u4e86\u5982\u4f55\u914d\u7f6e\u672c\u5730\u94a9\u5b50\u548c\u6307\u5b9a\u989d\u5916\u4f9d\u8d56\u9879\u3002</p> <p>Produce a sample <code>.pre-commit-config.yaml</code>.</p> <p>Options: (no additional options)</p>"},{"location":"cli/#pre-commit-try-repo-repo-options","title":"pre-commit try-repo REPO [options]","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5c1d\u8bd5\u4e00\u4e2a\u4ed3\u5e93\u4e2d\u7684\u94a9\u5b50\uff0c\u8fd9\u5bf9\u4e8e\u5f00\u53d1\u65b0\u7684\u94a9\u5b50\u975e\u5e38\u6709\u7528\u3002 <code>try-repo</code> \u4e5f\u53ef\u4ee5\u7528\u6765\u5728\u6dfb\u52a0\u5230\u4f60\u7684\u914d\u7f6e\u4e4b\u524d\u6d4b\u8bd5\u4e00\u4e2a\u4ed3\u5e93\u3002<code>try-repo</code> \u5728\u8fd0\u884c\u94a9\u5b50\u4e4b\u524d\u4f1a\u6253\u5370\u51fa\u57fa\u4e8e\u8fdc\u7a0b\u94a9\u5b50\u4ed3\u5e93\u751f\u6210\u7684\u914d\u7f6e\u3002</p> <p>\u9009\u9879\uff1a</p> <ul> <li><code>REPO</code>: \u5fc5\u9700\u7684\u53ef\u514b\u9686\u7684\u94a9\u5b50\u4ed3\u5e93\u3002\u53ef\u4ee5\u662f\u78c1\u76d8\u4e0a\u7684\u672c\u5730\u8def\u5f84\u3002</li> <li><code>--ref REF</code>: \u624b\u52a8\u9009\u62e9\u4e00\u4e2a\u5f15\u7528\u6765\u8fd0\u884c\uff0c\u5426\u5219\u5c06\u4f7f\u7528 <code>HEAD</code> \u4fee\u8ba2\u7248\u3002</li> <li><code>pre-commit try-repo</code> \u4e5f\u652f\u6301\u6240\u6709\u53ef\u7528\u7684 <code>pre-commit run</code> \u9009\u9879\u3002</li> </ul> <p>\u4e00\u4e9b\u6709\u7528\u7684\u8c03\u7528\u793a\u4f8b\uff1a</p> <ul> <li><code>pre-commit try-repo https://github.com/pre-commit/pre-commit-hooks</code>: \u5728 <code>pre-commit/pre-commit-hooks</code> \u7684\u6700\u65b0\u4fee\u8ba2\u7248\u4e2d\u8fd0\u884c\u6240\u6709\u94a9\u5b50\u3002</li> <li><code>pre-commit try-repo ../path/to/repo</code>: \u5728\u78c1\u76d8\u4e0a\u7684\u4ed3\u5e93\u4e2d\u8fd0\u884c\u6240\u6709\u94a9\u5b50\u3002</li> <li><code>pre-commit try-repo ../pre-commit-hooks flake8</code>: \u4ec5\u8fd0\u884c\u5728\u672c\u5730 <code>../pre-commit-hooks</code> \u4ed3\u5e93\u4e2d\u914d\u7f6e\u7684 <code>flake8</code> \u94a9\u5b50\u3002</li> <li>\u53c2\u89c1 <code>pre-commit run</code> \u83b7\u53d6\u66f4\u591a\u6709\u7528\u7684 <code>run</code> \u8c03\u7528\u793a\u4f8b\uff0c\u8fd9\u4e9b\u4e5f\u88ab <code>pre-commit try-repo</code> \u652f\u6301\u3002</li> </ul> <p>Try the hooks in a repository, useful for developing new hooks. <code>try-repo</code> can also be used for testing out a repository before adding it to your configuration.  <code>try-repo</code> prints a configuration it generates based on the remote hook repository before running the hooks.</p> <p>Options:</p> <ul> <li><code>REPO</code>: required clonable hooks repository.  Can be a local path on   disk.</li> <li><code>--ref REF</code>: Manually select a ref to run against, otherwise the <code>HEAD</code>   revision will be used.</li> <li><code>pre-commit try-repo</code> also supports all available options for   <code>pre-commit run</code>.</li> </ul> <p>Some example useful invocations: - <code>pre-commit try-repo https://github.com/pre-commit/pre-commit-hooks</code>: runs   all the hooks in the latest revision of <code>pre-commit/pre-commit-hooks</code>. - <code>pre-commit try-repo ../path/to/repo</code>: run all the hooks in a repository on   disk. - <code>pre-commit try-repo ../pre-commit-hooks flake8</code>: run only the <code>flake8</code> hook   configured in a local <code>../pre-commit-hooks</code> repository. - See <code>pre-commit run</code> for more useful <code>run</code> invocations   which are also supported by <code>pre-commit try-repo</code>.</p>"},{"location":"cli/#pre-commit-uninstall-options","title":"pre-commit uninstall [options]","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5378\u8f7d pre-commit \u811a\u672c\u3002</p> <p>\u9009\u9879\uff1a</p> <ul> <li><code>-t HOOK_TYPE, --hook-type HOOK_TYPE</code>: \u6307\u5b9a\u8981\u5378\u8f7d\u7684\u94a9\u5b50\u7c7b\u578b\u3002</li> </ul> <p>Uninstall the pre-commit script.</p> <p>Options:</p> <ul> <li><code>-t HOOK_TYPE, --hook-type HOOK_TYPE</code>: which hook type to uninstall.</li> </ul>"},{"location":"contributing/","title":"\u8d21\u732e","text":"<p>Contributing</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5e0c\u671b\u58ee\u5927\u9879\u76ee\u5e76\u5438\u5f15\u66f4\u591a\u8d21\u732e\u8005\uff0c\u7279\u522b\u662f\u652f\u6301\u66f4\u591a\u8bed\u8a00\u548c\u7248\u672c\u3002\u6211\u4eec\u8fd8\u5e0c\u671b\u5c06 .pre-commit-hooks.yaml \u6587\u4ef6\u6dfb\u52a0\u5230\u6d41\u884c\u7684\u4ee3\u7801\u68c0\u67e5\u5de5\u5177\u4e2d\uff0c\u800c\u4e0d\u7ef4\u62a4\u5206\u53c9\u6216\u955c\u50cf\u3002</p> <p>\u6b22\u8fce\u63d0\u4ea4\u9519\u8bef\u62a5\u544a\u3001\u62c9\u53d6\u8bf7\u6c42\u548c\u529f\u80fd\u8bf7\u6c42\u3002</p> <p>We\u2019re looking to grow the project and get more contributors especially to support more languages/versions. We\u2019d also like to get the .pre-commit-hooks.yaml files added to popular linters without maintaining forks / mirrors.</p> <p>Feel free to submit bug reports, pull requests, and feature requests.</p>"},{"location":"contributing/#\u6350\u8d60","title":"\u6350\u8d60","text":"<p>Sponsoring</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u6216\u60a8\u7684\u516c\u53f8\u5e0c\u671b\u652f\u6301 pre-commit \u7684\u5f00\u53d1\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8d21\u732e\uff1a</p> <ul> <li>GitHub Sponsors (asottile)</li> <li>Open Collective</li> </ul> <p>If you or your company would like to support the development of pre-commit one can contribute in the following ways:</p> <ul> <li>GitHub Sponsors (asottile)</li> <li>Open Collective</li> </ul>"},{"location":"contributing/#\u83b7\u53d6\u5e2e\u52a9","title":"\u83b7\u53d6\u5e2e\u52a9","text":"<p>Getting help</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u51e0\u79cd\u65b9\u5f0f\u53ef\u4ee5\u83b7\u5f97\u6709\u5173 pre-commit \u7684\u5e2e\u52a9\uff1a</p> <ul> <li>\u5728 stackoverflow  \u4e0a\u63d0\u95ee\uff0c\u6807\u7b7e\u4e3a <code>&lt;kbd&gt;pre-commit.com&lt;/kbd&gt;</code></li> <li>\u5728 pre-commit/pre-commit \u4e0a\u521b\u5efa\u4e00\u4e2a\u95ee\u9898</li> <li>\u5728 asottile \u7684 Twitch Discord \u4e2d\u7684 #pre-commit \u9891\u9053\u63d0\u95ee</li> </ul> <p>There are several ways to get help for pre-commit:</p> <ul> <li>Ask a question on [stackoverflow tagged <code>&lt;kbd&gt;pre-commit.com&lt;/kbd&gt;</code>]</li> <li>Create an issue on pre-commit/pre-commit</li> <li>Ask in the #pre-commit channel in asottile's twitch discord</li> </ul>"},{"location":"contributing/#\u8d21\u732e\u5217\u8868","title":"\u8d21\u732e\u5217\u8868","text":"<p>Contributors</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>\u7f51\u7ad9\u7531 Molly Finkle \u521b\u5efa</li> <li>\u7531 Anthony Sottile \u521b\u5efa</li> <li>\u6838\u5fc3\u5f00\u53d1\u8005\uff1aKen Struys\u3001Chris Kuehl</li> <li>\u6846\u67b6\u8d21\u732e\u8005</li> <li>\u6838\u5fc3\u94a9\u5b50\u8d21\u732e\u8005</li> <li>\u4ee5\u53ca\u50cf\u60a8\u4e00\u6837\u7684\u7528\u6237\uff01</li> </ul> <ul> <li>website by Molly Finkle</li> <li>created by Anthony Sottile</li> <li>core developers: Ken Struys, Chris Kuehl</li> <li>framework contributors</li> <li>core hook contributors</li> <li>and users like you!</li> </ul>"},{"location":"hooks/","title":"\u652f\u6301\u7684\u94a9\u5b50","text":"<p>Supported hooks</p>"},{"location":"hooks/#\u7cbe\u9009\u94a9\u5b50","title":"\u7cbe\u9009\u94a9\u5b50","text":"<p>featured hooks</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u91cc\u6709\u4e00\u4e9b\u7cbe\u9009\u7684\u4ed3\u5e93\uff0c\u63d0\u4f9b pre-commit \u96c6\u6210\u3002</p> <p>\u8fd9\u4e9b\u4ed3\u5e93\u76f8\u5f53\u53d7\u6b22\u8fce\uff0c\u5e76\u4e14\u901a\u5e38\u5728\u5927\u591a\u6570\u8bbe\u7f6e\u4e2d\u8fd0\u884c\u826f\u597d\uff01</p> <p>\u6b64\u5217\u8868\u5e76\u4e0d\u65e8\u5728\u8be6\u5c3d\u65e0\u9057</p> <p>\u7531 pre-commit \u56e2\u961f\u63d0\u4f9b\uff1a</p> <ul> <li>pre-commit/pre-commit-hooks\uff1a\u4e00\u5c0f\u90e8\u5206\u4e0e\u8bed\u8a00\u65e0\u5173\u7684\u94a9\u5b50\uff0c\u666e\u904d\u6709\u7528\uff01</li> <li>pre-commit/pygrep-hooks\uff1a\u4e00\u4e9b\u5feb\u901f\u7684\u57fa\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u94a9\u5b50\uff0c\u7528\u4e8e\u5feb\u901f\u8bed\u6cd5\u68c0\u67e5</li> <li>pre-commit/sync-pre-commit-deps\uff1a\u57fa\u4e8e\u5176\u4ed6\u5df2\u5b89\u88c5\u94a9\u5b50\u540c\u6b65 pre-commit \u94a9\u5b50\u4f9d\u8d56\u9879</li> <li>pre-commit/mirrors-*\uff1a\u4e00\u4e9b\u6d41\u884c\u5de5\u5177\u7684 pre-commit \u955c\u50cf</li> </ul> <p>\u9488\u5bf9 Python \u9879\u76ee\uff1a</p> <ul> <li>asottile/pyupgrade\uff1a\u81ea\u52a8\u5347\u7ea7\u8bed\u8a00\u7684\u65b0\u7248\u672c\u8bed\u6cd5</li> <li>asottile/(others)\uff1apre-commit \u521b\u5efa\u8005\u7684\u5176\u4ed6\u51e0\u4e2a\u4ed3\u5e93</li> <li>psf/black\uff1a\u4e0d\u59a5\u534f\u7684 Python \u4ee3\u7801\u683c\u5f0f\u5316\u5de5\u5177</li> <li>hhatto/autopep8\uff1a\u81ea\u52a8\u4fee\u590d PEP8 \u8fdd\u89c4</li> <li>astral-sh/ruff-pre-commit\uff1aPython \u7684 ruff linter \u548c\u683c\u5f0f\u5316\u5de5\u5177</li> <li>google/yapf\uff1a\u9ad8\u5ea6\u53ef\u914d\u7f6e\u7684 Python \u683c\u5f0f\u5316\u5de5\u5177</li> <li>PyCQA/flake8\uff1aPython \u7684 linting \u6846\u67b6</li> <li>PyCQA/isort\uff1aPython \u7684\u5bfc\u5165\u6392\u5e8f\u5de5\u5177</li> <li>PyCQA/(others)\uff1a\u5176\u4ed6\u4e00\u4e9b Python \u4ee3\u7801\u8d28\u91cf\u5de5\u5177</li> <li>adamchainz/django-upgrade\uff1a\u81ea\u52a8\u5347\u7ea7\u60a8\u7684 Django \u9879\u76ee\u4ee3\u7801</li> </ul> <p>\u9488\u5bf9 Shell \u811a\u672c\uff1a</p> <ul> <li>shellcheck-py/shellcheck-py: \u5bf9\u60a8\u7684\u811a\u672c\u8fd0\u884c shellcheck</li> <li>openstack/bashate: \u5bf9 Bash \u7a0b\u5e8f\u8fdb\u884c\u4ee3\u7801\u98ce\u683c\u68c0\u67e5</li> </ul> <p>\u9488\u5bf9 Web\uff1a</p> <ul> <li>biomejs/pre-commit: \u7528 Rust \u7f16\u5199\u7684\u5feb\u901f\u683c\u5f0f\u5316\u5de5\u5177</li> <li>standard/standard: \u4ee3\u7801\u68c0\u67e5\u548c\u4fee\u590d\u5de5\u5177</li> <li>shssoichiro/oxipng: \u4f18\u5316 PNG \u6587\u4ef6</li> </ul> <p>\u9488\u5bf9\u914d\u7f6e\u6587\u4ef6\uff1a</p> <ul> <li>python-jsonschema/check-jsonschema: \u4f7f\u7528 jsonschema \u68c0\u67e5\u5e38\u89c1\u914d\u7f6e</li> <li>rhysd/actionlint: \u68c0\u67e5 GitHub Actions \u5de5\u4f5c\u6d41\u6587\u4ef6</li> <li>google/yamlfmt: YAML \u6587\u4ef6\u683c\u5f0f\u5316\u5de5\u5177</li> <li>adrienverge/yamllint: YAML \u6587\u4ef6\u68c0\u67e5\u5de5\u5177</li> </ul> <p>\u9488\u5bf9\u6587\u672c / \u6587\u6863 / \u6563\u6587\uff1a</p> <ul> <li>crate-ci/typos: \u67e5\u627e\u548c\u4fee\u590d\u5e38\u89c1\u7684\u6392\u7248\u9519\u8bef</li> <li>thlorenz/doctoc: \u5728 Markdown \u6587\u4ef6\u4e2d\u751f\u6210\u76ee\u5f55</li> <li>amperser/proselint: \u6563\u6587\u68c0\u67e5\u5de5\u5177</li> <li>markdownlint/markdownlint: Markdown \u68c0\u67e5\u5de5\u5177</li> <li>codespell-project/codespell: \u68c0\u67e5\u4ee3\u7801\u4e2d\u7684\u5e38\u89c1\u62fc\u5199\u9519\u8bef</li> </ul> <p>\u9488\u5bf9\u63d0\u4ea4\u4fe1\u606f\u68c0\u67e5\uff1a</p> <ul> <li>jorisroovers/gitlint</li> <li>commitizen-tools/commitizen</li> </ul> <p>\u9488\u5bf9\u79d8\u5bc6\u626b\u63cf / \u5b89\u5168\uff1a</p> <ul> <li>gitleaks/gitleaks</li> <li>trufflesecurity/truffleHog</li> <li>thoughtworks/talisman</li> </ul> <p>\u9488\u5bf9\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\uff1a</p> <ul> <li>realm/SwiftLint: \u5f3a\u5236\u6267\u884c Swift \u98ce\u683c\u548c\u7ea6\u5b9a</li> <li>nicklockwood/SwiftFormat: Swift \u7684\u683c\u5f0f\u5316\u5de5\u5177</li> <li>AleksaC/terraform-py: \u683c\u5f0f\u5316\u548c\u9a8c\u8bc1 Terraform \u8bed\u6cd5</li> <li>rubocop/rubocop: Ruby \u7684\u9759\u6001\u5206\u6790\u548c\u683c\u5f0f\u5316</li> <li>bufbuild/buf: Protocol Buffers \u5de5\u5177</li> <li>sqlfluff/sqlfluff: SQL \u7684\u6a21\u5757\u5316\u68c0\u67e5\u548c\u81ea\u52a8\u683c\u5f0f\u5316\u5de5\u5177</li> <li>aws-cloudformation/cfn-lint: AWS CloudFormation \u68c0\u67e5\u5de5\u5177</li> <li>google/go-jsonnet: jsonnet \u7684\u68c0\u67e5\u548c\u683c\u5f0f\u5316\u5de5\u5177</li> <li>JohnnyMorganz/StyLua: \u6709\u4e2a\u6027\u5316\u7684 Lua \u4ee3\u7801\u683c\u5f0f\u5316\u5de5\u5177</li> <li>Koihik/LuaFormatter: Lua \u4ee3\u7801\u7684\u683c\u5f0f\u5316\u5de5\u5177</li> <li>mrtazz/checkmake: Makefile \u8bed\u6cd5\u68c0\u67e5\u5de5\u5177</li> </ul> <p>here are a few hand-picked repositories which provide pre-commit integrations.</p> <p>these are fairly popular and are generally known to work well in most setups!</p> <p>this list is not intended to be exhaustive</p> <p>provided by the pre-commit team:</p> <ul> <li>pre-commit/pre-commit-hooks: a handful of language-agnostic hooks which   are universally useful!</li> <li>pre-commit/pygrep-hooks: a few quick regex-based hooks for a handful of   quick syntax checks</li> <li>pre-commit/sync-pre-commit-deps: sync pre-commit hook dependencies based   on other installed hooks</li> <li>pre-commit/mirrors-*: pre-commit mirrors of a handful of popular tools</li> </ul> <p>for python projects:</p> <ul> <li>asottile/pyupgrade: automatically upgrade syntax for newer versions of the   language</li> <li>asottile/(others): a few other repos by the pre-commit creator</li> <li>psf/black: The uncompromising Python code formatter</li> <li>hhatto/autopep8: automatically fixes PEP8 violations</li> <li>astral-sh/ruff-pre-commit: the ruff linter and formatter for python</li> <li>google/yapf: a highly configurable python formatter</li> <li>PyCQA/flake8: a linter framework for python</li> <li>PyCQA/isort: an import sorter for python</li> <li>PyCQA/(others): a few other python code quality tools</li> <li>adamchainz/django-upgrade: automatically upgrade your Django project code</li> </ul> <p>for shell scripts:</p> <ul> <li>shellcheck-py/shellcheck-py: runs shellcheck on your scripts</li> <li>openstack/bashate: code style enforcement for bash programs</li> </ul> <p>for the web:</p> <ul> <li>biomejs/pre-commit: a fast formatter / fixer written in rust</li> <li>standard/standard: linter / fixer</li> <li>shssoichiro/oxipng: optimize png files</li> </ul> <p>for configuration files:</p> <ul> <li>python-jsonschema/check-jsonschema: check many common configurations with jsonschema</li> <li>rhysd/actionlint: lint your GitHub Actions workflow files</li> <li>google/yamlfmt: a formatter for yaml files</li> <li>adrienverge/yamllint: a linter for YAML files</li> </ul> <p>for text / docs / prose:</p> <ul> <li>crate-ci/typos: find and fix common typographical errors</li> <li>thlorenz/doctoc: generate a table-of-contents in markdown files</li> <li>amperser/proselint: A linter for prose.</li> <li>markdownlint/markdownlint: a Markdown lint tool</li> <li>codespell-project/codespell: check code for common misspellings</li> </ul> <p>for linting commit messages:</p> <ul> <li>jorisroovers/gitlint</li> <li>commitizen-tools/commitizen</li> </ul> <p>for secret scanning / security:</p> <ul> <li>gitleaks/gitleaks</li> <li>trufflesecurity/truffleHog</li> <li>thoughtworks/talisman</li> </ul> <p>for other programming languages:</p> <ul> <li>realm/SwiftLint: enforce Swift style and conventions</li> <li>nicklockwood/SwiftFormat: a formatter for Swift</li> <li>AleksaC/terraform-py: format and validate terraform syntax</li> <li>rubocop/rubocop: static analysis and formatting for Ruby</li> <li>bufbuild/buf: tooling for Protocol Buffers</li> <li>sqlfluff/sqlfluff: a modular linter and auto formatter for SQL</li> <li>aws-cloudformation/cfn-lint: aws CloudFormation linter</li> <li>google/go-jsonnet: linter / formatter for jsonnet</li> <li>JohnnyMorganz/StyLua: an opinionated Lua code formatter</li> <li>Koihik/LuaFormatter: a formatter for Lua code</li> <li>mrtazz/checkmake: linter for Makefile syntax</li> </ul>"},{"location":"hooks/#\u5bfb\u627e\u94a9\u5b50","title":"\u5bfb\u627e\u94a9\u5b50","text":"<p>finding hooks</p> \u4e2d\u6587 <p>\u5efa\u8bae\u4f7f\u7528\u60a8\u559c\u6b22\u7684\u641c\u7d22\u5de5\u5177\u67e5\u627e\u53ef\u5728\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u73b0\u6709\u94a9\u5b50\u3002</p> <p>\u4f8b\u5982\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u60a8\u53ef\u80fd\u89c9\u5f97\u6709\u7528\u7684\u641c\u7d22\uff0c\u4f7f\u7528 sourcegraph\uff1a</p> <ul> <li>\u5728 Python \u6587\u4ef6\u4e0a\u8fd0\u884c\u7684\u94a9\u5b50\uff1a<code>file:^\\.pre-commit-hooks\\.yaml$ \"types: [python]\"</code></li> <li>\u5728 Shell \u6587\u4ef6\u4e0a\u8fd0\u884c\u7684\u94a9\u5b50\uff1a<code>file:^\\.pre-commit-hooks\\.yaml$ \"types: [shell]\"</code></li> <li>\u6d41\u884c\u9879\u76ee\u4e2d\u7684 pre-commit \u914d\u7f6e\uff1a<code>file:^\\.pre-commit-config\\.yaml$</code></li> </ul> <p>\u60a8\u4e5f\u53ef\u4ee5\u53d1\u73b0 GitHub \u7684\u641c\u7d22 \u53ef\u80fd\u6709\u7528\uff0c\u5c3d\u7ba1\u5176\u67e5\u8be2\u548c\u6392\u5e8f\u529f\u80fd\u76f8\u5f53\u6709\u9650\uff0c\u5e76\u4e14\u9700\u8981\u767b\u5f55\uff1a</p> <ul> <li>\u63d0\u4f9b\u94a9\u5b50\u7684\u4ed3\u5e93\uff1a<code>path:.pre-commit-hooks.yaml language:YAML</code></li> </ul> \u82f1\u6587 <p>it's recommended to use your favorite searching tool to find existing hooks to   use in your project.</p> <p>for example, here's some searches you may find useful using sourcegraph:</p> <ul> <li>hooks which run on python files: <code>file:^\\.pre-commit-hooks\\.yaml$ \"types: [python]\"</code></li> <li>hooks which run on shell files: <code>file:^\\.pre-commit-hooks\\.yaml$ \"types: [shell]\"</code></li> <li>pre-commit configurations in popular projects: <code>file:^\\.pre-commit-config\\.yaml$</code></li> </ul> <p>you may also find github's search useful as well, though its querying and   sorting capabilities are quite limited plus it requires a login:</p> <ul> <li>repositories providing hooks: <code>path:.pre-commit-hooks.yaml language:YAML</code></li> </ul>"},{"location":"hooks/#\u6dfb\u52a0\u5230\u6b64\u9875\u9762","title":"\u6dfb\u52a0\u5230\u6b64\u9875\u9762","text":"<p>adding to this page</p> \u4e2d\u6587\u82f1\u6587 <p>\u6b64\u9875\u9762\u7684\u5148\u524d\u7248\u672c\u662f\u4e00\u4e2a\u94a9\u5b50\u5217\u8868\uff0c\u7ef4\u62a4\u6240\u5217\u5de5\u5177\u7684\u8d28\u91cf\u975e\u5e38\u7e41\u7410\u3002</p> <p>\u6b64\u9875\u9762\u5e76\u4e0d\u65e8\u5728\u8be6\u5c3d\u65e0\u9057</p> <p>\u60a8\u53ef\u4ee5\u53d1\u9001 \u62c9\u53d6\u8bf7\u6c42 \u6765\u6269\u5c55\u6b64\u5217\u8868\uff0c\u4f46\u6709\u4e00\u4e9b\u8981\u6c42\u60a8 \u5fc5\u987b \u9075\u5faa\uff0c\u5426\u5219\u60a8\u7684 PR \u5c06\u88ab\u5173\u95ed\u800c\u4e0d\u4f5c\u8bc4\u8bba\uff1a</p> <ul> <li>\u5de5\u5177\u5fc5\u987b\u5df2\u7ecf\u76f8\u5f53\u53d7\u6b22\u8fce\uff08&gt;500 \u661f\uff09</li> <li>\u5de5\u5177\u5fc5\u987b\u4f7f\u7528\u53d7\u7ba1\u7406\u7684\u8bed\u8a00\uff08\u4e0d\u5141\u8bb8\u4f7f\u7528 <code>system</code> / <code>script</code> / <code>docker</code> \u94a9\u5b50\uff09</li> <li>\u5de5\u5177\u5fc5\u987b\u64cd\u4f5c\u6587\u4ef6</li> </ul> <p>the previous iteration of this page was a laundry list of hooks and maintaining quality of the listed tools was cumbersome.</p> <p>this page is not intended to be exhaustive</p> <p>you may send a pull request to expand this list however there are a few requirements you must follow or your PR will be closed without comment:</p> <ul> <li>the tool must already be fairly popular (&gt;500 stars)</li> <li>the tool must use a managed language (no <code>system</code> / <code>script</code> / <code>docker</code> hooks)</li> <li>the tool must operate on files</li> </ul>"},{"location":"install/","title":"\u5b89\u88c5","text":"<p>Installation</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u60a8\u53ef\u4ee5\u8fd0\u884c\u94a9\u5b50\u4e4b\u524d\uff0c\u9700\u8981\u5b89\u88c5 pre-commit \u5305\u7ba1\u7406\u5668\u3002</p> <p>\u4f7f\u7528 pip\uff1a</p> <pre><code>pip install pre-commit\n</code></pre> <p>\u5728 Python \u9879\u76ee\u4e2d\uff0c\u5c06\u4ee5\u4e0b\u5185\u5bb9\u6dfb\u52a0\u5230\u60a8\u7684 requirements.txt\uff08\u6216 requirements-dev.txt\uff09\u4e2d\uff1a</p> <pre><code>pre-commit\n</code></pre> <p>\u4f5c\u4e3a\u4e00\u4e2a\u96f6\u4f9d\u8d56\u7684 zipapp\uff1a</p> <ul> <li>\u4ece github releases \u627e\u5230\u5e76\u4e0b\u8f7d <code>.pyz</code> \u6587\u4ef6</li> <li>\u7528 <code>python pre-commit-#.#.#.pyz ...</code> \u66ff\u4ee3 <code>pre-commit ...</code> \u8fd0\u884c</li> </ul> <p>Before you can run hooks, you need to have the pre-commit package manager installed.</p> <p>Using pip:</p> <pre><code>pip install pre-commit\n</code></pre> <p>In a python project, add the following to your requirements.txt (or requirements-dev.txt):</p> <pre><code>pre-commit\n</code></pre> <p>As a 0-dependency zipapp:</p> <ul> <li>locate and download the <code>.pyz</code> file from the github releases</li> <li>run <code>python pre-commit-#.#.#.pyz ...</code> in place of <code>pre-commit ...</code></li> </ul>"},{"location":"install/#\u5feb\u901f\u5f00\u59cb","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>Quick start</p>"},{"location":"install/#1-\u5b89\u88c5-pre-commit","title":"1. \u5b89\u88c5 pre-commit","text":"<p>1. Install pre-commit</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>\u6309\u7167\u4e0a\u9762\u7684\u5b89\u88c5\u6307\u793a\u64cd\u4f5c</li> <li>\u8fd0\u884c <code>pre-commit --version</code> \u5e94\u8be5\u80fd\u663e\u793a\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u7248\u672c\u53f7</li> </ul> <pre><code>pre-commit --version\n</code></pre> <ul> <li>follow the install instructions above</li> <li><code>pre-commit --version</code> should show you what version you're using</li> </ul> <pre><code>pre-commit --version\n</code></pre>"},{"location":"install/#2-\u6dfb\u52a0\u4e00\u4e2a-pre-commit-\u914d\u7f6e","title":"2. \u6dfb\u52a0\u4e00\u4e2a pre-commit \u914d\u7f6e","text":"<p>2. Add a pre-commit configuration</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>.pre-commit-config.yaml</code> \u7684\u6587\u4ef6</li> <li>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>pre-commit sample-config</code> \u751f\u6210\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684\u914d\u7f6e</li> <li>\u914d\u7f6e\u7684\u5b8c\u6574\u9009\u9879\u5217\u8868\u5728\u4e0b\u9762\u5217\u51fa</li> <li>\u8fd9\u4e2a\u4f8b\u5b50\u4f7f\u7528\u4e86 Python \u4ee3\u7801\u7684\u683c\u5f0f\u5316\u5668\uff0c\u4f46\u662f <code>pre-commit</code> \u9002\u7528\u4e8e\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00</li> <li>\u5176\u4ed6\u652f\u6301\u7684\u94a9\u5b50\u4e5f\u662f\u53ef\u7528\u7684</li> </ul> <pre><code>repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks \n    rev: v2.3.0\n    hooks:\n    -   id: check-yaml\n    -   id: end-of-file-fixer\n    -   id: trailing-whitespace\n-   repo: https://github.com/psf/black \n    rev: 22.10.0\n    hooks:\n    -   id: black\n</code></pre> <ul> <li>create a file named <code>.pre-commit-config.yaml</code></li> <li>you can generate a very basic configuration using     <code>pre-commit sample-config</code></li> <li>the full set of options for the configuration are listed below</li> <li>this example uses a formatter for python code, however <code>pre-commit</code> works for     any programming language</li> <li>other supported hooks are available</li> </ul> <pre><code>repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.3.0\n    hooks:\n    -   id: check-yaml\n    -   id: end-of-file-fixer\n    -   id: trailing-whitespace\n-   repo: https://github.com/psf/black\n    rev: 22.10.0\n    hooks:\n    -   id: black\n</code></pre>"},{"location":"install/#3-\u5b89\u88c5-git-hook-\u811a\u672c","title":"3. \u5b89\u88c5 git hook \u811a\u672c","text":"<p>3. Install the git hook scripts</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>\u8fd0\u884c <code>pre-commit install</code> \u6765\u8bbe\u7f6e Git \u94a9\u5b50\u811a\u672c</li> </ul> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <ul> <li>\u73b0\u5728 <code>pre-commit</code> \u4f1a\u5728 <code>git commit</code> \u65f6\u81ea\u52a8\u8fd0\u884c\uff01</li> </ul> <ul> <li>run <code>pre-commit install</code> to set up the git hook scripts</li> </ul> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <ul> <li>now <code>pre-commit</code> will run automatically on <code>git commit</code>!</li> </ul>"},{"location":"install/#4-\u53ef\u9009\u9488\u5bf9\u6240\u6709\u6587\u4ef6\u8fd0\u884c","title":"4. \uff08\u53ef\u9009\uff09\u9488\u5bf9\u6240\u6709\u6587\u4ef6\u8fd0\u884c","text":"<p>4. (optional) Run against all the files</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>\u901a\u5e38\u5728\u6dfb\u52a0\u65b0\u94a9\u5b50\u65f6\uff0c\u5bf9\u6240\u6709\u6587\u4ef6\u8fd0\u884c\u94a9\u5b50\u662f\u4e2a\u597d\u4e3b\u610f\uff08\u901a\u5e38 <code>pre-commit</code> \u53ea\u4f1a\u5728 Git \u94a9\u5b50\u671f\u95f4\u5bf9\u53d8\u66f4\u7684\u6587\u4ef6\u8fd0\u884c\uff09</li> </ul> <pre><code>$ pre-commit run --all-files\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks. \n[INFO] Initializing environment for https://github.com/psf/black. \n[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks. \n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\n[INFO] Installing environment for https://github.com/psf/black. \n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nCheck Yaml...............................................................Passed\nFix End of Files.........................................................Passed\nTrim Trailing Whitespace.................................................Failed\n- hook id: trailing-whitespace\n- exit code: 1\n\nFiles were modified by this hook. Additional output:\n\nFixing sample.py\n\nblack....................................................................Passed\n</code></pre> <ul> <li>\u54ce\u5440\uff01\u770b\u8d77\u6765\u6211\u7684\u6587\u4ef6\u6709\u4e00\u4e9b\u5c3e\u968f\u7a7a\u767d</li> <li>\u8003\u8651\u5728\u6301\u7eed\u96c6\u6210\u4e2d\u4e5f\u8fd0\u884c\u8fd9\u4e2a\u94a9\u5b50</li> </ul> <ul> <li>it's usually a good idea to run the hooks against all of the files when adding   new hooks (usually <code>pre-commit</code> will only run on the changed files during   git hooks)</li> </ul> <pre><code>$ pre-commit run --all-files\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.\n[INFO] Initializing environment for https://github.com/psf/black.\n[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\n[INFO] Installing environment for https://github.com/psf/black.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nCheck Yaml...............................................................Passed\nFix End of Files.........................................................Passed\nTrim Trailing Whitespace.................................................Failed\n- hook id: trailing-whitespace\n- exit code: 1\n\nFiles were modified by this hook. Additional output:\n\nFixing sample.py\n\nblack....................................................................Passed\n</code></pre> <ul> <li>oops! looks like I had some trailing whitespace</li> <li>consider running that in CI too</li> </ul>"},{"location":"intro/","title":"\u7b80\u4ecb","text":"<p>Introduction</p> \u4e2d\u6587\u82f1\u6587 <p>Git \u94a9\u5b50\u811a\u672c\u5728\u63d0\u4ea4\u4ee3\u7801\u5ba1\u67e5\u4e4b\u524d\u8bc6\u522b\u7b80\u5355\u95ee\u9898\u975e\u5e38\u6709\u7528\u3002\u6211\u4eec\u5728\u6bcf\u6b21\u63d0\u4ea4\u65f6\u8fd0\u884c\u94a9\u5b50\uff0c\u81ea\u52a8\u6307\u51fa\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u7f3a\u5c11\u5206\u53f7\u3001\u5c3e\u968f\u7a7a\u683c\u548c\u8c03\u8bd5\u8bed\u53e5\u3002\u5728\u4ee3\u7801\u5ba1\u67e5\u4e4b\u524d\u6307\u51fa\u8fd9\u4e9b\u95ee\u9898\uff0c\u4f7f\u5f97\u4ee3\u7801\u5ba1\u67e5\u8005\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u66f4\u6539\u7684\u67b6\u6784\uff0c\u800c\u4e0d\u6d6a\u8d39\u65f6\u95f4\u5904\u7406\u7410\u788e\u7684\u98ce\u683c\u95ee\u9898\u3002</p> <p>\u968f\u7740\u6211\u4eec\u521b\u5efa\u66f4\u591a\u5e93\u548c\u9879\u76ee\uff0c\u6211\u4eec\u610f\u8bc6\u5230\u5728\u9879\u76ee\u4e4b\u95f4\u5171\u4eab\u9884\u63d0\u4ea4\u94a9\u5b50\u662f\u75db\u82e6\u7684\u3002\u6211\u4eec\u4ece\u4e00\u4e2a\u9879\u76ee\u590d\u5236\u7c98\u8d34\u7b28\u91cd\u7684 Bash \u811a\u672c\uff0c\u5e76\u4e14\u5fc5\u987b\u624b\u52a8\u66f4\u6539\u94a9\u5b50\u4ee5\u9002\u5e94\u4e0d\u540c\u7684\u9879\u76ee\u7ed3\u6784\u3002</p> <p>\u6211\u4eec\u76f8\u4fe1\uff0c\u60a8\u5e94\u8be5\u59cb\u7ec8\u4f7f\u7528\u6700\u4f73\u7684\u884c\u4e1a\u6807\u51c6\u4ee3\u7801\u68c0\u67e5\u5de5\u5177\u3002\u4e00\u4e9b\u6700\u597d\u7684\u4ee3\u7801\u68c0\u67e5\u5de5\u5177\u662f\u7528\u60a8\u5728\u9879\u76ee\u4e2d\u672a\u4f7f\u7528\u6216\u672a\u5b89\u88c5\u7684\u8bed\u8a00\u7f16\u5199\u7684\u3002\u4f8b\u5982\uff0cscss-lint \u662f\u4e00\u4e2a\u4e3a SCSS \u7f16\u5199\u7684 Ruby \u4ee3\u7801\u68c0\u67e5\u5de5\u5177\u3002\u5982\u679c\u60a8\u5728 Node.js \u4e2d\u7f16\u5199\u9879\u76ee\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u5728\u4e0d\u6dfb\u52a0 Gemfile \u6216\u4e86\u89e3\u5982\u4f55\u5b89\u88c5 scss-lint \u7684\u60c5\u51b5\u4e0b\u4f7f\u7528 scss-lint \u4f5c\u4e3a\u9884\u63d0\u4ea4\u94a9\u5b50\u3002</p> <p>\u6211\u4eec\u6784\u5efa\u4e86 pre-commit \u6765\u89e3\u51b3\u94a9\u5b50\u95ee\u9898\u3002\u5b83\u662f\u4e00\u4e2a\u591a\u8bed\u8a00\u7684\u9884\u63d0\u4ea4\u94a9\u5b50\u5305\u7ba1\u7406\u5668\u3002\u60a8\u53ef\u4ee5\u6307\u5b9a\u8981\u4f7f\u7528\u7684\u94a9\u5b50\u5217\u8868\uff0c\u800c pre-commit \u4f1a\u7ba1\u7406\u5728\u6bcf\u6b21\u63d0\u4ea4\u4e4b\u524d\u5b89\u88c5\u548c\u6267\u884c\u4efb\u4f55\u7528\u4efb\u4f55\u8bed\u8a00\u7f16\u5199\u7684\u94a9\u5b50\u3002pre-commit \u8bbe\u8ba1\u65f6\u7279\u522b\u8003\u8651\u5230\u4e0d\u9700\u8981\u6839\u6743\u9650\u3002\u5982\u679c\u60a8\u7684\u5f00\u53d1\u4eba\u5458\u6ca1\u6709\u5b89\u88c5 Node\uff0c\u4f46\u4fee\u6539\u4e86 JavaScript \u6587\u4ef6\uff0cpre-commit \u4f1a\u81ea\u52a8\u5904\u7406\u4e0b\u8f7d\u548c\u6784\u5efa Node\uff0c\u4ee5\u5728\u6ca1\u6709\u6839\u6743\u9650\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c eslint\u3002</p> <p>Git hook scripts are useful for identifying simple issues before submission to code review.  We run our hooks on every commit to automatically point out issues in code such as missing semicolons, trailing whitespace, and debug statements.  By pointing these issues out before code review, this allows a code reviewer to focus on the architecture of a change while not wasting time with trivial style nitpicks.</p> <p>As we created more libraries and projects we recognized that sharing our pre-commit hooks across projects is painful. We copied and pasted unwieldy bash scripts from project to project and had to manually change the hooks to work for different project structures.</p> <p>We believe that you should always use the best industry standard linters. Some of the best linters are written in languages that you do not use in your project or have installed on your machine. For example scss-lint is a linter for SCSS written in Ruby. If you\u2019re writing a project in node you should be able to use scss-lint as a pre-commit hook without adding a Gemfile to your project or understanding how to get scss-lint installed.</p> <p>We built pre-commit to solve our hook issues. It is a multi-language package manager for pre-commit hooks. You specify a list of hooks you want and pre-commit manages the installation and execution of any hook written in any language before every commit. pre-commit is specifically designed to not require root access. If one of your developers doesn\u2019t have node installed but modifies a JavaScript file, pre-commit automatically handles downloading and building node to run eslint without root.</p>"},{"location":"new-hooks/","title":"\u521b\u5efa\u65b0\u94a9\u5b50","text":"<p>Creating new hooks</p> \u4e2d\u6587\u82f1\u6587 <p>pre-commit \u5f53\u524d\u652f\u6301\u7528\u8bb8\u591a\u8bed\u8a00\u7f16\u5199\u7684\u94a9\u5b50\u3002\u53ea\u8981\u60a8\u7684 git \u4ed3\u5e93\u662f\u4e00\u4e2a\u53ef\u5b89\u88c5\u7684\u5305\uff08gem\u3001npm\u3001pypi \u7b49\uff09\u6216\u516c\u5f00\u4e86\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u4e0e pre-commit \u4e00\u8d77\u4f7f\u7528\u3002\u6bcf\u4e2a git \u4ed3\u5e93\u53ef\u4ee5\u652f\u6301\u60a8\u60f3\u8981\u7684\u4efb\u610f\u6570\u91cf\u7684\u8bed\u8a00/\u94a9\u5b50\u3002</p> <p>\u94a9\u5b50\u5fc5\u987b\u5728\u5931\u8d25\u65f6\u9000\u51fa\u975e\u96f6\u72b6\u6001\uff0c\u6216\u4fee\u6539\u6587\u4ef6\u3002</p> <p>\u5305\u542b pre-commit \u63d2\u4ef6\u7684 git \u4ed3\u5e93\u5fc5\u987b\u5305\u542b\u4e00\u4e2a <code>.pre-commit-hooks.yaml</code> \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u544a\u8bc9 pre-commit\uff1a</p> \u914d\u7f6e\u9879 \u63cf\u8ff0 <code>id</code> \u94a9\u5b50\u7684 ID - \u5728 <code>pre-commit-config.yaml</code> \u4e2d\u4f7f\u7528\u3002 <code>name</code> \u94a9\u5b50\u7684\u540d\u79f0 - \u5728\u94a9\u5b50\u6267\u884c\u671f\u95f4\u663e\u793a\u3002 <code>entry</code> \u5165\u53e3\u70b9 - \u8981\u8fd0\u884c\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002<code>entry</code> \u8fd8\u53ef\u4ee5\u5305\u542b\u4e0d\u4f1a\u88ab\u8986\u76d6\u7684\u53c2\u6570\uff0c\u4f8b\u5982 <code>entry: autopep8 -i</code>\u3002 <code>language</code> \u94a9\u5b50\u7684\u8bed\u8a00 - \u544a\u8bc9 pre-commit \u5982\u4f55\u5b89\u88c5\u94a9\u5b50\u3002 <code>files</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>''</code>\uff09\u8981\u8fd0\u884c\u7684\u6587\u4ef6\u7684\u6a21\u5f0f\u3002 <code>exclude</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>^$</code>\uff09\u6392\u9664\u4e0e <code>files</code> \u5339\u914d\u7684\u6587\u4ef6\u3002 <code>types</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>[file]</code>\uff09\u8981\u8fd0\u884c\u7684\u6587\u4ef6\u7c7b\u578b\u5217\u8868\uff08AND\uff09\u3002\u53c2\u89c1\u4f7f\u7528\u7c7b\u578b\u8fc7\u6ee4\u6587\u4ef6\u3002 <code>types_or</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>[]</code>\uff09\u8981\u8fd0\u884c\u7684\u6587\u4ef6\u7c7b\u578b\u5217\u8868\uff08OR\uff09\u3002\u53c2\u89c1\u4f7f\u7528\u7c7b\u578b\u8fc7\u6ee4\u6587\u4ef6\u30022.9.0 \u7248\u672c\u65b0\u589e\u3002 <code>exclude_types</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>[]</code>\uff09\u8981\u6392\u9664\u7684\u6587\u4ef6\u7684\u6a21\u5f0f\u3002 <code>always_run</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>false</code>\uff09\u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u5373\u4f7f\u6ca1\u6709\u5339\u914d\u7684\u6587\u4ef6\uff0c\u8fd9\u4e2a\u94a9\u5b50\u4e5f\u4f1a\u8fd0\u884c\u3002 <code>fail_fast</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>false</code>\uff09\u5982\u679c\u4e3a <code>true</code>\uff0cpre-commit \u4f1a\u5728\u8be5\u94a9\u5b50\u5931\u8d25\u65f6\u505c\u6b62\u8fd0\u884c\u94a9\u5b50\u30022.16.0 \u7248\u672c\u65b0\u589e\u3002 <code>verbose</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>false</code>\uff09\u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u5373\u4f7f\u94a9\u5b50\u901a\u8fc7\uff0c\u4e5f\u5f3a\u5236\u6253\u5370\u94a9\u5b50\u7684\u8f93\u51fa\u3002 <code>pass_filenames</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>true</code>\uff09\u5982\u679c\u4e3a <code>false</code>\uff0c\u5219\u4e0d\u4f1a\u5411\u94a9\u5b50\u4f20\u9012\u6587\u4ef6\u540d\u3002 <code>require_serial</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>false</code>\uff09\u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u8fd9\u4e2a\u94a9\u5b50\u5c06\u4f7f\u7528\u5355\u4e2a\u8fdb\u7a0b\u800c\u4e0d\u662f\u5e76\u884c\u6267\u884c\u3002 <code>description</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>''</code>\uff09\u94a9\u5b50\u7684\u63cf\u8ff0\u3002\u4ec5\u7528\u4e8e\u5143\u6570\u636e\u76ee\u7684\u3002 <code>language_version</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>default</code>\uff09\u53c2\u89c1\u8986\u76d6\u8bed\u8a00\u7248\u672c\u3002 <code>minimum_pre_commit_version</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>'0'</code>\uff09\u5141\u8bb8\u6307\u793a\u6700\u4f4e\u517c\u5bb9\u7684 pre-commit \u7248\u672c\u3002 <code>args</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>[]</code>\uff09\u8981\u4f20\u9012\u7ed9\u94a9\u5b50\u7684\u9644\u52a0\u53c2\u6570\u5217\u8868\u3002 <code>stages</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u9636\u6bb5\uff09\u9009\u62e9\u8981\u8fd0\u884c\u7684 git \u94a9\u5b50\u3002\u53c2\u89c1\u9650\u5236\u94a9\u5b50\u5728\u7279\u5b9a\u9636\u6bb5\u8fd0\u884c\u3002 <p>\u4f8b\u5982\uff1a</p> <pre><code>-   id: trailing-whitespace\n    name: Trim Trailing Whitespace\n    description: This hook trims trailing whitespace.\n    entry: trailing-whitespace-fixer\n    language: python\n    types: [text]\n</code></pre> <p>pre-commit currently supports hooks written in many languages. As long as your git repo is an installable package (gem, npm, pypi, etc.) or exposes an executable, it can be used with pre-commit. Each git repo can support as many languages/hooks as you want.</p> <p>The hook must exit nonzero on failure or modify files.</p> <p>A git repo containing pre-commit plugins must contain a <code>.pre-commit-hooks.yaml</code> file that tells pre-commit:</p> <pre><code>=r=\n    =c= [`id`](_#hooks-id)\n    =c= the id of the hook - used in pre-commit-config.yaml.\n=r=\n    =c= [`name`](_#hooks-name)\n    =c= the name of the hook - shown during hook execution.\n=r=\n    =c= [`entry`](_#hooks-entry)\n    =c= the entry point - the executable to run.  `entry` can also contain\n        arguments that will not be overridden such as `entry: autopep8 -i`.\n=r=\n    =c= [`language`](_#hooks-language)\n    =c= the language of the hook - tells pre-commit how to install the hook.\n=r=\n    =c= [`files`](_#hooks-files)\n    =c= (optional: default `''`) the pattern of files to run on.\n=r=\n    =c= [`exclude`](_#hooks-exclude)\n    =c= (optional: default `^$`)  exclude files that were matched by [`files`](#hooks-files).\n=r=\n    =c= [`types`](_#hooks-types)\n    =c= (optional: default `[file]`)  list of file types to run on (AND).  See\n        [Filtering files with types](#filtering-files-with-types).\n=r=\n    =c= [`types_or`](_#hooks-types_or)\n    =c= (optional: default `[]`)  list of file types to run on (OR).  See\n        [Filtering files with types](#filtering-files-with-types).\n        _new in 2.9.0_.\n=r=\n    =c= [`exclude_types`](_#hooks-exclude_types)\n    =c= (optional: default `[]`)  the pattern of files to exclude.\n=r=\n    =c= [`always_run`](_#hooks-always_run)\n    =c= (optional: default `false`) if `true` this hook will run even if there\n        are no matching files.\n=r=\n    =c= [`fail_fast`](_#hooks-fail_fast)\n    =c= (optional: default `false`) if `true` pre-commit will stop running\n        hooks if this hook fails.  _new in 2.16.0_.\n=r=\n    =c= [`verbose`](_#hooks-verbose)\n    =c= (optional: default `false`) if `true`, forces the output of the hook to be printed even when\n        the hook passes.\n=r=\n    =c= [`pass_filenames`](_#hooks-pass_filenames)\n    =c= (optional: default `true`) if `false` no filenames will be passed to\n        the hook.\n=r=\n    =c= [`require_serial`](_#hooks-require_serial)\n    =c= (optional: default `false`) if `true` this hook will execute using a\n        single process instead of in parallel.\n=r=\n    =c= [`description`](_#hooks-description)\n    =c= (optional: default `''`) description of the hook.  used for metadata\n        purposes only.\n=r=\n    =c= [`language_version`](_#hooks-language_version)\n    =c= (optional: default `default`) see\n        [Overriding language version](#overriding-language-version).\n=r=\n    =c= [`minimum_pre_commit_version`](_#hooks-minimum_pre_commit_version)\n    =c= (optional: default `'0'`) allows one to indicate a minimum\n        compatible pre-commit version.\n=r=\n    =c= [`args`](_#hooks-args)\n    =c= (optional: default `[]`) list of additional parameters to pass to the hook.\n=r=\n    =c= [`stages`](_#hooks-stages)\n    =c= (optional: default (all stages)) selects which git hook(s) to run for.\n        See [Confining hooks to run at certain stages](#confining-hooks-to-run-at-certain-stages).\n</code></pre> <p>For example:</p> <pre><code>-   id: trailing-whitespace\n    name: Trim Trailing Whitespace\n    description: This hook trims trailing whitespace.\n    entry: trailing-whitespace-fixer\n    language: python\n    types: [text]\n</code></pre>"},{"location":"new-hooks/#\u4ee5\u4ea4\u4e92\u65b9\u5f0f\u5f00\u53d1\u94a9\u5b50","title":"\u4ee5\u4ea4\u4e92\u65b9\u5f0f\u5f00\u53d1\u94a9\u5b50","text":"<p>Developing hooks interactively</p> \u4e2d\u6587\u82f1\u6587 <p>\u7531\u4e8e <code>.pre-commit-config.yaml</code> \u4e2d\u7684 <code>repo</code> \u5c5e\u6027\u53ef\u4ee5\u6307\u5411 <code>git clone ...</code> \u7406\u89e3\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\u56e0\u6b64\u5728\u5f00\u53d1\u94a9\u5b50\u65f6\uff0c\u901a\u5e38\u5f88\u6709\u7528\u7684\u505a\u6cd5\u662f\u5c06\u5176\u6307\u5411\u4e00\u4e2a\u672c\u5730\u76ee\u5f55\u3002</p> <p><code>pre-commit try-repo</code> \u7b80\u5316\u4e86\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u63d0\u4f9b\u4e86\u4e00\u79cd\u5feb\u901f\u5c1d\u8bd5\u4ed3\u5e93\u7684\u65b9\u6cd5\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u4ea4\u4e92\u5f0f\u5730\u4f7f\u7528\u5b83\uff1a</p> <p>\u6ce8\u610f\uff1a\u5f53\u4f7f\u7528\u94a9\u5b50\u7c7b\u578b <code>prepare-commit-msg</code> \u548c <code>commit-msg</code> \u65f6\uff0c\u53ef\u80fd\u9700\u8981\u63d0\u4f9b <code>--commit-msg-filename</code> \u53c2\u6570\u3002</p> <p>\u5bf9\u672c\u5730\u76ee\u5f55\u4f7f\u7528 <code>try-repo</code> \u4e0d\u9700\u8981\u63d0\u4ea4\u3002<code>pre-commit</code> \u4f1a\u514b\u9686\u4efb\u4f55\u5df2\u8ddf\u8e2a\u4f46\u672a\u63d0\u4ea4\u7684\u66f4\u6539\u3002</p> <pre><code>~/work/hook-repo $ git checkout origin/main -b feature\n\n# ... \u505a\u4e00\u4e9b\u66f4\u6539\n\n# \u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u6216\u6807\u7b7e\u9875\n\n~/work/other-repo $ pre-commit try-repo ../hook-repo foo --verbose --all-files\n===============================================================================\nUsing config:\n===============================================================================\nrepos:\n-   repo: ../hook-repo\n    rev: 84f01ac09fcd8610824f9626a590b83cfae9bcbd\n    hooks:\n    -   id: foo\n===============================================================================\n[INFO] Initializing environment for ../hook-repo.\nFoo......................................................................Passed\n- hook id: foo\n- duration: 0.02s\n\nHello from foo hook!\n</code></pre> <p>Since the <code>repo</code> property of <code>.pre-commit-config.yaml</code> can refer to anything that <code>git clone ...</code> understands, it's often useful to point it at a local directory while developing hooks.</p> <p><code>pre-commit try-repo</code> streamlines this process by enabling a quick way to try out a repository.  Here's how one might work interactively:</p> <p>note: you may need to provide <code>--commit-msg-filename</code> when using this command with hook types <code>prepare-commit-msg</code> and <code>commit-msg</code>.</p> <p>a commit is not necessary to <code>try-repo</code> on a local directory. <code>pre-commit</code> will clone any tracked uncommitted changes.</p> <pre><code>~/work/hook-repo $ git checkout origin/main -b feature\n\n# ... make some changes\n\n# In another terminal or tab\n\n~/work/other-repo $ pre-commit try-repo ../hook-repo foo --verbose --all-files\n===============================================================================\nUsing config:\n===============================================================================\nrepos:\n-   repo: ../hook-repo\n    rev: 84f01ac09fcd8610824f9626a590b83cfae9bcbd\n    hooks:\n    -   id: foo\n===============================================================================\n[INFO] Initializing environment for ../hook-repo.\nFoo......................................................................Passed\n- hook id: foo\n- duration: 0.02s\n\nHello from foo hook!\n</code></pre>"},{"location":"new-hooks/#\u652f\u6301\u7684\u8bed\u8a00","title":"\u652f\u6301\u7684\u8bed\u8a00","text":"<p>Supported languages</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>conda</li> <li>coursier</li> <li>dart</li> <li>docker</li> <li>docker_image</li> <li>dotnet</li> <li>fail</li> <li>golang</li> <li>haskell</li> <li>lua</li> <li>node</li> <li>perl</li> <li>python</li> <li>python_venv</li> <li>r</li> <li>ruby</li> <li>rust</li> <li>swift</li> <li>pygrep</li> <li>script</li> <li>system</li> </ul> <ul> <li>conda</li> <li>coursier</li> <li>dart</li> <li>docker</li> <li>docker_image</li> <li>dotnet</li> <li>fail</li> <li>golang</li> <li>haskell</li> <li>lua</li> <li>node</li> <li>perl</li> <li>python</li> <li>python_venv</li> <li>r</li> <li>ruby</li> <li>rust</li> <li>swift</li> <li>pygrep</li> <li>script</li> <li>system</li> </ul>"},{"location":"new-hooks/#conda","title":"conda","text":"\u4e2d\u6587\u82f1\u6587 <p>\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u5305\u542b\u4e00\u4e2a <code>environment.yml</code> \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5c06\u901a\u8fc7 <code>conda env create --file environment.yml ...</code> \u7528\u4e8e\u521b\u5efa\u73af\u5883\u3002</p> <p><code>conda</code> \u8bed\u8a00\u8fd8\u652f\u6301 <code>additional_dependencies</code>\uff0c\u5e76\u5c06\u4efb\u4f55\u503c\u76f4\u63a5\u4f20\u9012\u7ed9 <code>conda install</code>\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u8bed\u8a00\u53ef\u4ee5\u4e0e local \u94a9\u5b50\u4e00\u8d77\u4f7f\u7528\u3002</p> <p>2.17.0 \u7248\u672c\u65b0\u589e\uff1a\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf <code>PRE_COMMIT_USE_MAMBA=1</code> \u6216 <code>PRE_COMMIT_USE_MICROMAMBA=1</code> \u4f7f\u7528 <code>mamba</code> \u6216 <code>micromamba</code> \u8fdb\u884c\u5b89\u88c5\u3002</p> <p>__\u652f\u6301\uff1a__\u53ea\u8981\u7cfb\u7edf\u5b89\u88c5\u4e86 <code>conda</code> \u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u4f8b\u5982 <code>miniconda</code>\uff09\uff0c<code>conda</code> \u94a9\u5b50\u5c31\u53ef\u4ee5\u5de5\u4f5c\u3002\u5b83\u5df2\u5728 Linux\u3001macOS \u548c Windows \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002</p> <p>The hook repository must contain an <code>environment.yml</code> file which will be used via <code>conda env create --file environment.yml ...</code> to create the environment.</p> <p>The <code>conda</code> language also supports <code>additional_dependencies</code> and will pass any of the values directly into <code>conda install</code>.  This language can therefore be used with local hooks.</p> <p>new in 2.17.0: <code>mamba</code> or <code>micromamba</code> can be used to install instead via the <code>PRE_COMMIT_USE_MAMBA=1</code> or <code>PRE_COMMIT_USE_MICROMAMBA=1</code> environment variables.</p> <p>Support: <code>conda</code> hooks work as long as there is a system-installed <code>conda</code> binary (such as <code>miniconda</code>). It has been tested on linux, macOS, and windows.</p>"},{"location":"new-hooks/#coursier","title":"coursier","text":"\u4e2d\u6587\u82f1\u6587 <p>\u65b0\u7279\u6027 2.8.0\uff1a</p> <p>\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u5305\u542b\u4e00\u4e2a <code>.pre-commit-channel</code> \u6587\u4ef6\u5939\uff0c\u8be5\u6587\u4ef6\u5939\u5fc5\u987b\u5305\u542b\u7528\u4e8e\u5b89\u88c5\u94a9\u5b50\u7684 Coursier \u5e94\u7528\u7a0b\u5e8f\u63cf\u8ff0\u7b26\u3002\u5bf9\u4e8e\u914d\u7f6e Coursier \u94a9\u5b50\uff0c\u4f60\u7684 <code>entry</code> \u5e94\u8be5\u5bf9\u5e94\u4e8e\u4ece\u4ed3\u5e93\u7684 <code>.pre-commit-channel</code> \u6587\u4ef6\u5939\u5b89\u88c5\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1a\u5df2\u77e5 <code>coursier</code> \u94a9\u5b50\u53ef\u4ee5\u5728\u5b89\u88c5\u4e86 <code>cs</code> \u6216 <code>coursier</code> \u5305\u7ba1\u7406\u5668\u7684\u4efb\u4f55\u7cfb\u7edf\u4e0a\u5de5\u4f5c\u3002\u4f60\u5b89\u88c5\u7684\u7279\u5b9a Coursier \u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4f9d\u8d56\u4e8e\u4e0d\u540c\u7248\u672c\u7684 JVM\uff0c\u8bf7\u67e5\u9605\u94a9\u5b50\u7684\u6587\u6863\u4ee5\u83b7\u53d6\u6f84\u6e05\u3002\u5b83\u5df2\u5728 Linux \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002</p> <p>\u65b0\u7279\u6027 2.18.0\uff1apre-commit \u73b0\u5728\u652f\u6301 <code>coursier</code> \u5305\u7ba1\u7406\u5668\u53ef\u6267\u884c\u6587\u4ef6\u7684\u547d\u540d\u3002</p> <p>\u65b0\u7279\u6027 3.0.0\uff1a<code>language: coursier</code> \u94a9\u5b50\u73b0\u5728\u652f\u6301 <code>repo: local</code> \u548c <code>additional_dependencies</code>\u3002</p> <p>new in 2.8.0</p> <p>The hook repository must have a <code>.pre-commit-channel</code> folder and that folder must contain the coursier application descriptors for the hook to install. For configuring coursier hooks, your <code>entry</code> should correspond to an executable installed from the repository's <code>.pre-commit-channel</code> folder.</p> <p>Support: <code>coursier</code> hooks are known to work on any system which has the <code>cs</code> or <code>coursier</code> package manager installed. The specific coursier applications you install may depend on various versions of the JVM, consult the hooks' documentation for clarification.  It has been tested on linux.</p> <p>new in 2.18.0: pre-commit now supports the <code>coursier</code> naming of the package manager executable.</p> <p>new in 3.0.0: <code>language: coursier</code> hooks now support <code>repo: local</code> and <code>additional_dependencies</code>.</p>"},{"location":"new-hooks/#dart","title":"dart","text":"\u4e2d\u6587\u82f1\u6587 <p>\u65b0\u7279\u6027 2.15.0\uff1a</p> <p>\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u5305\u542b\u4e00\u4e2a <code>pubspec.yaml</code> \u6587\u4ef6\u2014\u2014\u8fd9\u4e2a\u6587\u4ef6\u5fc5\u987b\u5305\u542b\u4e00\u4e2a <code>executables</code> \u90e8\u5206\uff0c\u8fd9\u90e8\u5206\u5c06\u5217\u51fa\u5b89\u88c5\u540e\u53ef\u7528\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u5c06 <code>entry</code> \u4e0e\u67d0\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u5339\u914d\u3002</p> <p><code>pre-commit</code> \u5c06\u4f7f\u7528 <code>dart compile exe bin/{executable}.dart</code> \u6784\u5efa\u6bcf\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3002</p> <p><code>language: dart</code> \u8fd8\u652f\u6301 <code>additional_dependencies</code> \u6765\u6307\u5b9a\u4f9d\u8d56\u9879\u7684\u7248\u672c\uff0c\u901a\u8fc7 <code>:</code> \u5206\u9694\u5305\u540d\uff1a</p> <pre><code>        additional_dependencies: ['hello_world_dart:1.0.0']\n</code></pre> <p>\u652f\u6301\u60c5\u51b5\uff1a\u5df2\u77e5 <code>dart</code> \u94a9\u5b50\u53ef\u4ee5\u5728\u5b89\u88c5\u4e86 <code>dart</code> SDK \u7684\u4efb\u4f55\u7cfb\u7edf\u4e0a\u5de5\u4f5c\u3002\u5b83\u5df2\u5728 Linux\u3001macOS \u548c Windows \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002</p> <p>new in 2.15.0</p> <p>The hook repository must have a <code>pubspec.yaml</code> -- this must contain an <code>executables</code> section which will list the binaries that will be available after installation.  Match the <code>entry</code> to an executable.</p> <p><code>pre-commit</code> will build each executable using <code>dart compile exe bin/{executable}.dart</code>.</p> <p><code>language: dart</code> also supports <code>additional_dependencies</code>. to specify a version for a dependency, separate the package name by a <code>:</code>:</p> <pre><code>        additional_dependencies: ['hello_world_dart:1.0.0']\n</code></pre> <p>Support: <code>dart</code> hooks are known to work on any system which has the <code>dart</code> sdk installed.  It has been tested on linux, macOS, and windows.</p>"},{"location":"new-hooks/#docker","title":"docker","text":"\u4e2d\u6587\u82f1\u6587 <p>\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u5305\u542b\u4e00\u4e2a <code>Dockerfile</code>\u3002\u5b83\u5c06\u901a\u8fc7 <code>docker build .</code> \u8fdb\u884c\u5b89\u88c5\u3002</p> <p>\u8fd0\u884c Docker \u94a9\u5b50\u9700\u8981\u4e3b\u673a\u4e0a\u6709\u4e00\u4e2a\u8fd0\u884c\u4e2d\u7684 Docker \u5f15\u64ce\u3002\u5bf9\u4e8e\u914d\u7f6e Docker \u94a9\u5b50\uff0c\u4f60\u7684 <code>entry</code> \u5e94\u8be5\u5bf9\u5e94\u4e8e Docker \u5bb9\u5668\u5185\u7684\u67d0\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5e76\u7528\u4e8e\u8986\u76d6\u9ed8\u8ba4\u5bb9\u5668\u7684\u5165\u53e3\u70b9\u3002\u5f53 pre-commit \u5411\u8fd0\u884c\u5bb9\u5668\u547d\u4ee4\u4f20\u9012\u6587\u4ef6\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u65f6\uff0c\u4f60\u7684 Docker <code>CMD</code> \u4e0d\u4f1a\u8fd0\u884c\u3002Docker \u5141\u8bb8\u4f60\u4f7f\u7528\u4efb\u4f55 pre-commit \u6ca1\u6709\u5185\u7f6e\u652f\u6301\u7684\u8bed\u8a00\u3002</p> <p>pre-commit \u5c06\u81ea\u52a8\u5c06\u4ed3\u5e93\u6e90\u4ee3\u7801\u4f5c\u4e3a\u5377\u6302\u8f7d\u4f7f\u7528 <code>-v $PWD:/src:rw,Z</code>\uff0c\u5e76\u4f7f\u7528 <code>--workdir /src</code> \u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1a\u5df2\u77e5 docker \u94a9\u5b50\u53ef\u4ee5\u5728\u6709\u53ef\u7528\u7684 <code>docker</code> \u53ef\u6267\u884c\u6587\u4ef6\u7684\u4efb\u4f55\u7cfb\u7edf\u4e0a\u5de5\u4f5c\u3002\u5b83\u5df2\u5728 Linux \u548c macOS \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002\u901a\u8fc7 <code>boot2docker</code> \u8fd0\u884c\u7684\u94a9\u5b50\u5df2\u77e5\u65e0\u6cd5\u5bf9\u6587\u4ef6\u8fdb\u884c\u4fee\u6539\u3002</p> <p>\u53ef\u4ee5\u67e5\u770b \u8fd9\u4e2a\u4ed3\u5e93 \u6765\u83b7\u53d6\u4e00\u4e2a\u57fa\u4e8e Docker \u7684\u94a9\u5b50\u793a\u4f8b\u3002</p> <p>The hook repository must have a <code>Dockerfile</code>.  It will be installed via <code>docker build .</code>.</p> <p>Running Docker hooks requires a running Docker engine on your host.  For configuring Docker hooks, your <code>entry</code> should correspond to an executable inside the Docker container, and will be used to override the default container entrypoint. Your Docker <code>CMD</code> will not run when pre-commit passes a file list as arguments to the run container command. Docker allows you to use any language that's not supported by pre-commit as a builtin.</p> <p>pre-commit will automatically mount the repository source as a volume using <code>-v $PWD:/src:rw,Z</code> and set the working directory using <code>--workdir /src</code>.</p> <p>Support: docker hooks are known to work on any system which has a working <code>docker</code> executable.  It has been tested on linux and macOS.  Hooks that are run via <code>boot2docker</code> are known to be unable to make modifications to files.</p> <p>See this repository for an example Docker-based hook.</p>"},{"location":"new-hooks/#docker_image","title":"docker_image","text":"\u4e2d\u6587\u82f1\u6587 <p>\u76f8\u5bf9\u4e8e <code>docker</code> \u94a9\u5b50\uff0c<code>docker_image</code> \u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u8f7b\u91cf\u7ea7\u7684\u65b9\u6cd5\u3002<code>docker_image</code> \"\u8bed\u8a00\"\u4f7f\u7528\u73b0\u6709\u7684 Docker \u955c\u50cf\u6765\u63d0\u4f9b\u94a9\u5b50\u53ef\u6267\u884c\u6587\u4ef6\u3002</p> <p><code>docker_image</code> \u94a9\u5b50\u53ef\u4ee5\u65b9\u4fbf\u5730\u914d\u7f6e\u4e3a local \u94a9\u5b50\u3002</p> <p><code>entry</code> \u6307\u5b9a\u4e86\u8981\u4f7f\u7528\u7684 Docker \u6807\u7b7e\u3002\u5982\u679c\u955c\u50cf\u5b9a\u4e49\u4e86 <code>ENTRYPOINT</code>\uff0c\u4e0d\u9700\u8981\u7279\u522b\u64cd\u4f5c\u5c31\u53ef\u4ee5\u8fde\u63a5\u5230\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5982\u679c\u5bb9\u5668\u6ca1\u6709\u6307\u5b9a <code>ENTRYPOINT</code> \u6216\u8005\u4f60\u60f3\u8981\u66f4\u6539\u5165\u53e3\u70b9\uff0c\u4f60\u53ef\u4ee5\u5728 <code>entry</code> \u4e2d\u6307\u5b9a\u5b83\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>-   id: dockerfile-provides-entrypoint\n    name: ...\n    language: docker_image\n    entry: my.registry.example.com/docker-image-1:latest\n-   id: dockerfile-no-entrypoint-1\n    name: ...\n    language: docker_image\n    entry: --entrypoint my-exe my.registry.example.com/docker-image-2:latest\n# \u53e6\u4e00\u79cd\u7b49\u6548\u7684\u89e3\u51b3\u65b9\u6848\n-   id: dockerfile-no-entrypoint-2\n    name: ...\n    language: docker_image\n    entry: my.registry.example.com/docker-image-3:latest my-exe\n</code></pre> <p>\u5728\u8fd9\u4e2a\u914d\u7f6e\u4e2d\uff1a</p> <ul> <li><code>dockerfile-provides-entrypoint</code> \u4f7f\u7528\u4e86\u5e26\u6709\u9884\u5b9a\u4e49 <code>ENTRYPOINT</code> \u7684\u955c\u50cf\u3002</li> <li><code>dockerfile-no-entrypoint-1</code> \u548c <code>dockerfile-no-entrypoint-2</code> \u6307\u5b9a\u4e86\u8981\u4f7f\u7528\u7684\u53ef\u6267\u884c\u6587\u4ef6 <code>my-exe</code>\uff0c\u8fd9\u5728\u955c\u50cf\u6ca1\u6709\u5b9a\u4e49 <code>ENTRYPOINT</code> \u6216\u9700\u8981\u8986\u76d6 <code>ENTRYPOINT</code> \u65f6\u5f88\u6709\u7528\u3002</li> </ul>"},{"location":"new-hooks/#dotnet","title":"dotnet","text":"\u4e2d\u6587\u82f1\u6587 <p>\u65b0\u7279\u6027 2.8.0\uff1a</p> <p>dotnet \u94a9\u5b50\u4f7f\u7528\u7cfb\u7edf\u5b89\u88c5\u7684 dotnet CLI \u8fdb\u884c\u5b89\u88c5\u3002</p> <p>\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u53ef\u4ee5\u6309\u7167\u8fd9\u4e2a\u793a\u4f8b\u8fdb\u884c <code>pack</code> \u548c <code>install</code> \u7684 dotnet CLI \u5de5\u5177\u3002<code>entry</code> \u5e94\u8be5\u5339\u914d\u6784\u5efa\u4ed3\u5e93\u540e\u521b\u5efa\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u76ee\u524d\u4e0d\u652f\u6301\u9644\u52a0\u4f9d\u8d56\u9879\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1a\u5df2\u77e5 dotnet \u94a9\u5b50\u53ef\u4ee5\u5728\u5b89\u88c5\u4e86 dotnet CLI \u7684\u4efb\u4f55\u7cfb\u7edf\u4e0a\u5de5\u4f5c\u3002\u5b83\u5df2\u5728 Linux \u548c Windows \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002</p> <p>new in 2.8.0</p> <p>dotnet hooks are installed using the system installation of the dotnet CLI.</p> <p>Hook repositories must contain a dotnet CLI tool which can be <code>pack</code>ed and <code>install</code>ed as per this example. The <code>entry</code> should match an executable created by building the repository. Additional dependencies are not currently supported.</p> <p>Support: dotnet hooks are known to work on any system which has the dotnet CLI installed.  It has been tested on linux and windows.</p>"},{"location":"new-hooks/#fail","title":"fail","text":"\u4e2d\u6587\u82f1\u6587 <p><code>fail</code> \u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684 <code>language</code>\uff0c\u7528\u4e8e\u901a\u8fc7\u6587\u4ef6\u540d\u7981\u6b62\u6587\u4ef6\u3002<code>fail</code> \u8bed\u8a00\u5c24\u5176\u9002\u7528\u4e8e local \u94a9\u5b50\u3002</p> <p>\u5f53\u94a9\u5b50\u5931\u8d25\u65f6\uff0c<code>entry</code> \u5c06\u4f1a\u88ab\u6253\u5370\u51fa\u6765\u3002\u5efa\u8bae\u5728 <code>name</code> \u4e2d\u63d0\u4f9b\u7b80\u77ed\u7684\u63cf\u8ff0\uff0c\u5e76\u5728 <code>entry</code> \u4e2d\u63d0\u4f9b\u66f4\u8be6\u7ec6\u7684\u4fee\u590d\u8bf4\u660e\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u5b83\u9632\u6b62\u9664\u4e86\u4ee5 <code>.rst</code> \u7ed3\u5c3e\u7684\u6587\u4ef6\u4e4b\u5916\u7684\u4efb\u4f55\u6587\u4ef6\u88ab\u6dfb\u52a0\u5230 <code>changelog</code> \u76ee\u5f55\uff1a</p> <pre><code>-   repo: local\n    hooks:\n    -   id: changelogs-rst\n        name: changelogs must be rst\n        entry: 'changelog filenames must end in .rst'\n        language: fail\n        files: 'changelog/.*(?&lt;!\\.rst)$'\n</code></pre> <p>\u5728\u8fd9\u4e2a\u914d\u7f6e\u4e2d\uff1a</p> <ul> <li><code>id</code> \u662f\u94a9\u5b50\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002</li> <li><code>name</code> \u63cf\u8ff0\u4e86\u94a9\u5b50\u7684\u7528\u9014\u3002</li> <li><code>entry</code> \u6307\u5b9a\u4e86\u5f53\u94a9\u5b50\u5931\u8d25\u65f6\u6253\u5370\u7684\u6d88\u606f\u3002</li> <li><code>language</code> \u8bbe\u7f6e\u4e3a <code>fail</code>\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u5931\u8d25\u7684\u94a9\u5b50\u3002</li> <li><code>files</code> \u6307\u5b9a\u4e86\u5339\u914d\u6587\u4ef6\u7684\u6a21\u5f0f\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5339\u914d\u4e0d\u4ee5 <code>.rst</code> \u7ed3\u5c3e\u7684\u6587\u4ef6\u3002</li> </ul> <p>A lightweight <code>language</code> to forbid files by filename.  The <code>fail</code> language is especially useful for local hooks.</p> <p>The <code>entry</code> will be printed when the hook fails.  It is suggested to provide a brief description for <code>name</code> and more verbose fix instructions in <code>entry</code>.</p> <p>Here's an example which prevents any file except those ending with <code>.rst</code> from being added to the <code>changelog</code> directory:</p> <pre><code>-   repo: local\n    hooks:\n    -   id: changelogs-rst\n        name: changelogs must be rst\n        entry: changelog filenames must end in .rst\n        language: fail\n        files: 'changelog/.*(?&lt;!\\.rst)$'\n</code></pre>"},{"location":"new-hooks/#golang","title":"golang","text":"\u4e2d\u6587\u82f1\u6587 <p>\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u5305\u542b Go \u6e90\u4ee3\u7801\u3002\u5b83\u5c06\u901a\u8fc7 <code>go install ./...</code> \u8fdb\u884c\u5b89\u88c5\u3002pre-commit \u5c06\u4e3a\u6bcf\u4e2a\u94a9\u5b50\u521b\u5efa\u4e00\u4e2a\u9694\u79bb\u7684 <code>GOPATH</code>\uff0c<code>entry</code> \u5e94\u8be5\u5339\u914d\u5c06\u8981\u5b89\u88c5\u5230 <code>GOPATH</code> \u7684 <code>bin</code> \u76ee\u5f55\u4e2d\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002</p> <p>\u8fd9\u79cd\u8bed\u8a00\u652f\u6301 <code>additional_dependencies</code> \u5e76\u5c06\u4efb\u4f55\u503c\u76f4\u63a5\u4f20\u9012\u7ed9 <code>go install</code>\u3002\u5b83\u53ef\u4ee5\u7528\u4f5c <code>repo: local</code> \u94a9\u5b50\u3002</p> <p>2.17.0 \u7248\u672c\u66f4\u6539\uff1a\u4e4b\u524d\u4f7f\u7528\u7684\u662f <code>go get ./...</code>\u3002</p> <p>3.0.0 \u7248\u672c\u65b0\u589e\uff1a\u5982\u679c\u672a\u5b89\u88c5\uff0cpre-commit \u5c06\u5f15\u5bfc\u5b89\u88c5 <code>go</code>\u3002<code>language: golang</code> \u73b0\u5728\u8fd8\u652f\u6301 <code>language_version</code>\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1a\u5df2\u77e5 golang \u94a9\u5b50\u53ef\u4ee5\u5728\u5b89\u88c5\u4e86 go \u7684\u4efb\u4f55\u7cfb\u7edf\u4e0a\u5de5\u4f5c\u3002\u5b83\u5df2\u5728 Linux\u3001macOS \u548c Windows \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002</p> <p>The hook repository must contain go source code.  It will be installed via <code>go install ./...</code>.  pre-commit will create an isolated <code>GOPATH</code> for each hook and the <code>entry</code> should match an executable which will get installed into the <code>GOPATH</code>'s <code>bin</code> directory.</p> <p>This language supports <code>additional_dependencies</code> and will pass any of the values directly to <code>go install</code>. It can be used as a <code>repo: local</code> hook.</p> <p>changed in 2.17.0: previously <code>go get ./...</code> was used</p> <p>new in 3.0.0: pre-commit will bootstrap <code>go</code> if it is not present. <code>language: golang</code> also now supports <code>language_version</code></p> <p>Support: golang hooks are known to work on any system which has go installed.  It has been tested on linux, macOS, and windows.</p>"},{"location":"new-hooks/#haskell","title":"haskell","text":"\u4e2d\u6587\u82f1\u6587 <p>\u65b0\u7279\u6027 3.4.0\uff1a</p> <p>\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a <code>*.cabal</code> \u6587\u4ef6\u3002\u5b89\u88c5\u540e\u8fd9\u4e9b\u5305\u4e2d\u7684 <code>executable</code> \u5c06\u53ef\u7528\u4e8e <code>entry</code>\u3002</p> <p>\u8fd9\u79cd\u8bed\u8a00\u652f\u6301 <code>additional_dependencies</code>\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u7528\u4f5c <code>repo: local</code> \u94a9\u5b50\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1a\u5df2\u77e5 haskell \u94a9\u5b50\u53ef\u4ee5\u5728\u5b89\u88c5\u4e86 <code>cabal</code> \u7684\u4efb\u4f55\u7cfb\u7edf\u4e0a\u5de5\u4f5c\u3002\u5b83\u5df2\u5728 Linux\u3001macOS \u548c Windows \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002</p> <p>new in 3.4.0</p> <p>The hook repository must have one or more <code>*.cabal</code> files.  Once installed the <code>executable</code>s from these packages will be available to use with <code>entry</code>.</p> <p>This language supports <code>additional_dependencies</code> so it can be used as a <code>repo: local</code> hook.</p> <p>Support: haskell hooks are known to work on any system which has <code>cabal</code> installed.  It has been tested on linux, macOS, and windows.</p>"},{"location":"new-hooks/#lua","title":"lua","text":"\u4e2d\u6587\u82f1\u6587 <p>\u65b0\u7279\u6027 2.17.0\uff1a</p> <p>Lua \u94a9\u5b50\u4f7f\u7528 Luarocks \u4f7f\u7528\u7684 Lua \u7248\u672c\u8fdb\u884c\u5b89\u88c5\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1a\u5df2\u77e5 Lua \u94a9\u5b50\u53ef\u4ee5\u5728\u5b89\u88c5\u4e86 Luarocks \u7684\u4efb\u4f55\u7cfb\u7edf\u4e0a\u5de5\u4f5c\u3002\u5b83\u5df2\u5728 Linux \u548c macOS \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u5e76\u4e14\u53ef\u80fd\u5728 Windows \u4e0a\u4e5f\u80fd\u5de5\u4f5c\u3002</p> <p>new in 2.17.0</p> <p>Lua hooks are installed with the version of Lua that is used by Luarocks.</p> <p>Support: Lua hooks are known to work on any system which has Luarocks installed.  It has been tested on linux and macOS and may work on windows.</p>"},{"location":"new-hooks/#node","title":"node","text":"\u4e2d\u6587\u82f1\u6587 <p>\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u5305\u542b\u4e00\u4e2a <code>package.json</code> \u6587\u4ef6\u3002\u5b83\u5c06\u901a\u8fc7 <code>npm install .</code> \u8fdb\u884c\u5b89\u88c5\u3002\u5b89\u88c5\u7684\u5305\u5c06\u63d0\u4f9b\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5c06\u5339\u914d <code>entry</code> \u2014\u2014 \u901a\u5e38\u662f\u901a\u8fc7 package.json \u4e2d\u7684 <code>bin</code> \u63d0\u4f9b\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1anode \u94a9\u5b50\u4e0d\u9700\u8981\u4efb\u4f55\u7cfb\u7edf\u7ea7\u4f9d\u8d56\u9879\u5373\u53ef\u5de5\u4f5c\u3002\u5b83\u5df2\u5728 Linux\u3001Windows \u548c macOS \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u5e76\u4e14\u53ef\u80fd\u5728 cygwin \u4e0b\u4e5f\u80fd\u5de5\u4f5c\u3002</p> <p>The hook repository must have a <code>package.json</code>.  It will be installed via <code>npm install .</code>.  The installed package will provide an executable that will match the <code>entry</code> \u2013 usually through <code>bin</code> in package.json.</p> <p>Support: node hooks work without any system-level dependencies.  It has been tested on linux, windows, and macOS and may work under cygwin.</p>"},{"location":"new-hooks/#perl","title":"perl","text":"\u4e2d\u6587\u82f1\u6587 <p>\u65b0\u7279\u6027 2.1.0\uff1a</p> <p>Perl \u94a9\u5b50\u4f7f\u7528 Perl \u81ea\u5e26\u7684 CPAN \u5305\u5b89\u88c5\u7a0b\u5e8f cpan \u8fdb\u884c\u5b89\u88c5\u3002</p> <p>\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u5305\u542b <code>cpan</code> \u652f\u6301\u7684\u5185\u5bb9\uff0c\u901a\u5e38\u662f <code>Makefile.PL</code> \u6216 <code>Build.PL</code>\uff0c\u5b83\u7528\u8fd9\u4e9b\u6587\u4ef6\u6765\u5b89\u88c5\u8981\u5728\u94a9\u5b50\u7684 <code>entry</code> \u5b9a\u4e49\u4e2d\u4f7f\u7528\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u4ed3\u5e93\u5c06\u901a\u8fc7 <code>cpan -T .</code> \u8fdb\u884c\u5b89\u88c5\uff08\u5b89\u88c5\u7684\u6587\u4ef6\u5b58\u50a8\u5728\u60a8\u7684 pre-commit \u7f13\u5b58\u4e2d\uff0c\u4e0d\u4f1a\u6c61\u67d3\u5176\u4ed6 Perl \u5b89\u88c5\uff09\u3002</p> <p>\u5f53\u4e3a Perl \u6307\u5b9a <code>additional_dependencies</code> \u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>cpan</code> \u7406\u89e3\u7684\u4efb\u4f55\u5b89\u88c5\u53c2\u6570\u683c\u5f0f\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1aPerl \u94a9\u5b50\u5f53\u524d\u9700\u8981\u9884\u5148\u5b58\u5728\u7684 Perl \u5b89\u88c5\uff0c\u5305\u62ec\u5728 <code>PATH</code> \u4e2d\u7684 <code>cpan</code> \u5de5\u5177\u3002\u5b83\u5df2\u5728 Linux\u3001macOS \u548c Windows \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002</p> <p>new in 2.1.0</p> <p>Perl hooks are installed using the system installation of cpan, the CPAN package installer that comes with Perl.</p> <p>Hook repositories must have something that <code>cpan</code> supports, typically <code>Makefile.PL</code> or <code>Build.PL</code>, which it uses to install an executable to use in the <code>entry</code> definition for your hook. The repository will be installed via <code>cpan -T .</code> (with the installed files stored in your pre-commit cache, not polluting other Perl installations).</p> <p>When specifying <code>additional_dependencies</code> for Perl, you can use any of the install argument formats understood by <code>cpan</code>.</p> <p>Support: Perl hooks currently require a pre-existing Perl installation, including the <code>cpan</code> tool in <code>PATH</code>.  It has been tested on linux, macOS, and Windows.</p>"},{"location":"new-hooks/#python","title":"python","text":"\u4e2d\u6587\u82f1\u6587 <p>\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u80fd\u591f\u901a\u8fc7 <code>pip install .</code> \u8fdb\u884c\u5b89\u88c5\uff08\u901a\u5e38\u4f7f\u7528 <code>setup.py</code> \u6216 <code>pyproject.toml</code>\uff09\u3002\u5b89\u88c5\u7684\u5305\u5c06\u63d0\u4f9b\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5c06\u5339\u914d <code>entry</code> \u2014\u2014 \u901a\u5e38\u662f\u901a\u8fc7 <code>setup.py</code> \u4e2d\u7684 <code>console_scripts</code> \u6216 <code>scripts</code>\u3002</p> <p>\u8fd9\u79cd\u8bed\u8a00\u8fd8\u652f\u6301 <code>additional_dependencies</code>\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u4e0e local \u94a9\u5b50\u4e00\u8d77\u4f7f\u7528\u3002\u6307\u5b9a\u7684\u4f9d\u8d56\u9879\u5c06\u88ab\u8ffd\u52a0\u5230 <code>pip install</code> \u547d\u4ee4\u4e2d\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1apython \u94a9\u5b50\u4e0d\u9700\u8981\u4efb\u4f55\u7cfb\u7edf\u7ea7\u4f9d\u8d56\u9879\u5373\u53ef\u5de5\u4f5c\u3002\u5b83\u5df2\u5728 Linux\u3001macOS\u3001Windows \u548c cygwin \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002</p> <p>The hook repository must be installable via <code>pip install .</code> (usually by either <code>setup.py</code> or <code>pyproject.toml</code>).  The installed package will provide an executable that will match the <code>entry</code> \u2013 usually through <code>console_scripts</code> or <code>scripts</code> in setup.py.</p> <p>This language also supports <code>additional_dependencies</code> so it can be used with local hooks. The specified dependencies will be appended to the <code>pip install</code> command.</p> <p>Support: python hooks work without any system-level dependencies.  It has been tested on linux, macOS, windows, and cygwin.</p>"},{"location":"new-hooks/#python_venv","title":"python_venv","text":"\u4e2d\u6587\u82f1\u6587 <p>\u65b0\u7279\u6027 2.4.0\uff1a</p> <p><code>python_venv</code> \u8bed\u8a00\u73b0\u5728\u662f <code>python</code> \u7684\u522b\u540d\uff0c\u56e0\u4e3a <code>virtualenv&gt;=20</code> \u521b\u5efa\u7684\u7ed3\u6784\u76f8\u540c\u7684\u73af\u5883\u3002\u4ee5\u524d\uff0c\u8fd9\u4e2a <code>language</code> \u4f7f\u7528 venv \u6a21\u5757\u521b\u5efa\u73af\u5883\u3002</p> <p>\u8fd9\u4e2a <code>language</code> \u5c06\u6700\u7ec8\u88ab\u79fb\u9664\uff0c\u56e0\u6b64\u5efa\u8bae\u4f7f\u7528 <code>python</code>\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1apython \u94a9\u5b50\u4e0d\u9700\u8981\u4efb\u4f55\u7cfb\u7edf\u7ea7\u4f9d\u8d56\u9879\u5373\u53ef\u5de5\u4f5c\u3002\u5b83\u5df2\u5728 Linux\u3001macOS\u3001Windows \u548c cygwin \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002</p> <p>new in 2.4.0: The <code>python_venv</code> language is now an alias to <code>python</code> since <code>virtualenv&gt;=20</code> creates equivalently structured environments.  Previously, this <code>language</code> created environments using the venv module.</p> <p>This <code>language</code> will be removed eventually so it is suggested to use <code>python</code> instead.</p> <p>Support: python hooks work without any system-level dependencies.  It has been tested on linux, macOS, windows, and cygwin.</p>"},{"location":"new-hooks/#r","title":"r","text":"\u4e2d\u6587\u82f1\u6587 <p>\u65b0\u7279\u6027 2.11.0\uff1a</p> <p>\u8fd9\u4e2a\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u5305\u542b\u4e00\u4e2a <code>renv.lock</code> \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5c06\u5728\u94a9\u5b50\u5b89\u88c5\u65f6\u901a\u8fc7 <code>renv::restore()</code> \u6062\u590d\u3002\u5982\u679c\u4ed3\u5e93\u662f\u4e00\u4e2a R \u5305\uff08\u5373\u5728 <code>DESCRIPTION</code> \u4e2d\u6709 <code>Type: Package</code>\uff09\uff0c\u5b83\u5c06\u88ab\u5b89\u88c5\u3002\u5728 <code>entry</code> \u4e2d\u652f\u6301\u7684\u8bed\u6cd5\u662f <code>Rscript -e {expression}</code> \u6216 <code>Rscript path/relative/to/hook/root</code>\u3002\u8df3\u8fc7 R \u542f\u52a8\u8fdb\u7a0b\uff08\u6a21\u62df <code>--vanilla</code>\uff09\uff0c\u56e0\u4e3a\u6240\u6709\u914d\u7f6e\u5e94\u901a\u8fc7 <code>args</code> \u516c\u5f00\uff0c\u4ee5\u5b9e\u73b0\u6700\u5927\u900f\u660e\u5ea6\u548c\u53ef\u79fb\u690d\u6027\u3002</p> <p>\u5f53\u4e3a R \u6307\u5b9a <code>additional_dependencies</code> \u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55 <code>renv::install()</code> \u7406\u89e3\u7684\u5b89\u88c5\u53c2\u6570\u683c\u5f0f\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1a\u53ea\u8981\u5b89\u88c5\u4e86 <code>R</code> \u5e76\u5728 <code>PATH</code> \u4e0a\uff0c<code>r</code> \u94a9\u5b50\u5c31\u53ef\u4ee5\u5de5\u4f5c\u3002\u5b83\u5df2\u5728 Linux\u3001macOS \u548c Windows \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002</p> <p>new in 2.11.0</p> <p>This hook repository must have a <code>renv.lock</code> file that will be restored with <code>renv::restore()</code> on hook installation. If the repository is an R package (i.e. has <code>Type: Package</code> in <code>DESCRIPTION</code>), it is installed. The supported syntax in <code>entry</code> is <code>Rscript -e {expression}</code> or <code>Rscript path/relative/to/hook/root</code>. The R Startup process is skipped (emulating <code>--vanilla</code>), as all configuration should be exposed via <code>args</code> for maximal transparency and portability.</p> <p>When specifying <code>additional_dependencies</code> for R, you can use any of the install argument formats understood by <code>renv::install()</code>.</p> <p>Support: <code>r</code> hooks work as long as <code>R</code> is installed and on <code>PATH</code>. It has been tested on linux, macOS, and windows.</p>"},{"location":"new-hooks/#ruby","title":"ruby","text":"\u4e2d\u6587\u82f1\u6587 <p>\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u5305\u542b\u4e00\u4e2a <code>*.gemspec</code> \u6587\u4ef6\u3002\u5b83\u5c06\u901a\u8fc7 <code>gem build *.gemspec &amp;&amp; gem install *.gem</code> \u8fdb\u884c\u5b89\u88c5\u3002\u5b89\u88c5\u7684\u5305\u5c06\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5c06\u5339\u914d <code>entry</code> \u2014\u2014 \u901a\u5e38\u662f\u901a\u8fc7\u4f60\u5728 gemspec \u4e2d\u7684 <code>executables</code> \u6307\u5b9a\u7684\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1aruby \u94a9\u5b50\u4e0d\u9700\u8981\u4efb\u4f55\u7cfb\u7edf\u7ea7\u4f9d\u8d56\u9879\u5373\u53ef\u5de5\u4f5c\u3002\u5b83\u5df2\u5728 Linux \u548c macOS \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u5e76\u4e14\u53ef\u80fd\u5728 cygwin \u4e0b\u4e5f\u80fd\u5de5\u4f5c\u3002</p> <p>The hook repository must have a <code>*.gemspec</code>.  It will be installed via <code>gem build *.gemspec &amp;&amp; gem install *.gem</code>.  The installed package will produce an executable that will match the <code>entry</code> \u2013 usually through <code>executables</code> in your gemspec.</p> <p>Support: ruby hooks work without any system-level dependencies.  It has been tested on linux and macOS and may work under cygwin.</p>"},{"location":"new-hooks/#rust","title":"rust","text":"\u4e2d\u6587\u82f1\u6587 <p>Rust \u94a9\u5b50\u4f7f\u7528 Cargo\uff0cRust \u7684\u5b98\u65b9\u5305\u7ba1\u7406\u5668\u8fdb\u884c\u5b89\u88c5\u3002</p> <p>\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u5305\u542b\u4e00\u4e2a <code>Cargo.toml</code> \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u81f3\u5c11\u751f\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u4f8b\u5982\uff1aexample-rust-pre-commit-hook\uff09\uff0c\u5176\u540d\u79f0\u5e94\u4e0e\u94a9\u5b50\u7684 <code>entry</code> \u5b9a\u4e49\u5339\u914d\u3002\u4ed3\u5e93\u5c06\u901a\u8fc7 <code>cargo install --bins</code> \u8fdb\u884c\u5b89\u88c5\uff08\u4e8c\u8fdb\u5236\u6587\u4ef6\u5b58\u50a8\u5728 pre-commit \u7f13\u5b58\u4e2d\uff0c\u4e0d\u4f1a\u6c61\u67d3\u60a8\u7684\u7528\u6237\u7ea7 Cargo \u5b89\u88c5\uff09\u3002</p> <p>\u5f53\u4e3a Rust \u6307\u5b9a <code>additional_dependencies</code> \u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u8bed\u6cd5 <code>{package_name}:{package_version}</code> \u6765\u6307\u5b9a\u4e00\u4e2a\u65b0\u7684\u5e93\u4f9d\u8d56\u9879\uff08\u7528\u4e8e\u6784\u5efa \u4f60\u7684 \u94a9\u5b50\u4ed3\u5e93\uff09\uff0c\u6216\u8005\u4f7f\u7528\u7279\u6b8a\u8bed\u6cd5 <code>cli:{package_name}:{package_version}</code> \u7528\u4e8e CLI \u4f9d\u8d56\u9879\uff08\u5355\u72ec\u6784\u5efa\uff0c\u5176\u751f\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u53ef\u4f9b\u94a9\u5b50\u4f7f\u7528\uff09\u3002</p> <p>\u65b0\u7279\u6027 2.21.0\uff1a\u5982\u679c\u672a\u5b89\u88c5\uff0cpre-commit \u5c06\u5f15\u5bfc\u5b89\u88c5 <code>rust</code>\u3002<code>language: rust</code> \u73b0\u5728\u8fd8\u652f\u6301 <code>language_version</code>\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1a\u5b83\u5df2\u5728 Linux\u3001Windows \u548c macOS \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002</p> <p>Rust hooks are installed using Cargo, Rust's official package manager.</p> <p>Hook repositories must have a <code>Cargo.toml</code> file which produces at least one binary (example), whose name should match the <code>entry</code> definition for your hook. The repo will be installed via <code>cargo install --bins</code> (with the binaries stored in your pre-commit cache, not polluting your user-level Cargo installations).</p> <p>When specifying <code>additional_dependencies</code> for Rust, you can use the syntax <code>{package_name}:{package_version}</code> to specify a new library dependency (used to build your hook repo), or the special syntax <code>cli:{package_name}:{package_version}</code> for a CLI dependency (built separately, with binaries made available for use by hooks).</p> <p>new in 2.21.0: pre-commit will bootstrap <code>rust</code> if it is not present. <code>language: rust</code> also now supports <code>language_version</code></p> <p>Support: It has been tested on linux, Windows, and macOS.</p>"},{"location":"new-hooks/#swift","title":"swift","text":"\u4e2d\u6587\u82f1\u6587 <p>\u94a9\u5b50\u4ed3\u5e93\u5fc5\u987b\u5305\u542b\u4e00\u4e2a <code>Package.swift</code> \u6587\u4ef6\u3002\u5b83\u5c06\u901a\u8fc7 <code>swift build -c release</code> \u8fdb\u884c\u5b89\u88c5\u3002<code>entry</code> \u5e94\u8be5\u5339\u914d\u6784\u5efa\u4ed3\u5e93\u65f6\u521b\u5efa\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1a\u5df2\u77e5 swift \u94a9\u5b50\u53ef\u4ee5\u5728\u5b89\u88c5\u4e86 swift \u7684\u4efb\u4f55\u7cfb\u7edf\u4e0a\u5de5\u4f5c\u3002\u5b83\u5df2\u5728 Linux \u548c macOS \u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002</p> <p>The hook repository must have a <code>Package.swift</code>.  It will be installed via <code>swift build -c release</code>.  The <code>entry</code> should match an executable created by building the repository.</p> <p>Support: swift hooks are known to work on any system which has swift installed.  It has been tested on linux and macOS.</p>"},{"location":"new-hooks/#pygrep","title":"pygrep","text":"\u4e2d\u6587\u82f1\u6587 <p>\u8de8\u5e73\u53f0\u7684 Python \u5b9e\u73b0 <code>grep</code> \u2014\u2014 pygrep \u94a9\u5b50\u662f\u7f16\u5199\u7b80\u5355\u94a9\u5b50\u7684\u5feb\u901f\u65b9\u6cd5\uff0c\u901a\u8fc7\u6587\u4ef6\u5339\u914d\u9632\u6b62\u63d0\u4ea4\u3002\u5c06\u6b63\u5219\u8868\u8fbe\u5f0f\u6307\u5b9a\u4e3a <code>entry</code>\u3002<code>entry</code> \u53ef\u4ee5\u662f\u4efb\u4f55 Python \u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u5bf9\u4e8e\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5728\u6761\u76ee\u7684\u5f00\u5934\u4f7f\u7528 <code>(?i)</code> \u6807\u5fd7\uff0c\u6216\u8005\u4f7f\u7528 <code>args: [-i]</code>\u3002</p> <p>\u5bf9\u4e8e\u591a\u884c\u5339\u914d\uff0c\u8bf7\u4f7f\u7528 <code>args: [--multiline]</code>\u3002</p> <p>\u65b0\u7279\u6027 2.8.0\uff1a\u8981\u8981\u6c42\u6240\u6709\u6587\u4ef6\u5339\u914d\uff0c\u8bf7\u4f7f\u7528 <code>args: [--negate]</code>\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1apygrep \u94a9\u5b50\u652f\u6301 pre-commit \u8fd0\u884c\u7684\u6240\u6709\u5e73\u53f0\u3002</p> <p>A cross-platform python implementation of <code>grep</code> \u2013 pygrep hooks are a quick way to write a simple hook which prevents commits by file matching.  Specify the regex as the <code>entry</code>.  The <code>entry</code> may be any python regular expression.  For case insensitive regexes you can apply the <code>(?i)</code> flag as the start of your entry, or use <code>args: [-i]</code>.</p> <p>For multiline matches, use <code>args: [--multiline]</code>.</p> <p>new in 2.8.0: To require all files to match, use <code>args: [--negate]</code>.</p> <p>Support: pygrep hooks are supported on all platforms which pre-commit runs on.</p>"},{"location":"new-hooks/#script","title":"script","text":"\u4e2d\u6587\u82f1\u6587 <p>\u811a\u672c\u94a9\u5b50\u63d0\u4f9b\u4e86\u4e00\u79cd\u7f16\u5199\u9a8c\u8bc1\u6587\u4ef6\u7684\u7b80\u5355\u811a\u672c\u7684\u65b9\u6cd5\u3002<code>entry</code> \u5e94\u8be5\u662f\u76f8\u5bf9\u4e8e\u94a9\u5b50\u4ed3\u5e93\u6839\u76ee\u5f55\u7684\u8def\u5f84\u3002</p> <p>\u8fd9\u79cd\u7c7b\u578b\u7684\u94a9\u5b50\u4e0d\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u865a\u62df\u73af\u5883\u6765\u5de5\u4f5c\u2014\u2014\u5982\u679c\u5b83\u9700\u8981\u989d\u5916\u7684\u4f9d\u8d56\u9879\uff0c\u4f7f\u7528\u8005\u5fc5\u987b\u624b\u52a8\u5b89\u88c5\u5b83\u4eec\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1a\u811a\u672c\u94a9\u5b50\u7684\u652f\u6301\u53d6\u51b3\u4e8e\u811a\u672c\u672c\u8eab\u3002</p> <p>Script hooks provide a way to write simple scripts which validate files. The <code>entry</code> should be a path relative to the root of the hook repository.</p> <p>This hook type will not be given a virtual environment to work with \u2013 if it needs additional dependencies the consumer must install them manually.</p> <p>Support: the support of script hooks depend on the scripts themselves.</p>"},{"location":"new-hooks/#system","title":"system","text":"\u4e2d\u6587\u82f1\u6587 <p>\u7cfb\u7edf\u94a9\u5b50\u63d0\u4f9b\u4e86\u4e00\u79cd\u7f16\u5199\u7cfb\u7edf\u7ea7\u53ef\u6267\u884c\u6587\u4ef6\u94a9\u5b50\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u53ef\u6267\u884c\u6587\u4ef6\u5728\u4e0a\u9762\u6ca1\u6709\u652f\u6301\u7684\u8bed\u8a00\uff08\u6216\u8005\u6709\u7279\u6b8a\u7684\u73af\u5883\u8981\u6c42\uff0c\u4e0d\u5141\u8bb8\u5b83\u4eec\u72ec\u7acb\u8fd0\u884c\uff0c\u4f8b\u5982 pylint\uff09\u3002</p> <p>\u8fd9\u79cd\u7c7b\u578b\u7684\u94a9\u5b50\u4e0d\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u865a\u62df\u73af\u5883\u6765\u5de5\u4f5c\u2014\u2014\u5982\u679c\u5b83\u9700\u8981\u989d\u5916\u7684\u4f9d\u8d56\u9879\uff0c\u4f7f\u7528\u8005\u5fc5\u987b\u624b\u52a8\u5b89\u88c5\u5b83\u4eec\u3002</p> <p>\u652f\u6301\u60c5\u51b5\uff1a\u7cfb\u7edf\u94a9\u5b50\u7684\u652f\u6301\u53d6\u51b3\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u672c\u8eab\u3002</p> <p>System hooks provide a way to write hooks for system-level executables which don't have a supported language above (or have special environment requirements that don't allow them to run in isolation such as pylint).</p> <p>This hook type will not be given a virtual environment to work with \u2013 if it needs additional dependencies the consumer must install them manually.</p> <p>Support: the support of system hooks depend on the executables.</p>"},{"location":"plugins/","title":"\u6dfb\u52a0 pre-commit \u63d2\u4ef6\u5230\u4f60\u7684\u9879\u76ee","text":"<p>Adding pre-commit plugins to your project</p> \u4e2d\u6587\u82f1\u6587 <p>\u5b89\u88c5\u4e86 pre-commit \u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>.pre-commit-config.yaml</code> \u914d\u7f6e\u6587\u4ef6\u5411\u60a8\u7684\u9879\u76ee\u6dfb\u52a0 pre-commit \u63d2\u4ef6\u3002</p> <p>\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u6dfb\u52a0\u4e00\u4e2a\u540d\u4e3a <code>.pre-commit-config.yaml</code> \u7684\u6587\u4ef6\u3002pre-commit \u914d\u7f6e\u6587\u4ef6\u63cf\u8ff0\u4e86\u5b89\u88c5\u4e86\u54ea\u4e9b\u4ed3\u5e93\u548c\u94a9\u5b50\u3002</p> <p>Once you have pre-commit installed, adding pre-commit plugins to your project is done with the <code>.pre-commit-config.yaml</code> configuration file.</p> <p>Add a file called <code>.pre-commit-config.yaml</code> to the root of your project. The pre-commit config file describes what repositories and hooks are installed.</p>"},{"location":"plugins/#pre-commit-configyaml---\u9876\u7ea7\u914d\u7f6e","title":".pre-commit-config.yaml - \u9876\u7ea7\u914d\u7f6e","text":"<p>.pre-commit-config.yaml - top level</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ee5\u4e0b\u662f <code>.pre-commit-config.yaml</code> \u6587\u4ef6\u4e2d\u7684\u9876\u7ea7\u914d\u7f6e\u9009\u9879\u7684\u89e3\u91ca\uff1a</p> \u914d\u7f6e\u9879 \u63cf\u8ff0 <code>repos</code> \u4e00\u4e2a\u5305\u542b\u4ed3\u5e93\u6620\u5c04\u7684\u5217\u8868\u3002 <code>default_install_hook_types</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>[pre-commit]</code>\uff09\u5728\u8fd0\u884c<code>pre-commit install</code>\u65f6\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7684<code>--hook-type</code>\u5217\u8868\u30022.18.0 \u7248\u672c\u65b0\u589e <code>default_language_version</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>{}</code>\uff09\u4e00\u79cd\u8bed\u8a00\u5230\u9ed8\u8ba4<code>language_version</code>\u7684\u6620\u5c04\uff0c\u8be5\u7248\u672c\u5e94\u8be5\u7528\u4e8e\u8be5\u8bed\u8a00\u3002\u8fd9\u53ea\u4f1a\u5728\u6ca1\u6709\u8bbe\u7f6e<code>language_version</code>\u7684\u4e2a\u522b\u94a9\u5b50\u4e2d\u8986\u76d6\u3002\u4f8b\u5982\uff0c\u8981\u4e3a<code>language: python</code>\u94a9\u5b50\u4f7f\u7528<code>python3.7</code>\uff1a<code>yaml&lt;br&gt;default_language_version:&lt;br&gt;    python: python3.7&lt;br&gt;</code> <code>default_stages</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u9636\u6bb5\uff09\u94a9\u5b50\u7684<code>stages</code>\u5c5e\u6027\u7684\u5168\u5c40\u9ed8\u8ba4\u503c\u3002\u8fd9\u53ea\u4f1a\u5728\u6ca1\u6709\u8bbe\u7f6e<code>stages</code>\u7684\u4e2a\u522b\u94a9\u5b50\u4e2d\u8986\u76d6\u3002\u4f8b\u5982\uff1a<code>yaml&lt;br&gt;default_stages: [pre-commit, pre-push]&lt;br&gt;</code> <code>files</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>''</code>\uff09\u5168\u5c40\u6587\u4ef6\u5305\u542b\u6a21\u5f0f\u3002 <code>exclude</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>^$</code>\uff09\u5168\u5c40\u6587\u4ef6\u6392\u9664\u6a21\u5f0f\u3002 <code>fail_fast</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>false</code>\uff09\u8bbe\u7f6e\u4e3a <code>true</code> \u4ee5\u5728\u9996\u6b21\u5931\u8d25\u540e\u505c\u6b62\u8fd0\u884c\u94a9\u5b50\u3002 <code>minimum_pre_commit_version</code> \uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a <code>'0'</code>\uff09\u8981\u6c42 pre-commit \u7684\u6700\u4f4e\u7248\u672c\u3002 <p>\u4e00\u4e2a\u793a\u4f8b\u9876\u7ea7\u914d\u7f6e\uff1a</p> <pre><code>exclude: '^$'\nfail_fast: false\nrepos:\n-   ...\n</code></pre> <pre><code>=r=\n    =c= [`repos`](_#top_level-repos)\n    =c= A list of [repository mappings](#pre-commit-configyaml---repos).\n=r=\n    =c= [`default_install_hook_types`](_#top_level-default_install_hook_types)\n    =c= (optional: default `[pre-commit]`) a list of `--hook-type`s which will\n        be used by default when running\n        [`pre-commit install`](#pre-commit-install).\n\n        _new in 2.18.0_\n=r=\n    =c= [`default_language_version`](_#top_level-default_language_version)\n    =c= (optional: default `{}`) a mapping from language to the default\n        [`language_version`](#config-language_version) that should be used for that language.  This will\n        only override individual hooks that do not set [`language_version`](#config-language_version).\n\n        For example to use `python3.7` for `language: python` hooks:\n\n        ```yaml\n        default_language_version:\n            python: python3.7\n        ```\n=r=\n    =c= [`default_stages`](_#top_level-default_stages)\n    =c= (optional: default (all stages)) a configuration-wide default for\n        the [`stages`](#config-stages) property of hooks.  This will only override individual\n        hooks that do not set [`stages`](#config-stages).\n\n        For example:\n\n        ```yaml\n        default_stages: [pre-commit, pre-push]\n        ```\n=r=\n    =c= [`files`](_#top_level-files)\n    =c= (optional: default `''`) global file include pattern.\n=r=\n    =c= [`exclude`](_#top_level-exclude)\n    =c= (optional: default `^$`) global file exclude pattern.\n=r=\n    =c= [`fail_fast`](_#top_level-fail_fast)\n    =c= (optional: default `false`) set to `true` to have pre-commit stop\n        running hooks after the first failure.\n=r=\n    =c= [`minimum_pre_commit_version`](_#top_level-minimum_pre_commit_version)\n    =c= (optional: default `'0'`) require a minimum version of pre-commit.\n</code></pre> <p>A sample top-level:</p> <pre><code>exclude: '^$'\nfail_fast: false\nrepos:\n-   ...\n</code></pre>"},{"location":"plugins/#pre-commit-configyaml---\u4ed3\u5e93\u914d\u7f6e","title":".pre-commit-config.yaml - \u4ed3\u5e93\u914d\u7f6e","text":"<p>.pre-commit-config.yaml - repos</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ed3\u5e93\u6620\u5c04\u544a\u8bc9 pre-commit \u4ece\u54ea\u91cc\u83b7\u53d6\u94a9\u5b50\u7684\u4ee3\u7801\u3002</p> \u914d\u7f6e\u9879 \u63cf\u8ff0 <code>repo</code> \u8981 <code>git clone</code> \u7684\u4ed3\u5e93 URL\uff0c\u6216\u8005\u662f\u7279\u6b8a\u54e8\u5175\u503c\uff1a<code>local</code>, <code>meta</code>\u3002 <code>rev</code> \u514b\u9686\u65f6\u4f7f\u7528\u7684\u4fee\u8ba2\u7248\u672c\u6216\u6807\u7b7e\u3002 <code>hooks</code> \u4e00\u4e2a\u5305\u542b\u94a9\u5b50\u6620\u5c04\u7684\u5217\u8868\u3002 <p>\u4e00\u4e2a\u793a\u4f8b\u4ed3\u5e93\uff1a</p> <pre><code>repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks \n    rev: v1.2.3\n    hooks:\n    -   ...\n</code></pre> <p>The repository mapping tells pre-commit where to get the code for the hook from.</p> <pre><code>=r=\n    =c= [`repo`](_#repos-repo)\n    =c= the repository url to `git clone` from\n        or one of the special sentinel values:\n        [`local`](#repository-local-hooks),\n        [`meta`](#meta-hooks).\n=r=\n    =c= [`rev`](_#repos-rev)\n    =c= the revision or tag to clone at.\n=r=\n    =c= [`hooks`](_#repos-hooks)\n    =c= A list of [hook mappings](#pre-commit-configyaml---hooks).\n</code></pre> <p>A sample repository:</p> <pre><code>repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v1.2.3\n    hooks:\n    -   ...\n</code></pre>"},{"location":"plugins/#pre-commit-configyaml---\u94a9\u5b50\u914d\u7f6e","title":".pre-commit-config.yaml - \u94a9\u5b50\u914d\u7f6e","text":"<p>.pre-commit-config.yaml - hooks</p> \u4e2d\u6587\u82f1\u6587 <p>\u94a9\u5b50\u6620\u5c04\u914d\u7f6e\u4e86\u4f7f\u7528\u4ed3\u5e93\u4e2d\u7684\u54ea\u4e2a\u94a9\u5b50\uff0c\u5e76\u5141\u8bb8\u81ea\u5b9a\u4e49\u3002\u6240\u6709\u53ef\u9009\u7684\u952e\u5c06\u4ece\u4ed3\u5e93\u7684\u914d\u7f6e\u4e2d\u83b7\u5f97\u5176\u9ed8\u8ba4\u503c\u3002</p> \u914d\u7f6e\u9879 \u63cf\u8ff0 <code>id</code> \u8981\u4f7f\u7528\u7684\u4ed3\u5e93\u4e2d\u7684\u94a9\u5b50\u3002 <code>alias</code> \uff08\u53ef\u9009\uff09\u5141\u8bb8\u5728\u4f7f\u7528 <code>pre-commit run &lt;hookid&gt;</code> \u65f6\u4f7f\u7528\u989d\u5916\u7684 ID \u5f15\u7528\u94a9\u5b50\u3002 <code>name</code> \uff08\u53ef\u9009\uff09\u8986\u76d6\u94a9\u5b50\u7684\u540d\u79f0 - \u5728\u94a9\u5b50\u6267\u884c\u671f\u95f4\u663e\u793a\u3002 <code>language_version</code> \uff08\u53ef\u9009\uff09\u8986\u76d6\u94a9\u5b50\u7684\u8bed\u8a00\u7248\u672c\u3002\u53c2\u89c1\u8986\u76d6\u8bed\u8a00\u7248\u672c\u3002 <code>files</code> \uff08\u53ef\u9009\uff09\u8986\u76d6\u8981\u8fd0\u884c\u7684\u6587\u4ef6\u7684\u9ed8\u8ba4\u6a21\u5f0f\u3002 <code>exclude</code> \uff08\u53ef\u9009\uff09\u6587\u4ef6\u6392\u9664\u6a21\u5f0f\u3002 <code>types</code> \uff08\u53ef\u9009\uff09\u8986\u76d6\u8981\u8fd0\u884c\u7684\u9ed8\u8ba4\u6587\u4ef6\u7c7b\u578b\uff08AND\uff09\u3002\u53c2\u89c1\u4f7f\u7528\u7c7b\u578b\u8fc7\u6ee4\u6587\u4ef6\u3002 <code>types_or</code> \uff08\u53ef\u9009\uff09\u8986\u76d6\u8981\u8fd0\u884c\u7684\u9ed8\u8ba4\u6587\u4ef6\u7c7b\u578b\uff08OR\uff09\u3002\u53c2\u89c1\u4f7f\u7528\u7c7b\u578b\u8fc7\u6ee4\u6587\u4ef6\u30022.9.0 \u7248\u672c\u65b0\u589e\u3002 <code>exclude_types</code> \uff08\u53ef\u9009\uff09\u8981\u6392\u9664\u7684\u6587\u4ef6\u7c7b\u578b\u3002 <code>args</code> \uff08\u53ef\u9009\uff09\u8981\u4f20\u9012\u7ed9\u94a9\u5b50\u7684\u9644\u52a0\u53c2\u6570\u5217\u8868\u3002 <code>stages</code> \uff08\u53ef\u9009\uff09\u9009\u62e9\u8981\u8fd0\u884c\u7684 git \u94a9\u5b50\u3002\u53c2\u89c1\u9650\u5236\u94a9\u5b50\u5728\u7279\u5b9a\u9636\u6bb5\u8fd0\u884c\u3002 <code>additional_dependencies</code> \uff08\u53ef\u9009\uff09\u5c06\u5728\u8fd0\u884c\u6b64\u94a9\u5b50\u7684\u73af\u5883\u91cc\u5b89\u88c5\u7684\u4f9d\u8d56\u9879\u5217\u8868\u3002\u4e00\u4e2a\u6709\u7528\u7684\u5e94\u7528\u662f\u5b89\u88c5\u94a9\u5b50\u5982 <code>eslint</code> \u7684\u63d2\u4ef6\u3002 <code>always_run</code> \uff08\u53ef\u9009\uff09\u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u5373\u4f7f\u6ca1\u6709\u5339\u914d\u7684\u6587\u4ef6\uff0c\u8fd9\u4e2a\u94a9\u5b50\u4e5f\u4f1a\u8fd0\u884c\u3002 <code>verbose</code> \uff08\u53ef\u9009\uff09\u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u5373\u4f7f\u94a9\u5b50\u901a\u8fc7\uff0c\u4e5f\u5f3a\u5236\u6253\u5370\u94a9\u5b50\u7684\u8f93\u51fa\u3002 <code>log_file</code> \uff08\u53ef\u9009\uff09\u5982\u679c\u5b58\u5728\uff0c\u5f53\u94a9\u5b50\u5931\u8d25\u6216verbose\u4e3a <code>true</code> \u65f6\uff0c\u94a9\u5b50\u7684\u8f93\u51fa\u4e5f\u5c06\u88ab\u5199\u5165\u6587\u4ef6\u3002 <p>\u4e00\u4e2a\u5b8c\u6574\u7684\u914d\u7f6e\u793a\u4f8b\uff1a</p> <pre><code>repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks \n    rev: v1.2.3\n    hooks:\n    -   id: trailing-whitespace\n</code></pre> <p>\u8fd9\u4e2a\u914d\u7f6e\u8868\u793a\u4e0b\u8f7d pre-commit-hooks \u9879\u76ee\u5e76\u8fd0\u884c\u5b83\u7684 trailing-whitespace \u94a9\u5b50\u3002</p> <p>The hook mapping configures which hook from the repository is used and allows for customization.  All optional keys will receive their default from the repository's configuration.</p> <pre><code>=r=\n    =c= [`id`](_#config-id)\n    =c= which hook from the repository to use.\n=r=\n    =c= [`alias`](_#config-alias)\n    =c= (optional) allows the hook to be referenced using an additional id when\n        using `pre-commit run &lt;hookid&gt;`.\n=r=\n    =c= [`name`](_#config-name)\n    =c= (optional) override the name of the hook - shown during hook execution.\n=r=\n    =c= [`language_version`](_#config-language_version)\n    =c= (optional) override the language version for the\n        hook.  See [Overriding Language Version](#overriding-language-version).\n=r=\n    =c= [`files`](_#config-files)\n    =c= (optional) override the default pattern for files to run on.\n=r=\n    =c= [`exclude`](_#config-exclude)\n    =c= (optional) file exclude pattern.\n=r=\n    =c= [`types`](_#config-types)\n    =c= (optional) override the default file types to run on (AND).  See\n        [Filtering files with types](#filtering-files-with-types).\n=r=\n    =c= [`types_or`](_#config-types_or)\n    =c= (optional) override the default file types to run on (OR).  See\n        [Filtering files with types](#filtering-files-with-types).\n        _new in 2.9.0_.\n=r=\n    =c= [`exclude_types`](_#config-exclude_types)\n    =c= (optional) file types to exclude.\n=r=\n    =c= [`args`](_#config-args)\n    =c= (optional) list of additional parameters to pass to the hook.\n=r=\n    =c= [`stages`](_#config-stages)\n    =c= (optional) selects which git hook(s) to run for.\n        See [Confining hooks to run at certain stages](#confining-hooks-to-run-at-certain-stages).\n=r=\n    =c= [`additional_dependencies`](_#config-additional_dependencies)\n    =c= (optional) a list of dependencies that will be installed in the\n        environment where this hook gets run.  One useful application is to\n        install plugins for hooks such as `eslint`.\n=r=\n    =c= [`always_run`](_#config-always_run)\n    =c= (optional) if `true`, this hook will run even if there are no matching\n        files.\n=r=\n    =c= [`verbose`](_#config-verbose)\n    =c= (optional) if `true`, forces the output of the hook to be printed even when\n        the hook passes.\n=r=\n    =c= [`log_file`](_#config-log_file)\n    =c= (optional) if present, the hook output will additionally be written to\n        a file when the hook fails or [verbose](#config-verbose) is `true`.\n</code></pre> <p>One example of a complete configuration:</p> <pre><code>repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v1.2.3\n    hooks:\n    -   id: trailing-whitespace\n</code></pre> <p>This configuration says to download the pre-commit-hooks project and run its trailing-whitespace hook.</p>"},{"location":"plugins/#\u81ea\u52a8\u66f4\u65b0\u94a9\u5b50","title":"\u81ea\u52a8\u66f4\u65b0\u94a9\u5b50","text":"<p>Updating hooks automatically</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u4ee5\u8fd0\u884c <code>pre-commit autoupdate</code> \u6765\u81ea\u52a8\u5c06\u60a8\u7684\u94a9\u5b50\u66f4\u65b0\u5230\u6700\u65b0\u7248\u672c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4f1a\u5c06\u94a9\u5b50\u66f4\u65b0\u5230\u9ed8\u8ba4\u5206\u652f\u4e0a\u7684\u6700\u65b0\u6807\u7b7e\u3002</p> <p>You can update your hooks to the latest version automatically by running <code>pre-commit autoupdate</code>.  By default, this will bring the hooks to the latest tag on the default branch.</p>"},{"location":"usage/","title":"\u7528\u6cd5","text":"<p>Usage</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd0\u884c <code>pre-commit install</code> \u5c06 pre-commit \u5b89\u88c5\u5230\u60a8\u7684 git \u94a9\u5b50\u4e2d\u3002\u73b0\u5728\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6 pre-commit \u90fd\u4f1a\u8fd0\u884c\u3002\u6bcf\u6b21\u514b\u9686\u4f7f\u7528 pre-commit \u7684\u9879\u76ee\u65f6\uff0c\u8fd0\u884c <code>pre-commit install</code> \u5e94\u8be5\u662f\u60a8\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u3002</p> <p>\u5982\u679c\u60a8\u60f3\u624b\u52a8\u5728\u4ed3\u5e93\u4e0a\u8fd0\u884c\u6240\u6709 pre-commit \u94a9\u5b50\uff0c\u8bf7\u8fd0\u884c <code>pre-commit run --all-files</code>\u3002\u8981\u8fd0\u884c\u4e2a\u522b\u94a9\u5b50\uff0c\u8bf7\u4f7f\u7528 <code>pre-commit run &lt;hook_id&gt;</code>\u3002</p> <p>\u9996\u6b21\u5728\u6587\u4ef6\u4e0a\u8fd0\u884c pre-commit \u65f6\uff0c\u5b83\u5c06\u81ea\u52a8\u4e0b\u8f7d\u3001\u5b89\u88c5\u5e76\u8fd0\u884c\u94a9\u5b50\u3002\u8bf7\u6ce8\u610f\uff0c\u9996\u6b21\u8fd0\u884c\u94a9\u5b50\u53ef\u80fd\u4f1a\u6bd4\u8f83\u6162\u3002\u4f8b\u5982\uff1a\u5982\u679c\u673a\u5668\u4e0a\u6ca1\u6709\u5b89\u88c5 node\uff0cpre-commit \u5c06\u4f1a\u4e0b\u8f7d\u5e76\u6784\u5efa node \u7684\u526f\u672c\u3002</p> <pre><code>$ pre-commit install\npre-commit installed at /home/asottile/workspace/pytest/.git/hooks/pre-commit\n$ git commit -m \"Add super awesome feature\"\nblack....................................................................Passed\nblacken-docs.........................................(no files to check)Skipped\nTrim Trailing Whitespace.................................................Passed\nFix End of Files.........................................................Passed\nCheck Yaml...........................................(no files to check)Skipped\nDebug Statements (Python)................................................Passed\nFlake8...................................................................Passed\nReorder python imports...................................................Passed\npyupgrade................................................................Passed\nrst ``code`` is two backticks........................(no files to check)Skipped\nrst..................................................(no files to check)Skipped\nchangelog filenames..................................(no files to check)Skipped\n[main 146c6c2c] Add super awesome feature\n 1 file changed, 1 insertion(+)\n</code></pre> <p>Run <code>pre-commit install</code> to install pre-commit into your git hooks. pre-commit will now run on every commit. Every time you clone a project using pre-commit running <code>pre-commit install</code> should always be the first thing you do.</p> <p>If you want to manually run all pre-commit hooks on a repository, run <code>pre-commit run --all-files</code>. To run individual hooks use <code>pre-commit run &lt;hook_id&gt;</code>.</p> <p>The first time pre-commit runs on a file it will automatically download, install, and run the hook. Note that running a hook for the first time may be slow. For example: If the machine does not have node installed, pre-commit will download and build a copy of node.</p> <pre><code>$ pre-commit install\npre-commit installed at /home/asottile/workspace/pytest/.git/hooks/pre-commit\n$ git commit -m \"Add super awesome feature\"\nblack....................................................................Passed\nblacken-docs.........................................(no files to check)Skipped\nTrim Trailing Whitespace.................................................Passed\nFix End of Files.........................................................Passed\nCheck Yaml...........................................(no files to check)Skipped\nDebug Statements (Python)................................................Passed\nFlake8...................................................................Passed\nReorder python imports...................................................Passed\npyupgrade................................................................Passed\nrst ``code`` is two backticks........................(no files to check)Skipped\nrst..................................................(no files to check)Skipped\nchangelog filenames..................................(no files to check)Skipped\n[main 146c6c2c] Add super awesome feature\n 1 file changed, 1 insertion(+)\n</code></pre>"}]}